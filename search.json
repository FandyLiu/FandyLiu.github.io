[{"title":"注解","url":"https://fandyliu.github.io/2017/06/04/Java/注解/","content":"<p>从 Java 5 开始，java 开始对元数据的支持，也就是<code>注解(Annotation)</code>。</p>\n<p>注解:用来描述数据的数据</p>\n<p>注解/标签/annotation 都指的是注解</p>\n<p><code>元数据</code>(metadata)：描述数据的数据。</p>\n<p>注解被用来为程序元素(类，方法，成员变量等)设置元数据。</p>\n<p>所有的 Annotation 都是 java.lang.annotation.Annotation 接口的子接口，所以 Annotation 是一种特殊的接口。</p>\n<p>@interface Override {} —&gt; interface Override extends java.lang.annotation.Annotation{}</p>\n<p>所有的枚举类，都是java.lang.Enum类的子类。<br>enum Gender{}——&gt;  class Gender extends java.lang.Enum{}</p>\n<h2 id=\"JDK中自带的注解\"><a href=\"#JDK中自带的注解\" class=\"headerlink\" title=\"JDK中自带的注解\"></a>JDK中自带的注解</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JDK中内置的注解</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">@Override</td>\n<td style=\"text-align:center\">限定覆写父类方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Deprecated</td>\n<td style=\"text-align:center\">标记已过时,不推荐使用.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@SuppressWarings(value=”xxx”)</td>\n<td style=\"text-align:center\">抑制编译器发出的警告,(不会解决问题)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@SafeVarargs</td>\n<td style=\"text-align:center\">抑制堆污染警告(Java7开始出现的)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>堆污染:</strong> 当方法使用了泛型和可变参数的时候,可能出现堆污染。如：</p>\n<pre><code>@SafeVarargs\npublic static &lt;T&gt; List&lt;T&gt; asList(T... a) {\n    return new ArrayList&lt;&gt;(a);\n}\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 元注解    </div><div class=\"line\"><span class=\"code\">    </span></div><div class=\"line\">*<span class=\"strong\">*元注解*</span><span class=\"strong\">*：注解的注解</span></div><div class=\"line\">\r* @Retention: 描述当前的注解能够保存到的时期</div><div class=\"line\">\r他的值封装到枚举类 *<span class=\"strong\">*RetentionPolicy*</span>* 中的</div><div class=\"line\">\r<span class=\"strong\">*自定义的注解应该保存到 RUNTIME 方便用反射读取。*</span></div><div class=\"line\"></div><div class=\"line\">RetentionPolicy | 含义</div><div class=\"line\"><span class=\"meta\">:-:|:-:</span></div><div class=\"line\">CLASS | 编译器将把注释记录在类文件中，但在运行时 VM 不需要保留注释。</div><div class=\"line\">RUNTIME | 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。</div><div class=\"line\">SOURCE  | 编译器要丢弃的注释。</div><div class=\"line\">\r<span class=\"bullet\">* </span>@Target: 当前的注解能够贴到哪些程序元素上</div><div class=\"line\"></div><div class=\"line\">他的值封装到枚举类 *<span class=\"strong\">*ElementType*</span>* 中的</div><div class=\"line\"><span class=\"code\">\t</span></div><div class=\"line\">ElementType | 含义</div><div class=\"line\"><span class=\"meta\">:-:|:-:</span></div><div class=\"line\">ElementType.ANNOTATION<span class=\"emphasis\">_TYPE | 只能修饰Annotation\rElementType.CONSTRUCTOR | 只能修饰构造方法\rElementType.FIELD | 只能修饰字段(属性),包括枚举常量\rElementType.LOCAL_</span>VARIABLE | 只能修饰局部变量\rElementType.METHOD | 只能修饰方法\rElementType.PACKAGE | 只能修饰包(极少使用)\rElementType.PARAMETER | 只能修饰参数\rElementType.TYPE | 只能修饰类，接口，枚举\r\r<span class=\"bullet\">* </span>@Documented:  表示当前的注解可以保存到API文档中\r<span class=\"bullet\">* </span>@Inherited: 如果父类当中有该注解,则表示子类中也有\r\r## 自定义注解和使用</div><div class=\"line\">\r1. 创建注解:</div><div class=\"line\"></div><div class=\"line\">注意: 数据类型只能是：only primitive type(基本数据类型), String, Class, annotation, enumeration(枚举), arrays(数组)</div></pre></td></tr></table></figure>\n\n@Target({ElementType.CONSTRUCTOR, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation {\n   // 如果在使用的时候只需要传递 value 则可以在参数列表中省略（见下）\n    String value(); \n    String name() default &quot;Fandy&quot;;\n    int age() default 18;\n}\n</code></pre><ol>\n<li>定义需要别贴的程序元素,将注解贴到程序元素上</li>\n</ol>\n<pre><code>// @MyAnnotation(&quot;niu B&quot;) // 只传 value 省略 &apos;key&apos;\n@MyAnnotation(value = &quot;niu B&quot;,name =&quot;fandy&quot;)\nclass Person {\n}\n</code></pre><ol>\n<li>第三方的程序赋予注解特殊的功能</li>\n</ol>\n<h2 id=\"模拟-JUnit4-x\"><a href=\"#模拟-JUnit4-x\" class=\"headerlink\" title=\"模拟 JUnit4.x\"></a>模拟 JUnit4.x</h2><p><em>大家都知道 Junit4.x 的执行效果：</em></p>\n<p>首先执行 <code>@Before</code> 标签所帖的方法，再执行测试方法（被 <code>@Test</code> 标签所贴的方法）,最后执行 <code>@After</code> 标签所帖的方法。</p>\n<p>操作步骤:<br>1.定义注解<br>@MyBefore  @MyTest  @MyAfter<br>2.定义程序元素,将注解贴到程序元素上<br>定义一个EmployeeDAOTest,将定义好的注解贴到程序元素上<br>3.使用第三方的程序来赋予注解特殊的功能<br>1).创建三个集合,分别用来存放三种标签对应的方法</p>\n<p>2).取出该方法所有的公共方法<br>Method[] methods = Class实例对象.getMethods();</p>\n<p>3).遍历所有的方法,将不同标签所贴的方法放到对应的集合中</p>\n<p>4).遍历testList集合中的所有的测试方法,<br>在执行测试方法之前,遍历beforeList集合中的所有方法,并执行</p>\n<p>调用该测试方法</p>\n<p>在执行测试方法之后,遍历afterList集合中的所有方法,并执行</p>\n","categories":["Java"],"tags":["注解"]},{"title":"资源文件","url":"https://fandyliu.github.io/2017/06/04/Java/资源文件/","content":"<h2 id=\"为什么要使用资源文件？\"><a href=\"#为什么要使用资源文件？\" class=\"headerlink\" title=\"为什么要使用资源文件？\"></a>为什么要使用资源文件？</h2><p>传统设计:操作MySQL数据库:账号和密码<br>String username = “root”;<br>String password = “admin”;</p>\n<p>会在代码中写死(硬编码).切换为Oracle:scott/tiger,此时就会修改源代码。<br>开发中要避免硬编码,提供维护性。</p>\n<p>因此我们可以使用配置文件来解决这个问题。把账号和密码存放在配置文件中，那么以后要切换数据库，只需要改配置文件即可。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>配置文件: 主要有 properties 和 xml 。</p>\n<p>如果数据之间有关联，则使用 xml，反之则使用 properties。</p>\n<p>properties<code>（注意空格）</code></p>\n<pre><code>#key=value\nusername=root\npassword=admin\n</code></pre><p>现在的问题,如何来读取配置文件中的数据.<br>要读取properties文件.必须使用Properties类(Hashtable的子类,Map的实现类).<br>Properties对象.load(InputStream in);</p>\n<h3 id=\"加载资源文件\"><a href=\"#加载资源文件\" class=\"headerlink\" title=\"加载资源文件:\"></a>加载资源文件:</h3><p>加载资源文件要使用相对路径，要想使用相对路径加载资源文件，资源文件要在资源文件 src 的 CLASSPATH 的根路径上。</p>\n<ul>\n<li><strong>相对于 CLASSPATH（kind: output）的根路径</strong></li>\n</ul>\n<p>此时要从CLASSPATH（kind: output）路径去找资源文件,必须使用ClassLoader类(类加载器).<br>如何获取ClassLoader对象:</p>\n<p><strong>方式1:</strong>  ClassLoader loader = Thread.currentThrad().getContextClassLoader();</p>\n<p><strong>方式2:</strong>  ClassLoader loader = 当前类.class.getClassLoader();</p>\n<p>再通过方法 public InputStream getResourceAsStream(String fileName) 获取输入流。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Properties p = new Properties()<span class=\"comment\">;</span></div><div class=\"line\">// 获得文件的相对路径</div><div class=\"line\">ClassLoader classLoader = Thread.currentThread().getContextClassLoader()<span class=\"comment\">;</span></div><div class=\"line\">// ClassLoader classLoader = PropertiesTest.class.getClassLoader()<span class=\"comment\">;</span></div><div class=\"line\">InputStream inStream = classLoader.getResourceAsStream(<span class=\"string\">\"db.properties\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">p.load(inStream)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"username\"</span>))<span class=\"comment\">; </span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"password\"</span>))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>相对于加载类的类路径  CLASSPATH（kind: output)</strong></li>\n</ul>\n<p>PropertiesTest 类的包名为 com.fandy.load。通过方法 <code>InputStream inStream = PropertiesTest.class.getResourceAsStream(&quot;db.properties&quot;);</code>。此时寻找 db.properties 的路径，就是当前 PropertiesTest 加载类的路径 CLASSPATH(kind: output)根/com/fandy/load 目录中。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Properties p = new Properties()<span class=\"comment\">;</span></div><div class=\"line\">// 获得文件的相对路径</div><div class=\"line\">InputStream inStream = PropertiesTest.class.getResourceAsStream(<span class=\"string\">\"db.properties\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">p.load(inStream)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"username\"</span>))<span class=\"comment\">; </span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"password\"</span>))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>","categories":["Java"],"tags":["资源文件"]},{"title":"URL Encode","url":"https://fandyliu.github.io/2017/02/07/iOS/URLEncode/","content":"<p><img src=\"http://img.okbao.com/uploads/150225/247-15022504315KN.jpg\"></p>\n<p><strong>URL 编码</strong>这个名词相信我们并不陌生，简单来说就是将一些<code>字符</code>转化为 <code>“% + ASCII（16进制表示）”</code> 的形式。</p>\n<p>在开发中经常会遇到一些 URL 里面，有一些<code>特殊的字符</code>比如 ‘&amp;’、‘?’ 等等。由于这些字符在 URL 语法中有特殊含义，因此要对其进行 <code>Encode</code>。比如：在 1 个键值对中含有 &amp; ，name=<em><code>fan&amp;dy=aa</code></em> 注意这里是 1 个键值对，只是值中有 &amp; 和 = 所以我们要对 value 进行 URL 编码，转换为 name=<em>fan%26dy%3Daa</em>。</p>\n<p>当然还有一种常见的情况就是在我们开发中对参数进行加密传输的时候，难免会出现一些特殊字符。比如 Base64 加密结果中的 ‘/’、‘=’ 等等。这个时候就要对其进行 URL 编码了。</p>\n<a id=\"more\"></a>\n<p><strong><em>下面对 encode URL 进行总结：</em></strong></p>\n<h2 id=\"在-Objective-C-中\"><a href=\"#在-Objective-C-中\" class=\"headerlink\" title=\"在 Objective-C 中\"></a>在 Objective-C 中</h2><h3 id=\"iOS-9-0-前\"><a href=\"#iOS-9-0-前\" class=\"headerlink\" title=\"iOS 9.0 前\"></a>iOS 9.0 前</h3><ul>\n<li><strong><em>CFURLCreateStringByAddingPercentEscapes</em></strong></li>\n</ul>\n<p>我们经常对 URL 采用 <a href=\"https://developer.apple.com/reference/corefoundation/1542665-cfurlcreatestringbyaddingpercent?language=objc\" target=\"_blank\" rel=\"external\">CFURLCreateStringByAddingPercentEscapes</a> 函数进行 <code>encode</code> 处理。</p>\n<p>这里是在 AFN 中对其的静态函数的封装：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> * AFPercentEscapedQueryStringPairMemberFromStringWithEncoding(<span class=\"built_in\">NSString</span> *string, <span class=\"built_in\">NSStringEncoding</span> encoding) &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> kAFCharactersToBeEscaped = <span class=\"string\">@\":/?&amp;=;+!@#$()~',*\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> kAFCharactersToLeaveUnescaped = <span class=\"string\">@\"[].\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">NSString</span> *)<span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                 (__bridge <span class=\"built_in\">CFStringRef</span>)string,</div><div class=\"line\">                                                                                 (__bridge <span class=\"built_in\">CFStringRef</span>)kAFCharactersToLeaveUnescaped,</div><div class=\"line\">                                                                                 (__bridge <span class=\"built_in\">CFStringRef</span>)kAFCharactersToBeEscaped,</div><div class=\"line\">                                                                                 <span class=\"built_in\">CFStringConvertNSStringEncodingToEncoding</span>(encoding)));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>CFURLCreateStringByReplacingPercentEscapes</em></strong></li>\n</ul>\n<p>我们也可以用 <a href=\"https://developer.apple.com/reference/corefoundation/1542938-cfurlcreatestringbyreplacingperc\" target=\"_blank\" rel=\"external\">CFURLCreateStringByReplacingPercentEscapes</a> 或  <a href=\"https://developer.apple.com/reference/corefoundation/1541974-cfurlcreatestringbyreplacingperc?language=objc\" target=\"_blank\" rel=\"external\">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</a> 函数对 URL 进行 <code>decode</code> 处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CFStringRef</span> originalURLString = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"fan%25dy=aa\"</span>);</div><div class=\"line\"><span class=\"built_in\">NSString</span> *preprocessedString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                                         originalURLString,</div><div class=\"line\">                                                                                                         <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"\"</span>),</div><div class=\"line\">                                                                                                         kCFStringEncodingUTF8));</div></pre></td></tr></table></figure>\n<p>这个是对上面函数第三个参数的描述：</p>\n<blockquote>\n<p> Pass NULL to specify that no percent escapes be replaced, or the empty string (CFSTR(“”)) to specify that all be replaced.</p>\n</blockquote>\n<p>这两个方法通常会在什么情况下<code>使用</code>呢？要对一个<code>一半已经进行了 URL encode</code> 而有部分却没有。因此直接进行 encode 的话会将 ‘%’ 转换为 ‘%25’ 导致错误，所以要<code>先进行 decode 再进行 encode</code>。如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CFStringRef</span> originalURLString = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"fan%25dy=aa\"</span>);</div><div class=\"line\"><span class=\"comment\">// 先 decode 预处理</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *preprocessedString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                                         originalURLString,</div><div class=\"line\">                                                                                                         <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"\"</span>),</div><div class=\"line\">                                                                                                         kCFStringEncodingUTF8));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 再 encode 处理</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *preprocessedUrlString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                            (__bridge <span class=\"built_in\">CFStringRef</span>)preprocessedString,</div><div class=\"line\">                                                                                            <span class=\"literal\">NULL</span>,</div><div class=\"line\">                                                                                            <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"?!@#$^&amp;%*+,:;='\\\"`&lt;&gt;()[]&#123;&#125;/\\\\| \"</span>),</div><div class=\"line\">                                                                                            kCFStringEncodingUTF8));</div><div class=\"line\"><span class=\"comment\">// 直接encode</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *urlString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                originalURLString,</div><div class=\"line\">                                                                                <span class=\"literal\">NULL</span>,</div><div class=\"line\">                                                                                <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"?!@#$^&amp;%*+,:;='\\\"`&lt;&gt;()[]&#123;&#125;/\\\\| \"</span>),</div><div class=\"line\">                                                                                kCFStringEncodingUTF8));</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"preprocessedString = %@\"</span>, preprocessedString); <span class=\"comment\">//  预处理 decode 结果=&gt; fan%dy=aa</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"preprocessedUrlString = %@\"</span>, preprocessedUrlString); <span class=\"comment\">// 先 decode 再 encode 结果 =&gt; fan%25dy%3Daa</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"urlString = %@\"</span>, urlString); <span class=\"comment\">// 直接 encode 结果 =&gt; fan%2525dy%3Daa</span></div></pre></td></tr></table></figure>\n<h3 id=\"iOS-9-0-后\"><a href=\"#iOS-9-0-后\" class=\"headerlink\" title=\"iOS 9.0 后\"></a>iOS 9.0 后</h3><p><strong><code>上面的方法大多数在 iOS 9 的时候被废弃了，OC 提供了一些新的方法来替代。</code></strong></p>\n<ul>\n<li><strong><em>stringByAddingPercentEncodingWithAllowedCharacters</em></strong></li>\n</ul>\n<p><em>使用系统提供的 CharacterSet 来 encode URL</em></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *originalString = <span class=\"string\">@\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSCharacterSet</span> *customAllowedSet = [<span class=\"built_in\">NSCharacterSet</span> URLQueryAllowedCharacterSet];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *encodedUrl = [originalString stringByAddingPercentEncodingWithAllowedCharacters:customAllowedSet];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"encodedUrl = %@\"</span>, encodedUrl);</div></pre></td></tr></table></figure>\n<p><em>使用自定义的 CharacterSet 来 encode URL</em></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *originalString = <span class=\"string\">@\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSCharacterSet</span> *customAllowedSet = [[<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\" \\\"#%&lt;&gt;[\\\\]^`&#123;|&#125;\"</span>] invertedSet];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *encodedUrl = [originalString stringByAddingPercentEncodingWithAllowedCharacters:customAllowedSet];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"encodedUrl = %@\"</span>, encodedUrl);</div></pre></td></tr></table></figure>\n<h2 id=\"在-Swift-中\"><a href=\"#在-Swift-中\" class=\"headerlink\" title=\"在 Swift 中\"></a>在 Swift 中</h2><p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1496601674738&di=834a14e6470507ca7d96bbb8eb4c0d67&imgtype=0&src=http%3A%2F%2Fi.dimg.cc%2F8c%2F8b%2F2b%2F97%2F24%2Ff6%2F0c%2F2a%2F4b%2F15%2Fe5%2Fdc%2F0a%2Fde%2F3a%2Fb9.jpg\" width=\"100%\"></p>\n<p>当然这么<code>老掉牙</code>的东西现在总结，主要还是整理一下她在 <code>Swift</code> 中的使用：</p>\n<ul>\n<li><strong><em>使用系统提供的 CharacterSet 来 encode URL</em></strong></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> originalString = <span class=\"string\">\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> escapedString = originalString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)</div><div class=\"line\"><span class=\"built_in\">print</span>(escapedString ?? <span class=\"string\">\"error\"</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>使用自定义的 CharacterSet 来 encode URL</em></strong></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> originalString = <span class=\"string\">\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> customAllowedSet = <span class=\"type\">CharacterSet</span>(charactersIn: <span class=\"string\">\" \\\"#%&lt;&gt;[\\\\]^`&#123;|&#125;\"</span>).inverted</div><div class=\"line\"><span class=\"keyword\">let</span> escapedString = originalString.addingPercentEncoding(withAllowedCharacters: customAllowedSet)</div><div class=\"line\"><span class=\"built_in\">print</span>(escapedString ?? <span class=\"string\">\"error\"</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>系统中提供 CharacterSet 的诸多值</em></strong></li>\n</ul>\n<p><strong>注意：</strong>最外层 ‘’ 是为了区分内容，不是 Characters，且在 ‘’ 中注意有个<code>空格字符</code>，</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">      CharacterSet                    Inverted Characters</div><div class=\"line\">CharacterSet<span class=\"selector-class\">.urlQueryAllowed</span>          <span class=\"string\">' \"#%&lt;&gt;[\\]^`&#123;|&#125;'</span> </div><div class=\"line\">CharacterSet<span class=\"selector-class\">.urlHostAllowed</span>           <span class=\"string\">' \"#%/&lt;&gt;?@\\^`&#123;|&#125;'</span></div><div class=\"line\">CharacterSet<span class=\"selector-class\">.urlPathAllowed</span>           <span class=\"string\">' \"#%;&lt;&gt;?[\\]^`&#123;|&#125;'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Print-CharacterSet-的字符\"><a href=\"#Print-CharacterSet-的字符\" class=\"headerlink\" title=\"Print CharacterSet 的字符\"></a>Print CharacterSet 的字符</h3><p>我们可以通过这个方法来<code>打印</code>系统中 CharacterSet 的 <code>characters</code>。（注意有些是带<code>空格</code>的）</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printCharacters</span><span class=\"params\">(<span class=\"keyword\">in</span> <span class=\"keyword\">set</span>: CharacterSet)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> characters = <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">let</span> iSet = <span class=\"keyword\">set</span>.inverted</div><div class=\"line\">    <span class=\"keyword\">for</span> i: <span class=\"type\">UInt32</span> <span class=\"keyword\">in</span> <span class=\"number\">32</span>..&lt;<span class=\"number\">127</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> <span class=\"built_in\">c</span> = <span class=\"type\">UnicodeScalar</span>(i)!</div><div class=\"line\">        <span class=\"keyword\">if</span> iSet.<span class=\"built_in\">contains</span>(<span class=\"built_in\">c</span>) &#123;</div><div class=\"line\">            characters += <span class=\"type\">String</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"'<span class=\"subst\">\\(characters)</span>'\"</span>) <span class=\"comment\">// 打印的时候加上了''</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["URL","Encode"]},{"title":"Sequence 函数","url":"https://fandyliu.github.io/2016/10/01/iOS/Sequence函数/","content":"<p>有些在 swift 1.0 为函数到 swift 2.0 变为一个对象的方法，Swift 3.0 并没有什么大变化,现在对 Sequence 函数这些方法做个总结.</p>\n<a id=\"more\"></a>\n<h2 id=\"Sequence-contains\"><a href=\"#Sequence-contains\" class=\"headerlink\" title=\"Sequence.contains()\"></a>Sequence.contains()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 简单的实用</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">\"Swift\"</span>, <span class=\"string\">\"Objective-C\"</span>]</div><div class=\"line\"><span class=\"comment\">// ture</span></div><div class=\"line\">b.<span class=\"built_in\">contains</span>(<span class=\"string\">\"Swift\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. Swift 闭包和语法的灵活性</span></div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果数组中，有 3 的倍数，就返回 true</span></div><div class=\"line\">numbers.<span class=\"built_in\">contains</span> &#123; (element) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">if</span> element % <span class=\"number\">3</span> == <span class=\"number\">0</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 比如我们在维护一个图书列表，我们想知道这个列表中有没有图书有更新章节，可以用一个简单的模型来表示图书：</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> title: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> hasUpdate: <span class=\"type\">Bool</span> = <span class=\"literal\">false</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(title:<span class=\"type\">String</span>, hasUpdate:<span class=\"type\">Bool</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.title = title</div><div class=\"line\">        <span class=\"keyword\">self</span>.hasUpdate = hasUpdate</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 然后，我们就可以用 predicate 的方式来直接进行判断了，不在需要 for 循环了：</span></div><div class=\"line\"><span class=\"keyword\">var</span> bookList:[<span class=\"type\">Book</span>] = [<span class=\"type\">Book</span>]()</div><div class=\"line\">bookList.append(<span class=\"type\">Book</span>(title:<span class=\"string\">\"Objective-C\"</span>, hasUpdate:<span class=\"literal\">false</span>))</div><div class=\"line\">bookList.append(<span class=\"type\">Book</span>(title:<span class=\"string\">\"Cocoa\"</span>, hasUpdate:<span class=\"literal\">false</span>))</div><div class=\"line\">bookList.append(<span class=\"type\">Book</span>(title:<span class=\"string\">\"Swift\"</span>, hasUpdate:<span class=\"literal\">true</span>))</div><div class=\"line\"></div><div class=\"line\">bookList.<span class=\"built_in\">contains</span> &#123; (book: <span class=\"type\">Book</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> book.hasUpdate</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-enumerated\"><a href=\"#Sequence-enumerated\" class=\"headerlink\" title=\"Sequence.enumerated()\"></a>Sequence.enumerated()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> abc = [<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> (n, <span class=\"built_in\">c</span>) <span class=\"keyword\">in</span> abc.enumerated() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(n)</span>: '<span class=\"subst\">\\(<span class=\"built_in\">c</span>)</span>'\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0: '5'</span></div><div class=\"line\"><span class=\"comment\">// 1: '7'</span></div><div class=\"line\"><span class=\"comment\">// 2: '9'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (n, <span class=\"built_in\">c</span>) <span class=\"keyword\">in</span> <span class=\"string\">\"Swift\"</span>.characters.enumerated() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(n)</span>: '<span class=\"subst\">\\(<span class=\"built_in\">c</span>)</span>'\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"0: 'S'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"1: 'w'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"2: 'i'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"3: 'f'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"4: 't'\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"Marie Curie\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstSpace = name.characters.index(of: <span class=\"string\">\" \"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> firstName = <span class=\"type\">String</span>(name.characters.<span class=\"keyword\">prefix</span>(upTo: firstSpace))</div><div class=\"line\">    <span class=\"built_in\">print</span>(firstName)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-sort\"><a href=\"#Sequence-sort\" class=\"headerlink\" title=\"Sequence.sort()\"></a>Sequence.sort()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> students: <span class=\"type\">Set</span> = [<span class=\"string\">\"Kofi\"</span>, <span class=\"string\">\"Abena\"</span>, <span class=\"string\">\"Peter\"</span>, <span class=\"string\">\"Kweku\"</span>, <span class=\"string\">\"Akosua\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> sortedStudents = students.sorted()</div><div class=\"line\"><span class=\"built_in\">print</span>(sortedStudents)</div><div class=\"line\"><span class=\"comment\">// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> descendingStudents = students.sorted(by: &gt;)</div><div class=\"line\"><span class=\"built_in\">print</span>(descendingStudents)</div><div class=\"line\"><span class=\"comment\">// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"</span></div></pre></td></tr></table></figure>\n<p>例子</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">HTTPResponse</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> ok</div><div class=\"line\">    <span class=\"keyword\">case</span> error(<span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> responses: [<span class=\"type\">HTTPResponse</span>] = [.error(<span class=\"number\">500</span>), .ok, .ok, .error(<span class=\"number\">404</span>), .error(<span class=\"number\">403</span>)]</div><div class=\"line\"><span class=\"keyword\">let</span> sortedResponses = responses.sorted &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> ($<span class=\"number\">0</span>, $<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// Order errors by code</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (.error(aCode), .error(bCode)):</div><div class=\"line\">        <span class=\"keyword\">return</span> aCode &lt; bCode</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// All successes are equivalent, so none is before any other</span></div><div class=\"line\">    <span class=\"keyword\">case</span> (.ok, .ok): <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Order errors before successes</span></div><div class=\"line\">    <span class=\"keyword\">case</span> (.error, .ok): <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">case</span> (.ok, .error): <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sortedResponses)</div><div class=\"line\"><span class=\"comment\">// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-dropFirst-Sequence-dropLast\"><a href=\"#Sequence-dropFirst-Sequence-dropLast\" class=\"headerlink\" title=\"Sequence.dropFirst() Sequence.dropLast()\"></a>Sequence.dropFirst() Sequence.dropLast()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. Sequence.dropFirst()</span></div><div class=\"line\"><span class=\"keyword\">var</span> languages = [<span class=\"string\">\"Swift\"</span>, <span class=\"string\">\"Objective-C\"</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> oldLanguages = languages.<span class=\"built_in\">dropFirst</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. Sequence.dropLast()</span></div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"built_in\">print</span>(numbers.<span class=\"built_in\">dropLast</span>(<span class=\"number\">2</span>))</div><div class=\"line\"><span class=\"comment\">// Prints \"[1, 2, 3]\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(numbers.<span class=\"built_in\">dropLast</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// Prints \"[]\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-filter\"><a href=\"#Sequence-filter\" class=\"headerlink\" title=\"Sequence.filter\"></a>Sequence.filter</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> cast = [<span class=\"string\">\"Vivien\"</span>, <span class=\"string\">\"Marlon\"</span>, <span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Karl\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> shortNames = cast.<span class=\"built_in\">filter</span> &#123; $<span class=\"number\">0</span>.characters.<span class=\"built_in\">count</span> &lt; <span class=\"number\">5</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(shortNames)</div><div class=\"line\"><span class=\"comment\">// Prints \"[\"Kim\", \"Karl\"]\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> abc = arr.<span class=\"built_in\">filter</span> &#123; $<span class=\"number\">0</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(abc)</div><div class=\"line\"><span class=\"comment\">// Prints [0, 2, 4, 6, 8, 10]</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-index-Sequence-indices\"><a href=\"#Sequence-index-Sequence-indices\" class=\"headerlink\" title=\"Sequence.index() Sequence.indices\"></a>Sequence.index() Sequence.indices</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> students = [<span class=\"string\">\"Kofi\"</span>, <span class=\"string\">\"Abena\"</span>, <span class=\"string\">\"Peter\"</span>, <span class=\"string\">\"Kweku\"</span>, <span class=\"string\">\"Akosua\"</span>]</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> i = students.index(<span class=\"keyword\">where</span>: &#123; $<span class=\"number\">0</span>.hasPrefix(<span class=\"string\">\"A\"</span>) &#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(students[i])</span> starts with 'A'!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"Abena starts with 'A'!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">c</span> = <span class=\"type\">Array</span>([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>])</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"built_in\">c</span>.startIndex</div><div class=\"line\"><span class=\"keyword\">while</span> i != <span class=\"built_in\">c</span>.endIndex &#123;</div><div class=\"line\">    <span class=\"built_in\">c</span>[i] /= <span class=\"number\">5</span></div><div class=\"line\">    i = <span class=\"built_in\">c</span>.index(after: i)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"comment\">// Prints [2, 4, 6, 8, 10]</span></div><div class=\"line\"><span class=\"comment\">// 肯定用 map 更简单 这里只是掩饰 index</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-joined\"><a href=\"#Sequence-joined\" class=\"headerlink\" title=\"Sequence.joined()\"></a>Sequence.joined()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cast = [<span class=\"string\">\"Vivien\"</span>, <span class=\"string\">\"Marlon\"</span>, <span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Karl\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> list = cast.joined(separator: <span class=\"string\">\", \"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(list)</div><div class=\"line\"><span class=\"comment\">// Prints \"Vivien, Marlon, Kim, Karl\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-map\"><a href=\"#Sequence-map\" class=\"headerlink\" title=\"Sequence.map\"></a>Sequence.map</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cast = [<span class=\"string\">\"Vivien\"</span>, <span class=\"string\">\"Marlon\"</span>, <span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Karl\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> lowercaseNames = cast.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.lowercaseString &#125;</div><div class=\"line\"><span class=\"comment\">// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]</span></div><div class=\"line\"><span class=\"keyword\">let</span> letterCounts = cast.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.characters.<span class=\"built_in\">count</span> &#125;</div><div class=\"line\"><span class=\"comment\">// 'letterCounts' == [6, 6, 3, 4]</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-reduce\"><a href=\"#Sequence-reduce\" class=\"headerlink\" title=\"Sequence.reduce\"></a>Sequence.reduce</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">\"Sofia\"</span>, <span class=\"string\">\"Camilla\"</span>, <span class=\"string\">\"Martina\"</span>, <span class=\"string\">\"Mateo\"</span>, <span class=\"string\">\"Nicolás\"</span>].<span class=\"built_in\">reduce</span>(<span class=\"string\">\"\"</span>) &#123; $<span class=\"number\">0</span> + $<span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(a)</div><div class=\"line\"><span class=\"comment\">// \"\" + \"Sofia\" + \"Camilla\" + \"Martina\" + \"Mateo\" + \"Nicolás\"</span></div><div class=\"line\"><span class=\"comment\">// SofiaCamillaMartinaMateoNicolás</span></div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> addTwo: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> = &#123; x, y <span class=\"keyword\">in</span> x + y &#125;</div><div class=\"line\"><span class=\"keyword\">let</span> numberSum = numbers.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, addTwo)</div><div class=\"line\"><span class=\"built_in\">print</span>(numberSum) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-reversed\"><a href=\"#Sequence-reversed\" class=\"headerlink\" title=\"Sequence.reversed\"></a>Sequence.reversed</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers.reversed() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(number)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"7\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"5\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"3\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> reversedNumbers = <span class=\"type\">Array</span>(numbers.reversed())</div><div class=\"line\"><span class=\"built_in\">print</span>(reversedNumbers)</div><div class=\"line\"><span class=\"comment\">// Prints \"[7, 5, 3]\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-starts-with\"><a href=\"#Sequence-starts-with\" class=\"headerlink\" title=\"Sequence.starts(with:)\"></a>Sequence.starts(with:)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>...<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>...<span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">print</span>(b.starts(with: a))</div><div class=\"line\"><span class=\"comment\">// Prints \"true\"</span></div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["Swift","Sequence"]},{"title":"Xcode 8 屏蔽杂乱打印问题","url":"https://fandyliu.github.io/2016/09/24/iOS/Xcode8屏蔽杂乱打印问题/","content":"<p>Xcode 8 总是打印一堆奇怪的东西。虽然不影响开发，但是看着很不爽。 现在对解决办法坐下记录。<br><a id=\"more\"></a></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>Xcode8里边 <code>Edit Scheme-&gt; Run -&gt; Arguments</code> ， 在 <code>Environment Variables</code> 里边添加 <code>OS_ACTIVITY_MODE ＝ Disable</code>。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/iOS/Xcode8%E5%B1%8F%E8%94%BD%E6%9D%82%E4%B9%B1%E6%89%93%E5%8D%B0%E9%97%AE%E9%A2%98/Print.jpg\" alt=\"\"></p>\n<h2 id=\"配置后问题\"><a href=\"#配置后问题\" class=\"headerlink\" title=\"配置后问题\"></a>配置后问题</h2><p>配置之后，当像一些麦克风或者摄像头的访问权限忘记在 <code>info.plist</code> 中配置的时候，Xcode 并<code>不会打印类似于下面的提示信息</code></p>\n<p><code>This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app&#39;s Info.plist must contain an NSSpeechRecognitionUsageDescription key with a string value explaining to the user how the app uses this data.</code></p>\n<p>这样的提示配置信息，而是直接 <code>Crash</code> 找不到原因。类似于下面的 Crash。这时候你要检测看看到底哪个访问<code>权限忘记配置</code>。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/Crash.jpg\" alt=\"打印\"></p>\n<p>遇到这些问题可以去 <a href=\"/2016/09/20/iOS/iOS10访问权限问题/index.html\">iOS10权限崩溃问题</a> 中查看如何配置。</p>\n","categories":["iOS"],"tags":["Xcode","Bug"]},{"title":"iOS 10 访问权限问题","url":"https://fandyliu.github.io/2016/09/20/iOS/iOS10访问权限问题/","content":"<p>iOS 10 上，若你的项目访问了<code>隐私数据</code>，比如：相机，相册，通讯录等，都需要提前请求应用权限、允许后才可以使用，否则 app 会直接 Crash 了。</p>\n<p>还有 Xcode 8 上传到 iTunesConnect 上的<code>安装包</code>提示<code>无效二进制文件</code>或者直接<code>看不到</code>。这是因为 iOS10 对用户的隐私做了进一步加强，在申请很多私有权限的时候都需要添加描述，这里我简单的记录了下解决方法。</p>\n<a id=\"more\"></a>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h3><p>在项目中找到<code>info.plist</code>文件。<br>点击<code>Information Property List</code> 后边的加号，新添加一项。<br>在新添加的<code>key</code>中输入 <code>Privacy</code> 可以迅速定位到这一权限系列，找到你需要的权限，修改后面的 value 就可以了（value内容可随意）。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSBluetoothPeripheralUsageDescription</span>          访问蓝牙</div><div class=\"line\"><span class=\"built_in\">NSCalendarsUsageDescription</span>                    访问日历</div><div class=\"line\"><span class=\"built_in\">NSCameraUsageDescription</span>                       相机</div><div class=\"line\"><span class=\"built_in\">NSPhotoLibraryUsageDescription</span>                 相册</div><div class=\"line\"><span class=\"built_in\">NSContactsUsageDescription</span>                     通讯录</div><div class=\"line\"><span class=\"built_in\">NSLocationAlwaysUsageDescription</span>               始终访问位置</div><div class=\"line\"><span class=\"built_in\">NSLocationUsageDescription</span>                     位置</div><div class=\"line\"><span class=\"built_in\">NSLocationWhenInUseUsageDescription</span>            在使用期间访问位置</div><div class=\"line\"><span class=\"built_in\">NSMicrophoneUsageDescription</span>                   麦克风</div><div class=\"line\"><span class=\"built_in\">NSAppleMusicUsageDescription</span>                   访问媒体资料库</div><div class=\"line\"><span class=\"built_in\">NSHealthShareUsageDescription</span>                  访问健康分享</div><div class=\"line\"><span class=\"built_in\">NSHealthUpdateUsageDescription</span>                 访问健康更新</div><div class=\"line\"><span class=\"built_in\">NSMotionUsageDescription</span>                       访问运动与健身</div><div class=\"line\"><span class=\"built_in\">NSRemindersUsageDescription</span>                    访问提醒事项</div></pre></td></tr></table></figure>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二:\"></a>方式二:</h3><p>在项目中找到<code>info.plist</code>文件。<br>对其右击选<code>Open As —&gt; Source Code</code>，以<code>Source Code</code>形式打开。<br>添加相应的键值对即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSVideoSubscriberAccountUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>视频认证<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSSpeechRecognitionUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>语音识别<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSSiriUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Siri使用<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSRemindersUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>访问提醒事项<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kTCCServiceMediaLibrary<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>TV控制<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSMotionUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>运动权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSMicrophoneUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>麦克风权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAppleMusicUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>苹果音乐<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSLocationUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>位置权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSHomeKitUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HomeKit权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSHealthUpdateUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>健康应用<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSHealthShareUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>健康应用<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSContactsUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>通讯录<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSCalendarsUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>日历<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSBluetoothPeripheralUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>蓝牙<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>相册<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSCameraUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>相机<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>永久使用定位<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>应用使用的时候使用定位<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["Xcode","Bug","权限"]},{"title":"RubyGems 镜像","url":"https://fandyliu.github.io/2016/07/25/iOS/RubyGems镜像/","content":"<p>由于国内不能访问官方的 Ruby 源，所以有些大牛搭建了 ruby.taobao.org 为国内开发者解决 Gem 安装的问题，但是由于各种原因使 ruby.taobao.org 很难同步了、和维护。最终他们考虑由 <a href=\"https://ruby-china.org\" target=\"_blank\" rel=\"external\">Ruby China</a> 来负责这个事情，这样可以像现在 Ruby China 社区，RubyConf China 一样，由社区的很多参与者来共同维护。</p>\n<a id=\"more\"></a>\n<h2 id=\"更换数据源\"><a href=\"#更换数据源\" class=\"headerlink\" title=\"更换数据源\"></a>更换数据源</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem sources --<span class=\"built_in\">add</span> http<span class=\"variable\">s:</span>//gems.<span class=\"keyword\">ruby</span>-china.org/ --<span class=\"built_in\">remove</span> http<span class=\"variable\">s:</span>//rubygems.org/</div><div class=\"line\">$ gem sources -<span class=\"keyword\">l</span></div><div class=\"line\">http<span class=\"variable\">s:</span>//gems.<span class=\"keyword\">ruby</span>-china.org</div><div class=\"line\"># 确保只有 gems.<span class=\"keyword\">ruby</span>-china.org</div></pre></td></tr></table></figure>\n<h2 id=\"RVM-安装脚本的方式安装-Ruby\"><a href=\"#RVM-安装脚本的方式安装-Ruby\" class=\"headerlink\" title=\"RVM 安装脚本的方式安装 Ruby\"></a>RVM 安装脚本的方式安装 Ruby</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Install RVM\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"---------------------------------------------------------------------------\"</span></div><div class=\"line\"><span class=\"built_in\">command</span> gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</div><div class=\"line\"><span class=\"built_in\">command</span> curl -L https://get.rvm.io | bash <span class=\"_\">-s</span> stable</div><div class=\"line\"><span class=\"keyword\">if</span> [ whoami = <span class=\"string\">'root'</span>]; <span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">command</span> <span class=\"built_in\">source</span> /etc/profile.d/rvm.sh</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\"><span class=\"built_in\">command</span> <span class=\"built_in\">source</span> ~/.rvm/scripts/rvm</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ MIRROR = <span class=\"string\">'1'</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ruby_url=https://cache.ruby-china.org/pub/ruby\"</span> &gt; ~/.rvm/user/db</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">rvm requirements</div><div class=\"line\">rvm install 2.3.1 --disable-binary</div><div class=\"line\">rvm use 2.3.1 --default</div><div class=\"line\">rvm -v</div><div class=\"line\">ruby -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ MIRROR = <span class=\"string\">'1'</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">gem install bundler</div><div class=\"line\">bundle -v</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"--------------------------- Install Successed -----------------------------\"</span></div></pre></td></tr></table></figure>\n<p>地址链接：  </p>\n<p><a href=\"https://github.com/ruby-china/rubygems-mirror\" target=\"_blank\" rel=\"external\">RubyGems 镜像源</a></p>\n<p><a href=\"https://gems.ruby-china.org\" target=\"_blank\" rel=\"external\">使用方法</a></p>\n","categories":["iOS"],"tags":["Ruby"]},{"title":"Java 与 Eclipse","url":"https://fandyliu.github.io/2015/06/04/Java/Java与Eclipse/","content":"<h2 id=\"jar-包\"><a href=\"#jar-包\" class=\"headerlink\" title=\"jar 包\"></a>jar 包</h2><ul>\n<li>rar: 压缩文件</li>\n<li>jar: Java的压缩文件，其本质就是一堆字节码文件的压缩包</li>\n<li>war: Web项目的压缩包</li>\n</ul>\n<p>导出jar包：<br>选中要导出的文件，鼠标右键 Export -&gt; Java/JAR file -&gt; next</p>\n<p>怎么使用jar:<br>在Java项目中新建lib目录,把jar拷贝到该目录,选择jar–&gt;鼠标右键 Add build path。</p>\n<h2 id=\"classpath文件分析\"><a href=\"#classpath文件分析\" class=\"headerlink\" title=\"classpath文件分析\"></a>classpath文件分析</h2><p>环境变量:<br>PATH = JDK根/bin: 告诉计算机去哪里去找javac，java等工具。</p>\n<p>CLASSPATH =.:告诉JVM去哪里去找字节码.   —&gt;java   App</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">classpath</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classpathentry</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"src\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classpathentry</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"con\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classpathentry</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"output\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"bin\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">classpath</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>其中classpathentry 有好几种类型（kind）</li>\n<li>src： 源文件的路径</li>\n<li>con: 项目运行环境的路径</li>\n<li>lib: 三方jar包存放的路径</li>\n<li>output: 源文件编译后生成的字节码文件的输出目录</li>\n</ul>\n","categories":["Java"],"tags":["Eclipse"]},{"title":"UIWebView 禁止长按链接弹出选择栏","url":"https://fandyliu.github.io/2015/02/09/iOS/UIWebView禁止长按链接弹出选择栏/","content":"<p>当 webview 显示 html 页面的时候，其本身会提供一些原生的交互行为：长按获取文本，或者链接。如何禁用这个效果呢。现在总结几种方案:<br><a id=\"more\"></a></p>\n<h2 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h2><p>通过Webkit内核提供的一些特殊的CSS属性 ，我们可以很方便的禁用掉这些默认的行为。首先我们介绍两个特殊的CSS属性。</p>\n<p><a href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_touch_callout\" target=\"_blank\" rel=\"external\">-webkit-touch-callout</a></p>\n<blockquote>\n<p>-webkit-touch-callout(IOS2.0及以后可用)<br>Disables the default callout shown when you touch and hold a touch target.</p>\n<p>Syntax<br>-webkit-touch-callout: behavior;</p>\n</blockquote>\n<p>长按诸如链接的目标对象时，是否允许呼出默认的popOver，当前选择值包括:</p>\n<ul>\n<li>none:不呼出弹窗框</li>\n<li>inherit:可以呼出弹窗框</li>\n</ul>\n<p>在IOS中，当你touch和hold一个触控对象时，例如链接，Safari会显示一个包含链接信息的弹出框。该属性允许你来禁用这个弹出框。</p>\n<p><a href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_user_select\" target=\"_blank\" rel=\"external\">-webkit-user-select</a></p>\n<blockquote>\n<p>-webkit-user-select(IOS3.0及以后可用)<br>Determines whether a user can select the content of an element.</p>\n<p>Syntax<br>-webkit-user-select: policy;</p>\n</blockquote>\n<p>是否允许用户选择元素的内容，选择值包括：</p>\n<ul>\n<li>auto:用户可以选择元素内的内容</li>\n<li>none:用户不能选择任何内容</li>\n<li>text:用户只能选择元素内的文本</li>\n</ul>\n<h3 id=\"禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则\"><a href=\"#禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则\" class=\"headerlink\" title=\"禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则\"></a>禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">body.disable-default-action</div><div class=\"line\">&#123;</div><div class=\"line\">    -webkit-touch-callout:none ;</div><div class=\"line\">    -webkit-user-select:none ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同时在body标签中加入该类型,如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body class = &quot;disable-default-action&quot;&gt;</div><div class=\"line\">    page content….</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"只允许-Form-表单域执行文本的剪切板操作，添加如下规则\"><a href=\"#只允许-Form-表单域执行文本的剪切板操作，添加如下规则\" class=\"headerlink\" title=\"只允许 Form 表单域执行文本的剪切板操作，添加如下规则\"></a>只允许 Form 表单域执行文本的剪切板操作，添加如下规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  *:not(input,textarea) &#123;</div><div class=\"line\">    -webkit-touch-callout: none;</div><div class=\"line\">    -webkit-user-select: none; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"禁用某个链接的长按弹出框-可在链接添加内联样式规则如下\"><a href=\"#禁用某个链接的长按弹出框-可在链接添加内联样式规则如下\" class=\"headerlink\" title=\"禁用某个链接的长按弹出框,可在链接添加内联样式规则如下\"></a>禁用某个链接的长按弹出框,可在链接添加内联样式规则如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=&quot;http://www.baidu.com&quot; style = &quot;-webkit-touch-callout:none&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h2><p>以编程方式动态的向加载页面添加样式来达到同样的效果(iOS 8 以前可以用 以后貌似不可以)</p>\n<p>实现UIWebviewDelegate协议，在webViewDidFinishLoad:方法中添加以下代码 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)webViewDidFinishLoad:(<span class=\"built_in\">UIWebView</span> *)webView &#123;</div><div class=\"line\">    <span class=\"comment\">// 禁用用户选择</span></div><div class=\"line\">    [webView stringByEvaluatingJavaScriptFromString:<span class=\"string\">@\"document.documentElement.style.webkitUserSelect='none';\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 禁用长按弹出框</span></div><div class=\"line\">    [webView stringByEvaluatingJavaScriptFromString:<span class=\"string\">@\"document.documentElement.style.webkitTouchCallout='none';\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>html５ 貌似可以这样子加(没有测试过)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.body.style.webkitTouchCallout=<span class=\"string\">'none'</span></div></pre></td></tr></table></figure>\n<h2 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h2><p>更安全的方式是，写html的时候加上以下代码，这样不管谁调用你的网页，长按链接都不会呼出弹窗框<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">        window.onload=function()&#123;</div><div class=\"line\">            document.documentElement.style.webkitTouchCallout=&apos;none&apos;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>这样子不管谁调用都没有这个手势了</p>\n<h2 id=\"方式四\"><a href=\"#方式四\" class=\"headerlink\" title=\"方式四\"></a>方式四</h2><p>用个chang<br>在viewdidload或适当的地方创建一个自定义的长按手势</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UILongPressGestureRecognizer</span> *longPress = [[<span class=\"built_in\">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"comment\">// 记得在.h文件里加上委托</span></div><div class=\"line\">longPress.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"><span class=\"comment\">// 这里为什么要设置0.4，因为只要大于0.5就无效，我像大概是因为默认的跳出放大镜的手势的长按时间是0.5秒，</span></div><div class=\"line\"><span class=\"comment\">// 如果我们自定义的手势大于或小于0.5秒的话就来不及替换他的默认手势了，这是只是我的猜测。但是最好大于0.2秒，因为有的pdf有一些书签跳转功能，这个值太小的话可能会使这些功能失效。</span></div><div class=\"line\">longPress.minimumPressDuration = <span class=\"number\">0.4</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span>.webView addGestureRecognizer:longPress];</div></pre></td></tr></table></figure>\n<p>接下来就是实现一个委托了</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#pragma mark - GestureRecognizerDelegate</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)gestureRecognizer:(<span class=\"built_in\">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class=\"built_in\">UIGestureRecognizer</span> *)otherGestureRecognizer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cocoachina.com/bbs/read.php?tid=102913\" target=\"_blank\" rel=\"external\">其他参考连接</a></p>\n","categories":["iOS"],"tags":["UIWebView","手势","交互"]},{"title":"单例设计模式","url":"https://fandyliu.github.io/2014/06/04/Java/单例设计模式/","content":"<p><strong>单例设计模式(singleton):</strong> 在应用 <code>Application</code> (项目/软件)中，某个类有且只有一个实例。</p>\n<p>我们通常会把一些<code>工具类</code>做成单例的。</p>\n<p><strong>单例的写法:</strong></p>\n<ol>\n<li>饿汉式</li>\n<li>懒汉式</li>\n<li>枚举</li>\n<li>使用缓存机制来实现单例效果</li>\n<li>在 Spring 中(对象工厂),创建的对象默认就是单例</li>\n<li>等…</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a><strong>饿汉式</strong></h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span> MySingleton() &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span><span class=\"keyword\"> static</span> MySingleton<span class=\"built_in\"> instance </span>=<span class=\"built_in\"> new </span>MySingleton();</div><div class=\"line\"><span class=\"keyword\">\tpublic</span><span class=\"keyword\"> static</span> MySingleton shareInstance() &#123;</div><div class=\"line\">\t<span class=\"built_in\">\treturn </span>instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a><strong>懒汉式</strong></h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span> MySingleton() &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span><span class=\"keyword\"> static</span> MySingleton<span class=\"built_in\"> instance </span>= null;</div><div class=\"line\"><span class=\"keyword\">\tpublic</span><span class=\"keyword\"> static</span> MySingleton shareInstance() &#123;</div><div class=\"line\">\t<span class=\"built_in\">\tif </span>(instance == null) &#123;</div><div class=\"line\">\t\t\tsynchronized (MySingleton.class) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">\tif </span>(instance == null) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">\tinstance </span>=<span class=\"built_in\"> new </span>MySingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">\treturn </span>instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a><strong>枚举</strong></h2><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MySingleton</span> &#123;</span></div><div class=\"line\">\tINSTANCE; </div><div class=\"line\">\t<span class=\"keyword\">private</span> MySingleton() &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["单例","设计模式"]},{"title":"Reflection","url":"https://fandyliu.github.io/2014/06/03/Java/Reflection/","content":"<p><strong>反射 (reflection)</strong>：在<code>运行</code>时期，<code>动态</code>地去获取<code>类</code>中的<code>信息</code> （包括：类的信息，方法信息，构造器信息，字段信息等）。</p>\n<p>反射是一个得到元数据的行为。 （<code>元数据 (metadata)</code>： 描述数据的描述数据）</p>\n<p><em>反射功能很强大，但是耗性能。主要在做工具和框架中使用。</em></p>\n<p><strong>主要 API：</strong></p>\n<ul>\n<li><code>Class</code>: 表示所有类或者接口的对象</li>\n<li><code>Constructor</code>: 表示所有构造器的对象</li>\n<li><code>Method</code>: 表示所有的方法的对象</li>\n<li><code>Field</code>: 表示所有字段的对象</li>\n<li><code>Annotation</code>: 表示所有注解的对象</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a><strong>Class</strong></h1><p><strong>Class</strong> 是一切类共同行为和状态的抽象。</p>\n<p><strong>Class 实例</strong>表示正在运行的 Java 应用程序中的类和接口。<em>枚举是一种类，注释是一种接口</em>。</p>\n<p><strong>Class 实例</strong>其实就是指 JVM 中一份<code>字节码</code>。</p>\n<p><strong>Class</strong> <code>没有公共构造方法</code>。Class 实例是在加载类时由 <code>Java 虚拟机</code>以及通过调用<code>类加载器 (ClassLoader)</code> 中的 <code>defineClass</code> 方法自动构造的。 </p>\n<h2 id=\"Class-类有泛型\"><a href=\"#Class-类有泛型\" class=\"headerlink\" title=\"Class 类有泛型\"></a>Class 类有泛型</h2><p>为了<code>明确区分</code>出 Class 实例表示的是<code>谁的字节码</code>。Class 类提供了泛型。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;Student&gt; clz0 = Student.<span class=\"keyword\">class</span>;</div><div class=\"line\"><span class=\"keyword\">Class</span>&lt;<span class=\"keyword\">String</span>&gt; clz1 = <span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"获取-Class-实例\"><a href=\"#获取-Class-实例\" class=\"headerlink\" title=\"获取 Class 实例\"></a>获取 Class 实例</h2><h3 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a><strong><em>对象类型</em></strong></h3><ul>\n<li><strong>类型.class</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;<span class=\"keyword\">String</span>&gt; clz0 = <span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Class.forName(String className)</strong></li>\n</ul>\n<p>根据一个类的<code>全限定名</code>来构建Class对象</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; clz1 = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"java.lang.String\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>obj.getClass()</strong><br>每一个对象都有<code>继承自 Object</code>的 getClass() 方法获取对象的真实类型</li>\n</ul>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> <span class=\"built_in\">str</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>();</div><div class=\"line\">Class&lt;? extends <span class=\"keyword\">String</span>&gt; clz2 = <span class=\"built_in\">str</span>.getClass();</div></pre></td></tr></table></figure>\n<p><strong><em>同一个类在 JVM 中只有一份字节码</em></strong></p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println<span class=\"params\">(<span class=\"attr\">clz0</span> == clz1)</span>;  <span class=\"string\">//</span> <span class=\"literal\">true</span></div><div class=\"line\">System.out.println<span class=\"params\">(<span class=\"attr\">clz2</span> == clz1)</span>;  <span class=\"string\">//</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a><strong><em>基本数据类型</em></strong></h3><ul>\n<li><strong>不能通过 obj.getClass() 获取</strong></li>\n</ul>\n<p>因为基础数据类型没有 getClass 方法，<code>编译报错</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a;</div><div class=\"line\">a.getClass() <span class=\"comment\">// 没有方法， 报错！！！</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>不能通过 Class.forName(String className)</strong></p>\n<p>权限定名写什么呢？只写 int 不行！！抛出异常 <code>java.lang.ClassNotFoundException</code></p>\n</li>\n</ul>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; c =  <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"int\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>可以通过 class 属性获得</strong></li>\n</ul>\n<p>byte，short，int，long，char，float，double，boolean<br><em>上述8种基本数据类型和 void 关键字，都<code>可以</code>通过 class 属性获取 Class 实例。</em></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;<span class=\"keyword\">Integer</span>&gt; clz = <span class=\"built_in\">int</span>.<span class=\"keyword\">class</span>;</div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(clz.getName());  // <span class=\"built_in\">int</span></div></pre></td></tr></table></figure>\n<p><strong><em>一些注意事项</em></strong></p>\n<p>Integer 和 int 获取的类实例不是同一种数据类型</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">int</span>.<span class=\"keyword\">class</span> == Integer.<span class=\"keyword\">class</span>); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>但是在八大基本数据类型的包装类中都有一个常量: <code>TYPE</code><br><code>TYPE</code> 表示的是该包装类对应的<em>基本数据类型的 Class 实例</em>。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"built_in\">int</span>.<span class=\"keyword\">class</span> == <span class=\"keyword\">Integer</span>.<span class=\"keyword\">TYPE</span>); // true</div></pre></td></tr></table></figure>\n<h3 id=\"数组的-class-实例\"><a href=\"#数组的-class-实例\" class=\"headerlink\" title=\"数组的 class 实例\"></a><strong><em>数组的 class 实例</em></strong></h3><p>所有具有<code>相同``元素类型</code>和<code>维数</code>的数组才<code>共享</code>同一份<code>字节码</code>(Class实例)。<br>注意: 和数组中的元素个数无关系。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] arr0 = &#123;&#125;;</div><div class=\"line\">String[] arr1 = &#123;<span class=\"string\">\"22\"</span>， <span class=\"string\">\"33\"</span>&#125;;</div><div class=\"line\">String[][] arr2 = &#123;&#125;;</div><div class=\"line\">int[] arr3 = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 获取类实例</span></div><div class=\"line\">Class clz0 = arr0.getClass();</div><div class=\"line\">Class clz1 = arr1.getClass();</div><div class=\"line\">Class clz2 = arr2.getClass();</div><div class=\"line\">Class clz3 = arr3.getClass();</div><div class=\"line\"><span class=\"comment\">// 比较</span></div><div class=\"line\">System.out.println(clz0 == clz1); <span class=\"comment\">// true</span></div><div class=\"line\">System.out.println(clz0 == clz2); <span class=\"comment\">// false</span></div><div class=\"line\">System.out.println(clz0 == clz3); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<h2 id=\"Class-实例常用-API\"><a href=\"#Class-实例常用-API\" class=\"headerlink\" title=\"Class 实例常用 API\"></a><strong>Class 实例常用 API</strong></h2><ul>\n<li>获得修饰符，返回 int 类型</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> modifiers = clz.<span class=\"built_in\">getModifiers</span>();</div><div class=\"line\"><span class=\"comment\">// 可以通过 Modifier 的类方法判断修饰符类型</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> isPublic = Modifier.isPublic(modifiers);</div></pre></td></tr></table></figure>\n<ul>\n<li>返回类的全限定名</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> <span class=\"keyword\">name</span> = clz.getName();</div></pre></td></tr></table></figure>\n<ul>\n<li>获得类的简单名字</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">String simpleName</span> = clz.getSimpleName();</div></pre></td></tr></table></figure>\n<ul>\n<li>获得该类的包</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Package</span> <span class=\"title\">package1 = clz.getPackage();</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获得类的父类</li>\n</ul>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span>&lt;?&gt; <span class=\"title\">superclass</span> = <span class=\"title\">clz</span>.<span class=\"title\">getSuperclass</span>();</span></div></pre></td></tr></table></figure>\n<ul>\n<li>判断该 Class 实例是否是数组</li>\n</ul>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">boolean<span class=\"built_in\"> array </span>= clz.isArray();</div></pre></td></tr></table></figure>\n<ul>\n<li>判断该 Class 实例是否是枚举</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">boolean enum1 = clz.isEnum()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获取构造器</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;?&gt;[] <span class=\"title\">constructors</span> = <span class=\"title\">clz</span>.<span class=\"title\">getConstructors</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获取方法</li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">methods</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethods</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获取字段</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field[] fields = clz.getFields()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a><strong>Constructor</strong></h1><p><strong>Constructor<t></t></strong> 表示类中构造器的类型。<br><strong>Constructor 实例</strong>就是某一个类中的某一个构造器。</p>\n<h2 id=\"获取类中的构造器\"><a href=\"#获取类中的构造器\" class=\"headerlink\" title=\"获取类中的构造器\"></a><strong>获取类中的构造器</strong></h2><ul>\n<li><strong>获取当前 Class 所表示类的 <code>public</code> 修饰的构造器</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;?&gt;[] <span class=\"title\">constructors</span> = <span class=\"title\">clz</span>.<span class=\"title\">getConstructors</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类的<code>所有的构造器</code>，和访问权限无关</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;?&gt;[] <span class=\"title\">declaredConstructors</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredConstructors</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中<code>指定</code>的一个 <code>public</code> 的构造器</strong></li>\n</ul>\n<p>参数: parameterTypes表示: 构造器<code>参数的 Class 类型</code><br>若传入<code>非 pulic</code> 构造器的参数列表，会抛出异常 <code>java.lang.NoSuchMethodException</code> 找不到该方法</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;<span class=\"title\">Student</span>&gt; <span class=\"title\">constructor0</span> = <span class=\"title\">clz</span>.<span class=\"title\">getConstructor</span><span class=\"params\">(<span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>， int.<span class=\"keyword\">class</span>)</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前Class所表示类中<code>指定的一个</code>的构造器，和访问权限无关</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;<span class=\"title\">Student</span>&gt; <span class=\"title\">declaredConstructor</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredConstructor</span><span class=\"params\">(<span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>)</span>;</span></div></pre></td></tr></table></figure>\n<h2 id=\"调用构造器创建对象\"><a href=\"#调用构造器创建对象\" class=\"headerlink\" title=\"调用构造器创建对象\"></a><strong>调用构造器创建对象</strong></h2><ul>\n<li><strong>调用构造器创建对象</strong></li>\n</ul>\n<p>当传入的<code>参数不能对应</code>时抛出异常 <code>java.lang.IllegalArgumentException</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;<span class=\"title\">Student</span>&gt; <span class=\"title\">declaredConstructor</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredConstructor</span><span class=\"params\">()</span>;</span></div><div class=\"line\">Student student = declaredConstructor.newInstance();</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>访问 private 构造器</strong></li>\n</ul>\n<p>为了安全性考虑，private 成员外界不准访问。会抛出 <code>java.lang.IllegalAccessException</code></p>\n<p>可以通过调用 <code>AccessibleObject</code> 类中的 public void setAccessible(boolean flag) 方法，设置可访问 <code>setAccessible(true)</code>。</p>\n<p>因为 Constructor 是 AccessibleObject <code>子类</code>，所以 Constructor 可以这样子设置来访问 private 构造器。</p>\n<p>从下图中可以看出<code>Constructor , Method, Field</code> 都<code>继承</code>自 AccessibleObject。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/Java/Reflection/AccessibleObject.jpg\" alt=\"AccessibleObject\"></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Constructor&lt;Student&gt; declaredConstructor = clz.getDeclaredConstructor(<span class=\"built_in\">String</span>.<span class=\"keyword\">class</span>， <span class=\"built_in\">int</span>.<span class=\"keyword\">class</span>， boolean.<span class=\"keyword\">class</span>);</div><div class=\"line\">declaredConstructor.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">Student student1 = declaredConstructor.newInstance(<span class=\"string\">\"fandy\"</span>， <span class=\"number\">12</span>， <span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p><strong><em>注意</em></strong></p>\n<p>由于 可以通过 class newInstance 方法调用无参的公有构造器生成该类。所以：一般的，定义类的时候都要保证有<code>一个公共的无参数构造器</code>,单例设计模式除外。</p>\n<h1 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a><strong>Method</strong></h1><h2 id=\"获取类中的方法\"><a href=\"#获取类中的方法\" class=\"headerlink\" title=\"获取类中的方法\"></a><strong>获取类中的方法</strong></h2><ul>\n<li><strong>获取包括自身和<code>继承过来</code>的所有的 <code>public</code> 方法</strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">methods</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethods</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取自身所有的方法<code>(不包括继承的，和访问权限无关)</code></strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">declaredMethods</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredMethods</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>表示获取指定的一个<code>public</code> 的方法<code>(包括继承的)</code></strong></li>\n</ul>\n<p>通过方法签名获取唯一的方法 </p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">method</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethod</span><span class=\"params\">(\"study\"， String.<span class=\"keyword\">class</span>)</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>表示获取指定的一个本类中的方法<code>(不包括继承的)</code></strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">declaredMethod</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredMethod</span><span class=\"params\">(\"sleep\")</span>;</span></div></pre></td></tr></table></figure>\n<h2 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a><strong>调用方法</strong></h2><ul>\n<li><strong>调用对象的方法</strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">method</span>.<span class=\"title\">invoke</span><span class=\"params\">(student， \"java iOS Android\")</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>调用对象的<code>私有方法</code></strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">declaredMethod.setAccessible(true)<span class=\"comment\">;</span></div><div class=\"line\">declaredMethod.invoke(student)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>调用<code>类方法</code></strong></li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method method2 = clz.getMethod(<span class=\"string\">\"eat\"</span>， <span class=\"built_in\">String</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\">method2.invoke(<span class=\"keyword\">null</span>， <span class=\"string\">\"什么\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>方法<code>返回值</code>的接收</strong></li>\n</ul>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> someThing = (<span class=\"keyword\">String</span>) method2.invoke(<span class=\"built_in\">null</span>， <span class=\"string\">\"返回吃什么\"</span>);</div><div class=\"line\"><span class=\"keyword\">System</span>.out.println(someThing);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>调用<code>可变参数</code></strong></li>\n</ul>\n<p>对于数组类型的引用类型的参数，底层会<code>自动解包</code>，为了解决该问题，我们使用 <code>Object 的一维数</code>组把实际<code>参数包装</code>起来。</p>\n<p>以后使用反射调用 invoke 方法，在传递实际参数的时候，无论是基本数据类型还是引用数据类型，也无论是可变参数类型，反正就是一切实际参数都包装在new Object[]{}中，就可以了。也就是 <code>method.invoke(方法底层所属对象，new Object[]{实际参数})</code>。</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">method3</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethod</span><span class=\"params\">(\"doWorks\"， String[].<span class=\"keyword\">class</span>)</span>;</span></div><div class=\"line\">method3.invoke(student， <span class=\"keyword\">new</span> Object[]<span class=\"comment\">&#123;new String[]&#123;\"洗衣\"， \"做饭\"&#125;</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a><strong>Field</strong></h1><h2 id=\"获取类中的字段\"><a href=\"#获取类中的字段\" class=\"headerlink\" title=\"获取类中的字段\"></a><strong>获取类中的字段</strong></h2><ul>\n<li><strong>获取当前 Class 所表示类中所有的 <code>public</code> 的字段，<code>包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field[] fields = clz.getFields()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中所有的字段，<code>不包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field[] declaredFields = clz.getDeclaredFields()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中该fieldName名字的 <code>public</code> 字段，<code>包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Field ageField</span> = clz.getField(<span class=\"string\">\"age\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中该fieldName名字的字段，<code>不包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Field sexField</span> = clz.getDeclaredField(<span class=\"string\">\"sex\"</span>);</div><div class=\"line\"><span class=\"attribute\">Field nameField</span> = clz.getDeclaredField(<span class=\"string\">\"name\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"get-set类中的字段\"><a href=\"#get-set类中的字段\" class=\"headerlink\" title=\"get set类中的字段\"></a><strong>get set类中的字段</strong></h2><ul>\n<li><strong>基本类型给字段设置值和取值</strong></li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"comment\">// set int</span></div><div class=\"line\">ageField.<span class=\"keyword\">set</span>(student， <span class=\"number\">18</span>); <span class=\"comment\">// 设置的包装类型</span></div><div class=\"line\">ageField.setInt(student， <span class=\"number\">19</span>); <span class=\"comment\">// 基本类型</span></div><div class=\"line\"><span class=\"comment\">// set boolean</span></div><div class=\"line\">sexField.<span class=\"keyword\">set</span>(student， <span class=\"literal\">true</span>);</div><div class=\"line\">sexField.setBoolean(student， <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">// get</span></div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(ageField.getInt(student)); <span class=\"comment\">// 基本类型 int</span></div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(sexField.<span class=\"keyword\">get</span>(student)); <span class=\"comment\">// 取出为包装类型 java.lang.Boolean</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>对象类型给字段设置值和取值</strong></li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象字段</span></div><div class=\"line\">nameField.<span class=\"keyword\">set</span>(student， <span class=\"string\">\"fandy\"</span>);</div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(nameField.<span class=\"keyword\">get</span>(student));</div><div class=\"line\"><span class=\"comment\">// 静态字段 类字段</span></div><div class=\"line\">Field levelField = clz.getDeclaredField(<span class=\"string\">\"level\"</span>);</div><div class=\"line\">levelField.setInt(<span class=\"literal\">null</span>， <span class=\"number\">3</span>);</div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(levelField.getInt(<span class=\"literal\">null</span>));</div><div class=\"line\"><span class=\"comment\">// 私有字段</span></div><div class=\"line\">levelField.setAccessible(<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"Annotation\"></a><strong>Annotation</strong></h1><h2 id=\"获取类中的注解\"><a href=\"#获取类中的注解\" class=\"headerlink\" title=\"获取类中的注解\"></a><strong>获取类中的注解</strong></h2><p>当然非运行时的注解是获取不到的，因为反射是在运行时操作的。</p>\n<ul>\n<li><strong>返回此元素上存在的所有注释</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Annotation[] annotations = clz.getAnnotations()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>返回直接存在于此元素上的所有注释(<code>忽略继承</code>来的注解)</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Annotation[] declaredAnnotations = clz.getDeclaredAnnotations()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取指定的注解</strong></li>\n</ul>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyAnnotation <span class=\"keyword\">annotation</span> = clz.getAnnotation(MyAnnotation.<span class=\"keyword\">class</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取指定的注解(<code>忽略继承</code>来的注解)</strong></li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">MyAnnotation declaredAnnotation</span> = clz.getDeclaredAnnotation(MyAnnotation.class);</div></pre></td></tr></table></figure>\n<h2 id=\"注解的一些操作\"><a href=\"#注解的一些操作\" class=\"headerlink\" title=\"注解的一些操作\"></a><strong>注解的一些操作</strong></h2><ul>\n<li><strong>获取 Annotation 的参数值</strong><br>其实就是调用 Annotation 接口中的方法返回对应的值</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(<span class=\"selector-tag\">annotation</span><span class=\"selector-class\">.value</span>());</div><div class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(<span class=\"selector-tag\">annotation</span><span class=\"selector-class\">.myValue</span>());</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取 Annotation 的类型</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(<span class=\"selector-tag\">annotation</span><span class=\"selector-class\">.annotationType</span>());</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>判断对应的对象上是否有我们所指定的注解</strong></li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">boolean</span> annotationPresent = clz.isAnnotationPresent(MyAnnotation.<span class=\"built_in\">class</span>);</div></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["Reflection","反射"]},{"title":"Eclipse 中的快捷键","url":"https://fandyliu.github.io/2014/06/01/Java/Eclipse中的快捷键/","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + Enter</td>\n<td style=\"text-align:center\">上一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Enter</td>\n<td style=\"text-align:center\">下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + ↑/↓</td>\n<td style=\"text-align:center\">代码上下移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + 1</td>\n<td style=\"text-align:center\">快速生成变量接受实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD+ Alt + ↑/↓</td>\n<td style=\"text-align:center\">快速复制代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + D</td>\n<td style=\"text-align:center\">删除一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + F</td>\n<td style=\"text-align:center\">格式化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + T</td>\n<td style=\"text-align:center\">快速查找</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD  + T</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + O</td>\n<td style=\"text-align:center\">找方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xml</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + A</td>\n<td style=\"text-align:center\">格式化</td>\n</tr>\n</tbody>\n</table>\n","categories":["Java"],"tags":["Eclipse","快捷键"]},{"title":"工具类的设计","url":"https://fandyliu.github.io/2014/05/04/Java/工具类/","content":"<p><strong>使用工具类的<code>好处</code>：</strong> 减少程序中的重复代码，便于维护。</p>\n<h3 id=\"工具类的编写规则\"><a href=\"#工具类的编写规则\" class=\"headerlink\" title=\"工具类的编写规则\"></a><strong>工具类的编写规则</strong></h3><ul>\n<li><p>一般的叫 XxxUtil，XxxUtils，XxxTool，XxxTools，XxxHelper。其中Xxx表示一个对象，一类事物。</p>\n</li>\n<li><p>工具类一般的存放在工具包中，包名中有(util，utils，tool，tools，helper)。</p>\n</li>\n</ul>\n<h3 id=\"工具类的常见形式\"><a href=\"#工具类的常见形式\" class=\"headerlink\" title=\"工具类的常见形式\"></a><strong>工具类的常见形式</strong></h3><p><strong>方式一.</strong><br>若工具方法使用 static 修饰，说明工具方法属于工具类，而不属于工具类的对象。把工具类的构造器给私有化起来，不能创建对象，只能使用类名调用类方法。</p>\n<pre><code>比如:Arrays类，Collections类。\n</code></pre><p><strong>方式二.</strong><br>若工具方法没有使用static修饰，此时把工具类设计成单例即可。</p>\n<p><strong><em>心得</em></strong></p>\n<ul>\n<li>一般的工具类都是单例的，工厂类其实也属于工具类.  推论:工厂类往往体现着单例模式设计。</li>\n<li>一般的，在项目中出现 new 自定义类(不是JDK自带的类)，我们应该使用工厂来创建对象。</li>\n</ul>\n","categories":["Java"],"tags":["工具","设计"]},{"title":"about","url":"https://fandyliu.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://fandyliu.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://fandyliu.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://fandyliu.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://fandyliu.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://fandyliu.github.io/tag/index.html","content":"","categories":[],"tags":[]}]