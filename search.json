[{"title":"MySQL","url":"https://fandyliu.github.io/2017/06/07/Java/MySQL/","content":"<h2 id=\"数据库的概述\"><a href=\"#数据库的概述\" class=\"headerlink\" title=\"数据库的概述\"></a>数据库的概述</h2><p><strong>数据库(DataBase:DB)：</strong> 数据库是按照数据结构来组织、存储和管理数据的仓库。</p>\n<p><strong>数据库管理系统(Database Management System:DBMS)：</strong> 是专门用于管理数据库的计算机系统软件。数据库管理系统能够为数据库提供数据的定义、建立、维护、查询和统计等操作功能，并完成对数据完整性、安全性进行控制的功能。</p>\n<p><strong>数据库应用系统(DataBase Application System:DBAS)：</strong> 使用数据库技术的系统； 数据库应用系统有很多，基本上所有的信息系统都是数据库应用系统。它通常由软件、数据库和数据管理员组成。</p>\n<p><strong><em>数据库技术发展历程：</em></strong></p>\n<ol>\n<li><p>层次数据库和网状数据库技术阶段:<br>使用指针来表示数据之间的联系。</p>\n</li>\n<li><p>关系数据库技术阶段:<br> 经典的里程碑阶段。 RDBMS 指关系型数据库管理系统，全称 Relational Database Management System。RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。<br>RDBMS 中的数据存储在被称为表的数据库对象中。<br>表是相关的数据项的集合，它由列和行组成。</p>\n</li>\n</ol>\n<p>常见的关系数据库:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据库系统</th>\n<th style=\"text-align:center\">所属公司</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">  Oracle</td>\n<td style=\"text-align:center\">Oracle</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">  DB2</td>\n<td style=\"text-align:center\">IBM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">  SQL Server</td>\n<td style=\"text-align:center\">MS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">  MySQL</td>\n<td style=\"text-align:center\">AB–&gt;SUN–&gt;Oracle</td>\n</tr>\n</tbody>\n</table>\n<p>Oracle:运行稳定，可移植性高，功能齐全，性能超群！适用于大型企业领域。<br>DB2：速度快、可靠性好，适于海量数据，恢复性极强。适用于大中型企业领域。<br>SQL Server:全面，效率高，界面友好，操作容易，但是不跨平台。适用于于中小型企业领域。<br>MySQL:开源，体积小，速度快。适用于于中小型企业领域。</p>\n<ol>\n<li>后关系数据库技术阶段；<br> 关系型数据库存在数据模型，性能，拓展伸缩性的缺点，出现了：<br> ORDBMS：面向对象数据库技术。<br> NoSQL ：结构化数据库技术。</li>\n</ol>\n<p>随着大数据的不断发展，非关系型的数据库现在成了一个极其热门的新领域，非关系数据库产品的发展非常迅速，出色的NoSQL数据库：<br><strong>常见的NoSQL数据库分为四大类：</strong><br>1):键值存储数据库：Oracle BDB,Redis,BeansDB<br>2):列式储数数据库：HBase,Cassandra,Riak<br>3):文档型数据库：MongoDB,CouchDB<br>4):图形数据库：Neo4J,InfoGrid,Infinite Graph</p>\n<h2 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h2><p><strong>SQL：</strong> 结构化查询语言(Structured Query Language), 是关系型数据库标准语言。SQL 是用于访问和处理数据库的标准的计算机语言。<br><strong>特点：</strong> 简单，灵活，功能强大。</p>\n<p><strong>SQL包含6个部分：</strong><br>一：数据查询语言（Data Query Language，DQL）：<br>其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。<br>二：数据操作语言（Data Manipulation Language，DML）：<br>其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。<br>三：事务处理语言（Transaction Processing Language，TPL）：<br>它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。<br>四：数据控制语言（Data Control Language，DCL）：<br>它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。<br>五：数据定义语言（Data Definition Language，DDL）：<br>其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。<br>六：指针控制语言（CCL）：<br>它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p>\n<p>书写规则：</p>\n<ol>\n<li>在MySQL数据库中，SQL语句大小写不敏感</li>\n<li>SQL语句可单行或多行书写</li>\n<li>在SQL语句中，关键字不能跨多行或缩写</li>\n<li>为了提高可读性，一般关键字大写，其他小写</li>\n<li>空格和缩进使程序易读</li>\n</ol>\n<p>什么是表(table)？<br>我们说 MySQL 是一种关系型数据库。关系数据库最重要的概念就是表。<br>表具有固定的列数和任意的行数，在数学上称为“关系”。</p>\n<p>二维表是同类实体的各种属性的集合，每个对象对应于表中的一行，在关系中称为元组，相当于通常的一条记录；<br>表中的列表示属性，称为Field，相当于通常记录中的一个数据项，也叫列、字段。</p>\n<h2 id=\"启动和连接-MySQL\"><a href=\"#启动和连接-MySQL\" class=\"headerlink\" title=\"启动和连接 MySQL\"></a>启动和连接 MySQL</h2><h3 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h3><p>要访问数据库,必须将MySQL服务启动<br>启动服务的方式:<br>方式一: 在服务列表中点击启动<br>方式二: 在运行窗口(win+r)中使用windows命令<br>net start 服务名称: <code>net start mysql</code><br>net stop 服务名称:  <code>net stop mysql</code></p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库:\"></a>连接数据库:</h3><p>方式一:使用MySQL自带的命令行窗口,只需要输入密码即可<br>方式二:使用命令连接数据库</p>\n<p>mysql -u用户名 -p密码 -h主机ip地址 -P端口<br>mysql -uroot -padmin -hlocalhost -P3306</p>\n<p>如果连接的数据库在本机上,而且端口是默认的3306<br>mysql -u用户名 -p密码<br>mysql -uroot -padmin</p>\n<p><strong>修改密码</strong><br>用 <code>SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;newpassword&#39;);</code></p>\n<h3 id=\"Mac-上安装问题\"><a href=\"#Mac-上安装问题\" class=\"headerlink\" title=\"Mac 上安装问题\"></a>Mac 上安装问题</h3><p>msyql 5.7.11版本安装<br>mysql 生成的 root 的临时密码是<br>2016-05-10 T10:05:47.421912Z 1 [Note] A temporary password is generated for root@localhost: v:gNXSw5FTkw<br>使用<br>mysql -u root -p  v:usHT7pZ&gt;4(xz </p>\n<p>Your password has expired. To log in you must change it using a client that supports expired passwords</p>\n<p>在 stackoverflow 找到了解决方法<br>连接地址：<a href=\"http://stackoverflow.com/questions/33387879/mysql-password-expired-cant-connect\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/33387879/mysql-password-expired-cant-connect</a><br>解决办法：<br><code>mysqladmin -uroot -p password</code></p>\n<p>Enter password:   //这里输入上面的v:usHT7pZ&gt;4(xz</p>\n<p>New password:    //重新输入新密码</p>\n<p>Confirm new password: //重新输入新密码</p>\n<p>问题解决！</p>\n<h3 id=\"远程连接问题\"><a href=\"#远程连接问题\" class=\"headerlink\" title=\"远程连接问题\"></a>远程连接问题</h3><p>Host is not allowed to connect to this MySQL server 解决方法</p>\n<blockquote>\n<p>今天在 Mac 上面装完 MySQL，却发现在本地登录可以，但是远程登录却报错 Host is not allowed to connect to this MySQL server， 现在记录下解决办法。</p>\n<p>先说说这个错误，其实就是我们的 MySQL 不允许远程登录，所以远程登录失败了，解决方法如下：</p>\n</blockquote>\n<ol>\n<li>在装有MySQL的机器上登录 MySQL <code>mysql -uroot -p密码</code></li>\n<li>执行 <code>use mysql</code>;</li>\n<li>执行 <code>update user set host = &#39;%&#39; where user = &#39;root&#39;</code>;这一句执行完可能会报错，不用管它。</li>\n<li>执行 <code>FLUSH PRIVILEGES</code>;</li>\n</ol>\n<p>经过上面4步，就可以解决这个问题了。<br>注: 第四步是刷新 MySQL 的权限相关表，一定不要忘了，我第一次的时候没有执行第四步，结果一直不成功，最后才找到这个原因。</p>\n<h2 id=\"数据库的基本操作\"><a href=\"#数据库的基本操作\" class=\"headerlink\" title=\"数据库的基本操作\"></a>数据库的基本操作</h2><p>数据库对象：存储，管理和使用数据的不同结构形式，如：表、视图、存储过程、函数、触发器、事件等。<br>数据库：存储数据库对象的容器。</p>\n<p><strong>数据库分两种：</strong><br>   1）：系统数据库（系统自带的数据库）：不能修改<br>        information_schema:存储数据库对象信息，如：用户表信息，列信息，权限，字符，分区等信息。<br>        performance_schema:存储数据库服务器性能参数信息。<br>        mysql:存储数据库用户权限信息。<br>        test:任何用户都可以使用的测试数据库。</p>\n<p>   2）：用户数据库（用户自定义的数据库）：一般的，一个项目一个用户数据库。</p>\n<ul>\n<li>查看数据库服务器存在哪些数据库：</li>\n</ul>\n<pre><code>SHOW  DATABASES;\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\r* 使用指定的数据库：</div><div class=\"line\"></div><div class=\"line\">```\rUSE database_name;</div></pre></td></tr></table></figure>\n\n\n* 查看指定的数据库中有哪些数据表:\n</code></pre><p>SHOW TABLES;</p>\n<pre><code>\n* 创建指定名称的数据库：\n</code></pre><p>CREATE DATABASE database_name;<br><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\r<span class=\"bullet\">* </span>删除数据库：</div></pre></td></tr></table></figure></p>\n<p>DROP DATABASE database_name;<br>```</p>\n<p>MySQL 中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供不同的功能和能力。<br>通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。</p>\n<p>MyISAM：拥有较高的插入，查询速度，但不支持事务，不支持外键。<br>InnoDB：支持事务，支持外键，支持行级锁定，性能较低。</p>\n<p>InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但对比MyISAM，处理效率差，且会占用更多的磁盘空间以保留数据和索引。</p>\n<p><img src=\"/2017/06/07/Java/MySQL/\" alt=\"图片\"></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>最常用的整数类型：</p>\n<p>MySQL列类型               Java数据类型</p>\n<p>MySQL 以一个可选的显示宽度指示器的形式对 SQL 标准进行扩展，这样当从数据库检索一个值时，可以把这个值加长到指定的长度。<br>例如，指定一个字段的类型为 INT(6)，就可以保证所包含数字少于 6 个的值从数据库中检索出来时能够自动地用空格填充。<br>需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。一般不用指定位宽。</p>\n<p>FLOAT[(s,p)]   ：<br>DOUBLE[(s,p)]  ： 小数类型，可存放实型和整型 ,范围(s)和精度(p)<br>                  money double(5,2): 整数和小数一共占5为.其中小数占2位.<br>                  都不够精确。999.99<br>定点数据类型： DECIMAL，高精度类型，金额货币优先选择。</p>\n<p>MySQL列类型Java数据类型<br>:-:|:-:<br>INT | int/Integer<br>BIGINT | long/Long<br>|<br>FLOAT | float/Float<br>DOUBLE | double/Double<br>DECIMAL | BigDecimal</p>\n<p>char(size)      定长字符，0 - 255字节，size指N个字符数，若插入字符数超过设定长度，会被截取并警告。<br>varchar(size) :     变长字符，0 - 255字节，从MySQL5开始支持65535个字节，若插入字符数超过设定长度，会被截取并警告。</p>\n<p>一般存储大量的字符串，比如文章的纯文本，可以选用TEXT系列类型。</p>\n<p>注意:在MySQL中，字符使用<strong>单引号</strong>引起来。 相当于Java中字符串(String,StringBuilder/StringBuffer);</p>\n<p><img src=\"/2017/06/07/Java/MySQL/\" alt=\"图\"></p>\n<p>日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。<br>注意:在MySQL中，日期时间值使用<strong>单引号</strong>引起来。 相当于Java中Date，Calender。</p>\n<p>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB：<br>存放图形、声音和影像，二进制对象，0-4GB。<br>开发中，我们一般存储二进制文件保存路径。</p>\n<p>BIT：我们一般存储0或1，存储是Java中的boolean/Boolean类型的值。</p>\n<h2 id=\"表的基本操作\"><a href=\"#表的基本操作\" class=\"headerlink\" title=\"表的基本操作\"></a>表的基本操作</h2><p>1.先进入某一个数据库；USE DATABASE_NAME</p>\n<p>2.输入建表的命令；<br>CREATE TABLE 表名(<br>   列名1    列的类型   [约束],<br>   列名2    列的类型   [约束],<br>   ….<br>   列名N    列的类型   约束<br>);<br>注意:最后一行没有逗号<br>需求:创建一张学生信息表(编号,姓名,年龄,性别)<br>CREATE TABLE <code>student</code> (<br>   id bigint PRIMARY KEY AUTO_INCREMENT,<br>  <code>name</code> varchar(20) not null,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  <code>sex</code> int(11) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<p>SQL命令中不能使用关键字或者保留字来命名<br>比如:创建一张订单表(order),order 在sql中是用来做排序,所有不能使用<br>解决方案:<br>1.在名称前后加上反引号``<br>2.在名称前加上一个前缀: t_order</p>\n<p>查看数据库中有哪些表：<br>SHOW TABLES;<br>查看表结构：<br>DESC table_name;<br>查看表的详细定义：<br>SHOW CREATE TABLE table_name;<br>删除表：<br>DROP TABLE table_name;</p>\n<h3 id=\"表的约束\"><a href=\"#表的约束\" class=\"headerlink\" title=\"表的约束\"></a>表的约束</h3><p>表的约束(针对于某一列):<br>1.非空约束：NOT NULL，不允许某列的内容为空。<br>2.设置列的默认值：DEFAULT。<br>3.唯一约束：UNIQUE:UK，在该表中，该列的内容必须唯一。<br>4.主键约束：PRIMARY KEY:PK， 非空且唯一。<br>5.主键自增长：AUTO_INCREMENT，从1开始，步长为1。<br>6.外键约束：FOREIGN KEY，A表中的外键列. A表中的外键列的值必须参照于B表中的某一列(B表主键)<br>主键设计：<br>1：单字段主键，单列作为主键，建议使用。<br>   复合主键，使用多列充当主键，不建议。<br>2：主键分为两种:<br>   1）.自然主键:使用有业务含义的列作为主键(不推荐使用);<br>   2）.代理主键:使用没有业务含义的列作为主键(推荐使用);<br>简单查询</p>\n<p>语法：<br>SELECT    {*, column [alias],…}<br>FROM    table_name;</p>\n<p>消除结果中重复的数据。<br>语法：<br>SELECT    DISTINCT 列名，…<br>FROM    table_name;</p>\n<p>对NUMBER型数据可以使用算数操作符创建表达式（+  -  *  /）<br>对DATE型数据可以使用部分算数操作符创建表达式 （+  -）</p>\n<p><em>如果别名中使用特殊字符，或者是强制大小写敏感，或有空格时，都需加单引号；<br>通常列的别名不要使用引号,会影响排序</em></p>\n<p>SELECT    {*, column [AS] 别名,…}<br>FROM    table_name;</p>\n<p>为方便用户浏览查询的结果数据，有时需要设置显示格式，可以使用CONCAT函数来连接字符串。</p>\n<p>SELECT CONCAT(productName,’商品的零售价为：’,salePrice) AS productSalePrice FROM product;</p>\n<h3 id=\"过滤查询\"><a href=\"#过滤查询\" class=\"headerlink\" title=\"过滤查询\"></a>过滤查询</h3><p>使用WHERE子句限定返回的记录：<br>语法：<br>SELECT  <selectlist><br>FROM     table_name<br>WHERE    条件;</selectlist></p>\n<p>注意：<br>WHERE子句在 FROM 子句后</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于或等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于或等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=(&lt;&gt;)</td>\n<td style=\"text-align:center\">不等于</td>\n</tr>\n</tbody>\n</table>\n<p>注意：字符串和日期要用单引号扩起来.</p>\n<p>要让MySQL查询<code>区分大小</code>写，可以： BINARY<br>SELECT <em> FROM table_name WHERE BINARY productName=’g9x’<br>SELECT </em> FROM table_name WHERE BINARY productName=’G9X’</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">AND(&amp;&amp;)</td>\n<td style=\"text-align:center\">如果组合的条件都是TRUE,返回TRUE</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OR(</td>\n<td style=\"text-align:center\"></td>\n<td>)</td>\n<td>如果组合的条件之一是TRUE,返回TRUE</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NOT(!)</td>\n<td style=\"text-align:center\">如果下面的条件是FALSE,返回TRUE`</td>\n</tr>\n</tbody>\n</table>\n<p>优先级 NOT &gt; AND &gt; OR</p>\n<p>使用BETWEEN运算符显示某一值域范围的记录，这个操作符最常见的使用在数字类型数据的范围上，但对于字符类型数据和日期类型数据同样可用。<br>格式：<br>WHERE 列名 BETWEEN minvalue AND maxvalue：闭区间。</p>\n<p>使用IN运算符，判断列的值是否在指定的集合中。</p>\n<p>格式： WHERE 列名 IN (值1，值2….);</p>\n<p>IS NULL:判断列的值是否为空。</p>\n<p>格式：WHERE  列名 IS NULL;</p>\n<p>使用LIKE运算符执行通配查询，查询条件可包含文字字符或数字：<br>%通配符：可表示零或多个字符。<br>_通配符：可表示一个字符。</p>\n<h3 id=\"查询结果排序\"><a href=\"#查询结果排序\" class=\"headerlink\" title=\"查询结果排序\"></a>查询结果排序</h3><p>使用ORDER BY子句将查询结果按照某种规则排序</p>\n<p>格式：<br>SELECT <selectlist><br>FROM table_name<br>WHERE 条件<br>ORDER BY 列名1 [ASC/DESC],列名2 [ASC/DESC]…;</selectlist></p>\n<p>SELECT语句执行顺序：<br>先执行FROM—&gt;接着执行WHERE—&gt;再执行SELECT—&gt;最后执行ORDER BY</p>\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>分页的分类:<br>    假分页:一次性将所有的数据查询出来放到内存中,每次翻页都从内存中去截取<br>    真分页:每次都从数据库中取查询</p>\n<pre><code>假分页的优缺点:如果数据过多,可能会造成内存溢出;翻页速度快.\n真分页的优缺点:速度相对较慢,但是不会造成内存溢出;(推荐)\n</code></pre><p>语法:<br>SELECT    column1, column2…<br>FROM    table_name<br>[WHERE    condition]<br>LIMIT beginIndex, pageSize;<br>beginIndex: 是开始索引(从0开始):第一条记录:0,第二条记录:1<br>pageSize: 每页显示多少条数据</p>\n<h2 id=\"beginIndex-当前页数-1-pageSize\"><a href=\"#beginIndex-当前页数-1-pageSize\" class=\"headerlink\" title=\"beginIndex = (当前页数 - 1) * pageSize\"></a>beginIndex = (当前页数 - 1) * pageSize</h2><h3 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h3><p>什么是聚集函数：(数据统计)<br>聚集函数作用于一组数据，并对一组数据返回一个值。</p>\n<p>COUNT：统计结果记录数<br>MAX：  统计计算最大值<br>MIN：  统计计算最小值<br>SUM：  统计计算求和<br>AVG：  统计计算平均值</p>\n<h3 id=\"笛卡尔积\"><a href=\"#笛卡尔积\" class=\"headerlink\" title=\"笛卡尔积\"></a>笛卡尔积</h3><p>单表查询:从一张表中查询数据<br>多表查询:从多张表中联合查询出数据</p>\n<p>单表查询:<br>SELECT 列名1,列名2,列名3…<br>FROM  表名</p>\n<p>多表查询(最简单的):<br>SELECT <selectlist><br>FROM  表名A , 表名B</selectlist></p>\n<p>没有连接条件的表关系返回的结果。<br>多表查询会产生笛卡尔积:<br>假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。<br>实际运行环境下，应避免使用全笛卡尔集。</p>\n<p>解决方案: 在WHERE加入有效的连接条件—-&gt;等值连接<br>注意:<br>连接 n张表,至少需要 n-1个连接条件。</p>\n<h4 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h4><p>主键约束(PRIMARY KEY:PK): 约束在当前表中,指定列的值非空且唯一.<br>外键约束(FOREIGN KEY:FK): A表中的外键列. A表中的外键列的值必须参照于B表中的某一列(B表主键).</p>\n<pre><code>注意:在MySQL中,InnoDB支持事务和外键.\n修改表的存储引擎为InnoDB:\nALTER TABLE 表名 ENGINE=&apos;InnoDB&apos;;\n\n主表:该表中的数据可以独立存在\n从表:该表中的数据要依赖于其他表中的数据,有外键列的表为从表\n\n外键列的定义规范:\n约定优于配置\n主键:id\n外键命名:xxx_id,xxx:参照表的名称,productdir_id,也可以使用缩写,dir_id\n</code></pre><h3 id=\"内连接查询\"><a href=\"#内连接查询\" class=\"headerlink\" title=\"内连接查询\"></a>内连接查询</h3><p>内连接分为：隐式内连接、显示内连接，其查询效果相同。</p>\n<hr>\n<p>隐式内连接：<br>SELECT    <selectlist><br>FROM    A ,B<br>WHERE A.列 = B.列</selectlist></p>\n<hr>\n<p>显示内连接(推荐写法)：.<br>SELECT    <selectlist><br>FROM    A [INNER] JOIN B ON A.列 = B.列</selectlist></p>\n<hr>\n<p>在做等值连接的时候,若A表中和B表中的参照的列名相同. 则可以简写:<br>SELECT    <selectlist><br>FROM    A [INNER] JOIN B USING(同名的列)</selectlist></p>\n<p>前提:在emp和dept表中都有deptno列. 并且是外键关系。<br>如: SELECT * FROM emp JOIN dept USING (deptno)</p>\n<p><img src=\"/2017/06/07/Java/MySQL/\" alt=\"图\"></p>\n<h3 id=\"自连接查询\"><a href=\"#自连接查询\" class=\"headerlink\" title=\"自连接查询:\"></a>自连接查询:</h3><p>  把一张表看成两张来做查询.</p>\n<p>需求: 查询每个商品分类的名称和父分类名称:</p>\n<p>隐式内连接：<br>SELECT sub.dirName,super.dirName<br>FROM productdir super,productdir sub<br>WHERE sub.parent_id = super.id<br>显示内连接：<br>SELECT sub.dirName,super.dirName<br>FROM productdir super JOIN productdir sub<br>ON sub.parent_id = super.id</p>\n<h4 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h4><p>插入语句:一次插入操作只插入一行.<br>INSERT INTO    table_name (column1,column2,column3…)<br>VALUES    (value1,value2,value3…);</p>\n<hr>\n<p>1.插入完整数据记录<br>2.插入数据记录一部分<br>3.插入多条数据记录（MySQL特有）<br> INSERT INTO    table_name (column1,column2,column3…)<br>   VALUES (value1,value2,value3…),<br>          (value1,value2,value3…),<br>          (value1,value2,value3…)..;</p>\n<p>4.插入查询结果<br> INSERT INTO    table_name (column1,column2,column3…)<br>     SELECT (column1,column2,column3…)<br>     FROM table_name </p>\n<p>UPDATE    table_name<br>SET    columnName = value [, columnName = value] …<br>[WHERE    condition];</p>\n<p>DELETE  FROM    tablename<br>[WHERE    condition];<br>如果省略了where子句，则全表的数据都会被删除</p>\n<p>数据备份和恢复</p>\n<p>MySQL自身的数据库维护：<br>通过cmd命令进入dos窗口：<br>1.导出：mysqldump -u账户 -p密码 数据库名称&gt;脚本文件存储地址<br>   mysqldump -uroot -padmin jdbcdemo&gt; C:/shop_bak.sql<br>2.导入：mysql -u账户 -p密码 数据库名称&lt; 脚本文件存储地址<br>   mysql -uroot -padmin jdbcdemo&lt; C:/shop_bak.sql<br>Navicat工具的导入和导出：<br>Navicat工具的备份和还原：</p>\n","categories":["Java"],"tags":["数据库","MySQL"]},{"title":"注解","url":"https://fandyliu.github.io/2017/06/04/Java/注解/","content":"<p>从 Java 5 开始，java 开始对元数据的支持，也就是<code>注解(Annotation)</code>。</p>\n<p>注解:用来描述数据的数据</p>\n<p>注解/标签/annotation 都指的是注解</p>\n<p><code>元数据</code>(metadata)：描述数据的数据。</p>\n<p>注解被用来为程序元素(类，方法，成员变量等)设置元数据。</p>\n<p>所有的 Annotation 都是 java.lang.annotation.Annotation 接口的子接口，所以 Annotation 是一种特殊的接口。</p>\n<p>@interface Override {} —&gt; interface Override extends java.lang.annotation.Annotation{}</p>\n<p>所有的枚举类，都是java.lang.Enum类的子类。<br>enum Gender{}——&gt;  class Gender extends java.lang.Enum{}</p>\n<h2 id=\"JDK中自带的注解\"><a href=\"#JDK中自带的注解\" class=\"headerlink\" title=\"JDK中自带的注解\"></a>JDK中自带的注解</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JDK中内置的注解</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">@Override</td>\n<td style=\"text-align:center\">限定覆写父类方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Deprecated</td>\n<td style=\"text-align:center\">标记已过时,不推荐使用.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@SuppressWarings(value=”xxx”)</td>\n<td style=\"text-align:center\">抑制编译器发出的警告,(不会解决问题)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@SafeVarargs</td>\n<td style=\"text-align:center\">抑制堆污染警告(Java7开始出现的)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>堆污染:</strong> 当方法使用了泛型和可变参数的时候,可能出现堆污染。如：</p>\n<pre><code>@SafeVarargs\npublic static &lt;T&gt; List&lt;T&gt; asList(T... a) {\n    return new ArrayList&lt;&gt;(a);\n}\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 元注解    </div><div class=\"line\"><span class=\"code\">    </span></div><div class=\"line\">*<span class=\"strong\">*元注解*</span><span class=\"strong\">*：注解的注解</span></div><div class=\"line\">\r* @Retention: 描述当前的注解能够保存到的时期</div><div class=\"line\">\r他的值封装到枚举类 *<span class=\"strong\">*RetentionPolicy*</span>* 中的</div><div class=\"line\">\r<span class=\"strong\">*自定义的注解应该保存到 RUNTIME 方便用反射读取。*</span></div><div class=\"line\"></div><div class=\"line\">RetentionPolicy | 含义</div><div class=\"line\"><span class=\"meta\">:-:|:-:</span></div><div class=\"line\">CLASS | 编译器将把注释记录在类文件中，但在运行时 VM 不需要保留注释。</div><div class=\"line\">RUNTIME | 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。</div><div class=\"line\">SOURCE  | 编译器要丢弃的注释。</div><div class=\"line\">\r<span class=\"bullet\">* </span>@Target: 当前的注解能够贴到哪些程序元素上</div><div class=\"line\"></div><div class=\"line\">他的值封装到枚举类 *<span class=\"strong\">*ElementType*</span>* 中的</div><div class=\"line\"><span class=\"code\">\t</span></div><div class=\"line\">ElementType | 含义</div><div class=\"line\"><span class=\"meta\">:-:|:-:</span></div><div class=\"line\">ElementType.ANNOTATION<span class=\"emphasis\">_TYPE | 只能修饰Annotation\rElementType.CONSTRUCTOR | 只能修饰构造方法\rElementType.FIELD | 只能修饰字段(属性),包括枚举常量\rElementType.LOCAL_</span>VARIABLE | 只能修饰局部变量\rElementType.METHOD | 只能修饰方法\rElementType.PACKAGE | 只能修饰包(极少使用)\rElementType.PARAMETER | 只能修饰参数\rElementType.TYPE | 只能修饰类，接口，枚举\r\r<span class=\"bullet\">* </span>@Documented:  表示当前的注解可以保存到API文档中\r<span class=\"bullet\">* </span>@Inherited: 如果父类当中有该注解,则表示子类中也有\r\r## 自定义注解和使用</div><div class=\"line\">\r1. 创建注解:</div><div class=\"line\"></div><div class=\"line\">注意: 数据类型只能是：only primitive type(基本数据类型), String, Class, annotation, enumeration(枚举), arrays(数组)</div></pre></td></tr></table></figure>\n\n@Target({ElementType.CONSTRUCTOR, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation {\n   // 如果在使用的时候只需要传递 value 则可以在参数列表中省略（见下）\n    String value(); \n    String name() default &quot;Fandy&quot;;\n    int age() default 18;\n}\n</code></pre><ol>\n<li>定义需要别贴的程序元素,将注解贴到程序元素上</li>\n</ol>\n<pre><code>// @MyAnnotation(&quot;niu B&quot;) // 只传 value 省略 &apos;key&apos;\n@MyAnnotation(value = &quot;niu B&quot;,name =&quot;fandy&quot;)\nclass Person {\n}\n</code></pre><ol>\n<li>第三方的程序赋予注解特殊的功能</li>\n</ol>\n<h2 id=\"模拟-JUnit4-x\"><a href=\"#模拟-JUnit4-x\" class=\"headerlink\" title=\"模拟 JUnit4.x\"></a>模拟 JUnit4.x</h2><p><em>大家都知道 Junit4.x 的执行效果：</em></p>\n<p>首先执行 <code>@Before</code> 标签所帖的方法，再执行测试方法（被 <code>@Test</code> 标签所贴的方法）,最后执行 <code>@After</code> 标签所帖的方法。</p>\n<p>操作步骤:<br>1.定义注解<br>@MyBefore  @MyTest  @MyAfter<br>2.定义程序元素,将注解贴到程序元素上<br>定义一个EmployeeDAOTest,将定义好的注解贴到程序元素上<br>3.使用第三方的程序来赋予注解特殊的功能<br>1).创建三个集合,分别用来存放三种标签对应的方法</p>\n<p>2).取出该方法所有的公共方法<br>Method[] methods = Class实例对象.getMethods();</p>\n<p>3).遍历所有的方法,将不同标签所贴的方法放到对应的集合中</p>\n<p>4).遍历testList集合中的所有的测试方法,<br>在执行测试方法之前,遍历beforeList集合中的所有方法,并执行</p>\n<p>调用该测试方法</p>\n<p>在执行测试方法之后,遍历afterList集合中的所有方法,并执行</p>\n","categories":["Java"],"tags":["注解"]},{"title":"资源文件","url":"https://fandyliu.github.io/2017/06/04/Java/资源文件/","content":"<h2 id=\"为什么要使用资源文件？\"><a href=\"#为什么要使用资源文件？\" class=\"headerlink\" title=\"为什么要使用资源文件？\"></a>为什么要使用资源文件？</h2><p>传统设计:操作MySQL数据库:账号和密码<br>String username = “root”;<br>String password = “admin”;</p>\n<p>会在代码中写死(硬编码).切换为Oracle:scott/tiger,此时就会修改源代码。<br>开发中要避免硬编码,提供维护性。</p>\n<p>因此我们可以使用配置文件来解决这个问题。把账号和密码存放在配置文件中，那么以后要切换数据库，只需要改配置文件即可。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>配置文件: 主要有 properties 和 xml 。</p>\n<p>如果数据之间有关联，则使用 xml，反之则使用 properties。</p>\n<p>properties<code>（注意空格）</code></p>\n<pre><code>#key=value\nusername=root\npassword=admin\n</code></pre><p>现在的问题,如何来读取配置文件中的数据.<br>要读取properties文件.必须使用Properties类(Hashtable的子类,Map的实现类).<br>Properties对象.load(InputStream in);</p>\n<h3 id=\"加载资源文件\"><a href=\"#加载资源文件\" class=\"headerlink\" title=\"加载资源文件:\"></a>加载资源文件:</h3><p>加载资源文件要使用相对路径，要想使用相对路径加载资源文件，资源文件要在资源文件 src 的 CLASSPATH 的根路径上。</p>\n<ul>\n<li><strong>相对于 CLASSPATH（kind: output）的根路径</strong></li>\n</ul>\n<p>此时要从CLASSPATH（kind: output）路径去找资源文件,必须使用ClassLoader类(类加载器).<br>如何获取ClassLoader对象:</p>\n<p><strong>方式1:</strong>  ClassLoader loader = Thread.currentThrad().getContextClassLoader();</p>\n<p><strong>方式2:</strong>  ClassLoader loader = 当前类.class.getClassLoader();</p>\n<p>再通过方法 public InputStream getResourceAsStream(String fileName) 获取输入流。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Properties p = new Properties()<span class=\"comment\">;</span></div><div class=\"line\">// 获得文件的相对路径</div><div class=\"line\">ClassLoader classLoader = Thread.currentThread().getContextClassLoader()<span class=\"comment\">;</span></div><div class=\"line\">// ClassLoader classLoader = PropertiesTest.class.getClassLoader()<span class=\"comment\">;</span></div><div class=\"line\">InputStream inStream = classLoader.getResourceAsStream(<span class=\"string\">\"db.properties\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">p.load(inStream)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"username\"</span>))<span class=\"comment\">; </span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"password\"</span>))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>相对于加载类的类路径  CLASSPATH（kind: output)</strong></li>\n</ul>\n<p>PropertiesTest 类的包名为 com.fandy.load。通过方法 <code>InputStream inStream = PropertiesTest.class.getResourceAsStream(&quot;db.properties&quot;);</code>。此时寻找 db.properties 的路径，就是当前 PropertiesTest 加载类的路径 CLASSPATH(kind: output)根/com/fandy/load 目录中。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Properties p = new Properties()<span class=\"comment\">;</span></div><div class=\"line\">// 获得文件的相对路径</div><div class=\"line\">InputStream inStream = PropertiesTest.class.getResourceAsStream(<span class=\"string\">\"db.properties\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">p.load(inStream)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p)<span class=\"comment\">;</span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"username\"</span>))<span class=\"comment\">; </span></div><div class=\"line\">System.out.println(p.getProperty(<span class=\"string\">\"password\"</span>))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>","categories":["Java"],"tags":["资源文件"]},{"title":"JSPatch 胡谈","url":"https://fandyliu.github.io/2017/03/08/iOS/JSPatch胡谈/","content":"<p>今天早上一到公司，就收到苹果的一封邮件。相信大家都知道平常收到苹果的邮件肯定没有什么好事。于是在诚惶诚恐中打开了他，发现真不是什么好事。</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1489390361578&di=be37caae8dd91c0db308e25f41d66dc6&imgtype=0&src=http%3A%2F%2Fwww.techug.com%2Fwordpress%2Fwp-content%2Fuploads%2F2017%2F03%2F1488954657473130.jpg\" width=\"75%\"></p>\n<a id=\"more\"></a>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dear **,</div><div class=\"line\"></div><div class=\"line\">Your app, E+ 实名认证 (<span class=\"number\">1116050607</span>), does <span class=\"keyword\">not</span> comply <span class=\"keyword\">with</span> <span class=\"literal\">one</span> <span class=\"keyword\">or</span> more App Review Guidelines.</div><div class=\"line\"></div><div class=\"line\">For details, <span class=\"keyword\">or</span> <span class=\"built_in\">to</span> directly contact <span class=\"keyword\">the</span> App Review team, go <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> Resolution Center <span class=\"keyword\">on</span> <span class=\"title\">iTunes</span> <span class=\"title\">Connect</span>.</div><div class=\"line\"></div><div class=\"line\">Regards,</div><div class=\"line\"></div><div class=\"line\">App Store Review</div><div class=\"line\"></div><div class=\"line\">Find solutions <span class=\"keyword\">and</span> share tips <span class=\"keyword\">with</span> Apple developers <span class=\"built_in\">from</span> around <span class=\"keyword\">the</span> world — <span class=\"keyword\">http</span>://devforums.apple.com</div></pre></td></tr></table></figure>\n<p>他告诉我，我的 App 有一项或者多项不符合苹果的<code>审核指南</code>。顺手打开他给的链接到 iTunes Connect 中发现有一个违反政策通知问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017年3月8日 上午9:33</div><div class=\"line\">发件人 Apple</div><div class=\"line\">Dear Developer,</div><div class=\"line\"></div><div class=\"line\">Your app, extension, and/or linked framework appears to contain code designed explicitly with the capability to <span class=\"keyword\">change</span> your app’s behavior <span class=\"keyword\">or</span> functionality <span class=\"keyword\">after</span> App Review approval, which <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> compliance <span class=\"keyword\">with</span> <span class=\"keyword\">section</span> <span class=\"number\">3.3</span><span class=\"number\">.2</span> <span class=\"keyword\">of</span> the Apple Developer Program License Agreement <span class=\"keyword\">and</span> App <span class=\"keyword\">Store</span> Review Guideline <span class=\"number\">2.5</span><span class=\"number\">.2</span>. This code, combined <span class=\"keyword\">with</span> a remote <span class=\"keyword\">resource</span>, can facilitate significant changes <span class=\"keyword\">to</span> your app’s behavior compared <span class=\"keyword\">to</span> <span class=\"keyword\">when</span> it was <span class=\"keyword\">initially</span> reviewed <span class=\"keyword\">for</span> the App Store. <span class=\"keyword\">While</span> you may <span class=\"keyword\">not</span> be <span class=\"keyword\">using</span> this functionality currently, it has the potential <span class=\"keyword\">to</span> <span class=\"keyword\">load</span> <span class=\"keyword\">private</span> frameworks, <span class=\"keyword\">private</span> methods, <span class=\"keyword\">and</span> <span class=\"keyword\">enable</span> future feature changes. </div><div class=\"line\"></div><div class=\"line\">This includes <span class=\"keyword\">any</span> code which passes arbitrary <span class=\"keyword\">parameters</span> <span class=\"keyword\">to</span> dynamic methods such <span class=\"keyword\">as</span> dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), <span class=\"keyword\">and</span> running remote scripts <span class=\"keyword\">in</span> <span class=\"keyword\">order</span> <span class=\"keyword\">to</span> <span class=\"keyword\">change</span> app behavior <span class=\"keyword\">or</span> <span class=\"keyword\">call</span> SPI, based <span class=\"keyword\">on</span> the <span class=\"keyword\">contents</span> <span class=\"keyword\">of</span> the downloaded script. Even <span class=\"keyword\">if</span> the remote <span class=\"keyword\">resource</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> intentionally malicious, it could easily be hijacked via a Man <span class=\"keyword\">In</span> The Middle (MiTM) attack, which can pose a serious <span class=\"keyword\">security</span> vulnerability <span class=\"keyword\">to</span> <span class=\"keyword\">users</span> <span class=\"keyword\">of</span> your app.</div><div class=\"line\"></div><div class=\"line\">Please perform an <span class=\"keyword\">in</span>-<span class=\"keyword\">depth</span> review <span class=\"keyword\">of</span> your app <span class=\"keyword\">and</span> remove <span class=\"keyword\">any</span> code, frameworks, <span class=\"keyword\">or</span> SDKs that fall <span class=\"keyword\">in</span> line <span class=\"keyword\">with</span> the functionality described above <span class=\"keyword\">before</span> submitting the <span class=\"keyword\">next</span> <span class=\"keyword\">update</span> <span class=\"keyword\">for</span> your app <span class=\"keyword\">for</span> review.</div><div class=\"line\"></div><div class=\"line\">Best regards,</div><div class=\"line\"></div><div class=\"line\">App <span class=\"keyword\">Store</span> Review</div></pre></td></tr></table></figure>\n<p>说最新协议中，不允许使用<code>动态下发</code>功能，说这个有安全问题。</p>\n<p>不明觉厉，苹果要禁止<code>热更新</code>？上年刚刚根据需求整合进去 <code>JSPatch</code>，今年就被禁用了。无语中。。。</p>\n<p>想起一年前 2016 年初 <a href=\"http://blog.cnbang.net/internet/2990/\" target=\"_blank\" rel=\"external\">JSPatch 安全问题</a> 。</p>\n<p>现在看样子苹果真的要下狠心禁用热更新了。</p>\n<p>打开 github <a href=\"https://github.com/bang590/JSPatch/issues/746\" target=\"_blank\" rel=\"external\">JSPatch/issues/746</a> 和 <a href=\"https://github.com/facebook/react-native/issues/12778\" target=\"_blank\" rel=\"external\">react-native/issues/12778</a>。有很多人对这个话题已经炒炸锅了，尤其是在 JSPatch 中。</p>\n<p>看到不少人说 <code>React Native</code> 要被禁用了，而发出阵阵欢呼！</p>\n<p>但是我个人感觉，从苹果给的邮件可以看出他并不是针对 <code>React Native</code> 的，而是针对热更新的禁止。苹果一直希望上架的应用的<code>可控性</code>。但是热更新打破了这个事件。一些开发者，通过苹果审核上架后，通过动态下发新的功能，从而<code>避过</code>审核，调用私有 API 。这种行为是苹果严厉禁止的。</p>\n<p>个人感觉热更新是个在移动端多年开发中的一个很不错的产物，通过这个功能可以加快对代码 中 bug 的解决速率，可以避免由于一个小小的问题而引起重新上架问题。而且苹果以前<code>上架很慢</code>，导致各公司很头痛，现在好多了。先不说上架慢这个问题，上架以后用户要更新吧，三两天一上架，那么就会提醒用户更新 App，这必然影响用户的体验。</p>\n<p>当然我们公司的 App，并不会有这么快的上架频率，尽量将 bug 扼杀在开发、测试和预生产环节。这就要求公司的一些强大正规的开发体系支持了。对于小公司而言就没办法了，热更新对他们带来的方便是难以替代的。</p>\n<p>但是苹果的性格大家都知道，说不能用就不能用。</p>\n<p>对此我的态度是静观其变吧。</p>\n<p><strong><em>更新 2017-3-9</em></strong></p>\n<p>这里是 bang 对这个问题的回复：</p>\n<p><a href=\"http://blog.cnbang.net/internet/3374/\" target=\"_blank\" rel=\"external\">关于苹果警告</a></p>\n<p>这里是集成热更新的三方框架的处理情况汇总，大家可以看着排除一下，如果有用到那些可以及时更新。</p>\n<p><a href=\"https://github.com/bang590/JSPatch/issues/751\" target=\"_blank\" rel=\"external\">三方框架处理进展</a></p>\n<p>还是老老实实去除 JSPatch。</p>\n","categories":["iOS"],"tags":["JSPatch","热更新","iOS"]},{"title":"URL Encode","url":"https://fandyliu.github.io/2017/02/07/iOS/URLEncode/","content":"<p><img src=\"http://img.okbao.com/uploads/150225/247-15022504315KN.jpg\"></p>\n<p><strong>URL 编码</strong>这个名词相信我们并不陌生，简单来说就是将一些<code>字符</code>转化为 <code>“% + ASCII（16进制表示）”</code> 的形式。</p>\n<p>在开发中经常会遇到一些 URL 里面，有一些<code>特殊的字符</code>比如 ‘&amp;’、‘?’ 等等。由于这些字符在 URL 语法中有特殊含义，因此要对其进行 <code>Encode</code>。比如：在 1 个键值对中含有 &amp; ，name=<em><code>fan&amp;dy=aa</code></em> 注意这里是 1 个键值对，只是值中有 &amp; 和 = 所以我们要对 value 进行 URL 编码，转换为 name=<em>fan%26dy%3Daa</em>。</p>\n<p>当然还有一种常见的情况就是在我们开发中对参数进行加密传输的时候，难免会出现一些特殊字符。比如 Base64 加密结果中的 ‘/’、‘=’ 等等。这个时候就要对其进行 URL 编码了。</p>\n<a id=\"more\"></a>\n<p><strong><em>下面对 encode URL 进行总结：</em></strong></p>\n<h2 id=\"在-Objective-C-中\"><a href=\"#在-Objective-C-中\" class=\"headerlink\" title=\"在 Objective-C 中\"></a>在 Objective-C 中</h2><h3 id=\"iOS-9-0-前\"><a href=\"#iOS-9-0-前\" class=\"headerlink\" title=\"iOS 9.0 前\"></a>iOS 9.0 前</h3><ul>\n<li><strong><em>CFURLCreateStringByAddingPercentEscapes</em></strong></li>\n</ul>\n<p>我们经常对 URL 采用 <a href=\"https://developer.apple.com/reference/corefoundation/1542665-cfurlcreatestringbyaddingpercent?language=objc\" target=\"_blank\" rel=\"external\">CFURLCreateStringByAddingPercentEscapes</a> 函数进行 <code>encode</code> 处理。</p>\n<p>这里是在 AFN 中对其的静态函数的封装：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> * AFPercentEscapedQueryStringPairMemberFromStringWithEncoding(<span class=\"built_in\">NSString</span> *string, <span class=\"built_in\">NSStringEncoding</span> encoding) &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> kAFCharactersToBeEscaped = <span class=\"string\">@\":/?&amp;=;+!@#$()~',*\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> kAFCharactersToLeaveUnescaped = <span class=\"string\">@\"[].\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">NSString</span> *)<span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                 (__bridge <span class=\"built_in\">CFStringRef</span>)string,</div><div class=\"line\">                                                                                 (__bridge <span class=\"built_in\">CFStringRef</span>)kAFCharactersToLeaveUnescaped,</div><div class=\"line\">                                                                                 (__bridge <span class=\"built_in\">CFStringRef</span>)kAFCharactersToBeEscaped,</div><div class=\"line\">                                                                                 <span class=\"built_in\">CFStringConvertNSStringEncodingToEncoding</span>(encoding)));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>CFURLCreateStringByReplacingPercentEscapes</em></strong></li>\n</ul>\n<p>我们也可以用 <a href=\"https://developer.apple.com/reference/corefoundation/1542938-cfurlcreatestringbyreplacingperc\" target=\"_blank\" rel=\"external\">CFURLCreateStringByReplacingPercentEscapes</a> 或  <a href=\"https://developer.apple.com/reference/corefoundation/1541974-cfurlcreatestringbyreplacingperc?language=objc\" target=\"_blank\" rel=\"external\">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</a> 函数对 URL 进行 <code>decode</code> 处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CFStringRef</span> originalURLString = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"fan%25dy=aa\"</span>);</div><div class=\"line\"><span class=\"built_in\">NSString</span> *preprocessedString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                                         originalURLString,</div><div class=\"line\">                                                                                                         <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"\"</span>),</div><div class=\"line\">                                                                                                         kCFStringEncodingUTF8));</div></pre></td></tr></table></figure>\n<p>这个是对上面函数第三个参数的描述：</p>\n<blockquote>\n<p> Pass NULL to specify that no percent escapes be replaced, or the empty string (CFSTR(“”)) to specify that all be replaced.</p>\n</blockquote>\n<p>这两个方法通常会在什么情况下<code>使用</code>呢？要对一个<code>一半已经进行了 URL encode</code> 而有部分却没有。因此直接进行 encode 的话会将 ‘%’ 转换为 ‘%25’ 导致错误，所以要<code>先进行 decode 再进行 encode</code>。如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CFStringRef</span> originalURLString = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"fan%25dy=aa\"</span>);</div><div class=\"line\"><span class=\"comment\">// 先 decode 预处理</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *preprocessedString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                                         originalURLString,</div><div class=\"line\">                                                                                                         <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"\"</span>),</div><div class=\"line\">                                                                                                         kCFStringEncodingUTF8));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 再 encode 处理</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *preprocessedUrlString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                            (__bridge <span class=\"built_in\">CFStringRef</span>)preprocessedString,</div><div class=\"line\">                                                                                            <span class=\"literal\">NULL</span>,</div><div class=\"line\">                                                                                            <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"?!@#$^&amp;%*+,:;='\\\"`&lt;&gt;()[]&#123;&#125;/\\\\| \"</span>),</div><div class=\"line\">                                                                                            kCFStringEncodingUTF8));</div><div class=\"line\"><span class=\"comment\">// 直接encode</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *urlString = <span class=\"built_in\">CFBridgingRelease</span>(<span class=\"built_in\">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class=\"line\">                                                                                originalURLString,</div><div class=\"line\">                                                                                <span class=\"literal\">NULL</span>,</div><div class=\"line\">                                                                                <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"?!@#$^&amp;%*+,:;='\\\"`&lt;&gt;()[]&#123;&#125;/\\\\| \"</span>),</div><div class=\"line\">                                                                                kCFStringEncodingUTF8));</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"preprocessedString = %@\"</span>, preprocessedString); <span class=\"comment\">//  预处理 decode 结果=&gt; fan%dy=aa</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"preprocessedUrlString = %@\"</span>, preprocessedUrlString); <span class=\"comment\">// 先 decode 再 encode 结果 =&gt; fan%25dy%3Daa</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"urlString = %@\"</span>, urlString); <span class=\"comment\">// 直接 encode 结果 =&gt; fan%2525dy%3Daa</span></div></pre></td></tr></table></figure>\n<h3 id=\"iOS-9-0-后\"><a href=\"#iOS-9-0-后\" class=\"headerlink\" title=\"iOS 9.0 后\"></a>iOS 9.0 后</h3><p><strong><code>上面的方法大多数在 iOS 9 的时候被废弃了，OC 提供了一些新的方法来替代。</code></strong></p>\n<ul>\n<li><strong><em>stringByAddingPercentEncodingWithAllowedCharacters</em></strong></li>\n</ul>\n<p><em>使用系统提供的 CharacterSet 来 encode URL</em></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *originalString = <span class=\"string\">@\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSCharacterSet</span> *customAllowedSet = [<span class=\"built_in\">NSCharacterSet</span> URLQueryAllowedCharacterSet];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *encodedUrl = [originalString stringByAddingPercentEncodingWithAllowedCharacters:customAllowedSet];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"encodedUrl = %@\"</span>, encodedUrl);</div></pre></td></tr></table></figure>\n<p><em>使用自定义的 CharacterSet 来 encode URL</em></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *originalString = <span class=\"string\">@\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSCharacterSet</span> *customAllowedSet = [[<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\" \\\"#%&lt;&gt;[\\\\]^`&#123;|&#125;\"</span>] invertedSet];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *encodedUrl = [originalString stringByAddingPercentEncodingWithAllowedCharacters:customAllowedSet];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"encodedUrl = %@\"</span>, encodedUrl);</div></pre></td></tr></table></figure>\n<h2 id=\"在-Swift-中\"><a href=\"#在-Swift-中\" class=\"headerlink\" title=\"在 Swift 中\"></a>在 Swift 中</h2><p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1496601674738&di=834a14e6470507ca7d96bbb8eb4c0d67&imgtype=0&src=http%3A%2F%2Fi.dimg.cc%2F8c%2F8b%2F2b%2F97%2F24%2Ff6%2F0c%2F2a%2F4b%2F15%2Fe5%2Fdc%2F0a%2Fde%2F3a%2Fb9.jpg\" width=\"100%\"></p>\n<p>当然这么<code>老掉牙</code>的东西现在总结，主要还是整理一下她在 <code>Swift</code> 中的使用：</p>\n<ul>\n<li><strong><em>使用系统提供的 CharacterSet 来 encode URL</em></strong></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> originalString = <span class=\"string\">\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> escapedString = originalString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)</div><div class=\"line\"><span class=\"built_in\">print</span>(escapedString ?? <span class=\"string\">\"error\"</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>使用自定义的 CharacterSet 来 encode URL</em></strong></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> originalString = <span class=\"string\">\"https://fandyliu.github.io/2016/12/02/Xcode提交构建版本时“此构建版本无效”问题/\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> customAllowedSet = <span class=\"type\">CharacterSet</span>(charactersIn: <span class=\"string\">\" \\\"#%&lt;&gt;[\\\\]^`&#123;|&#125;\"</span>).inverted</div><div class=\"line\"><span class=\"keyword\">let</span> escapedString = originalString.addingPercentEncoding(withAllowedCharacters: customAllowedSet)</div><div class=\"line\"><span class=\"built_in\">print</span>(escapedString ?? <span class=\"string\">\"error\"</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>系统中提供 CharacterSet 的诸多值</em></strong></li>\n</ul>\n<p><strong>注意：</strong>最外层 ‘’ 是为了区分内容，不是 Characters，且在 ‘’ 中注意有个<code>空格字符</code>，</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">      CharacterSet                    Inverted Characters</div><div class=\"line\">CharacterSet<span class=\"selector-class\">.urlQueryAllowed</span>          <span class=\"string\">' \"#%&lt;&gt;[\\]^`&#123;|&#125;'</span> </div><div class=\"line\">CharacterSet<span class=\"selector-class\">.urlHostAllowed</span>           <span class=\"string\">' \"#%/&lt;&gt;?@\\^`&#123;|&#125;'</span></div><div class=\"line\">CharacterSet<span class=\"selector-class\">.urlPathAllowed</span>           <span class=\"string\">' \"#%;&lt;&gt;?[\\]^`&#123;|&#125;'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Print-CharacterSet-的字符\"><a href=\"#Print-CharacterSet-的字符\" class=\"headerlink\" title=\"Print CharacterSet 的字符\"></a>Print CharacterSet 的字符</h3><p>我们可以通过这个方法来<code>打印</code>系统中 CharacterSet 的 <code>characters</code>。（注意有些是带<code>空格</code>的）</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printCharacters</span><span class=\"params\">(<span class=\"keyword\">in</span> <span class=\"keyword\">set</span>: CharacterSet)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> characters = <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">let</span> iSet = <span class=\"keyword\">set</span>.inverted</div><div class=\"line\">    <span class=\"keyword\">for</span> i: <span class=\"type\">UInt32</span> <span class=\"keyword\">in</span> <span class=\"number\">32</span>..&lt;<span class=\"number\">127</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> <span class=\"built_in\">c</span> = <span class=\"type\">UnicodeScalar</span>(i)!</div><div class=\"line\">        <span class=\"keyword\">if</span> iSet.<span class=\"built_in\">contains</span>(<span class=\"built_in\">c</span>) &#123;</div><div class=\"line\">            characters += <span class=\"type\">String</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"'<span class=\"subst\">\\(characters)</span>'\"</span>) <span class=\"comment\">// 打印的时候加上了''</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["URL","Encode"]},{"title":"Xcode 提交构建版本时 “此构建版本无效” 问题","url":"https://fandyliu.github.io/2016/12/02/iOS/Xcode提交构建版本时“此构建版本无效”问题/","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28377211&auto=0&height=66\"></iframe>\n\n<p>今天在提交构建版本到 <code>appStore</code> 的时候遇到了 <code>“此构建版本无效”</code>的提示！好吧，那么现在就把之前和今天遇到这个提示的可能原因做一下总结！</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/quanxian.jpg\" width=\"100%\"></p>\n<a id=\"more\"></a>\n<h2 id=\"隐私权限描述不能没有内容\"><a href=\"#隐私权限描述不能没有内容\" class=\"headerlink\" title=\"隐私权限描述不能没有内容\"></a>隐私权限描述不能没有内容</h2><p>从 <code>iOS10</code> 开始，苹果对用户的<code>安全与隐私</code>的保护进行了加强。在用到隐私权限的时候，需要在 <code>info.plist</code> 里面添加相应的权限描述。但是在之前则依旧会使用系统的权限通知框。</p>\n<p><strong>注意</strong>：如果你提交的应用里面只添加了权限，而<code>没有后面的描述</code>，就会造成”此构建版本无效“的问题，所以一定要把 key 和 value 都加上。</p>\n<p>具体的权限设置可以参考 </p>\n<p>当然苹果也会给你发来一封邮件，邮件内容如下：<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dear developer,</div><div class=\"line\">We have discovered one <span class=\"keyword\">or</span> more issues <span class=\"keyword\">with</span> your recent delivery <span class=\"keyword\">for</span> <span class=\"string\">\"E+ 实名认证\"</span>. <span class=\"keyword\">To</span> process your delivery, the following issues must be corrected:</div><div class=\"line\">This app attempts <span class=\"keyword\">to</span> access privacy-sensitive data without a usage description. The app<span class=\"comment\">'s Info.plist must contain an NSPhotoLibraryUsageDescription key with a string value explaining to the user how the app uses this data.</span></div><div class=\"line\">This app attempts <span class=\"keyword\">to</span> access privacy-sensitive data without a usage description. The app<span class=\"comment\">'s Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.</span></div><div class=\"line\">Once these issues have been corrected, you can <span class=\"keyword\">then</span> redeliver the corrected <span class=\"keyword\">binary</span>.</div><div class=\"line\">Regards,</div><div class=\"line\">The App Store team</div></pre></td></tr></table></figure></p>\n<h2 id=\"苹果私有-API-的调用\"><a href=\"#苹果私有-API-的调用\" class=\"headerlink\" title=\"苹果私有 API 的调用\"></a>苹果私有 API 的调用</h2><p>苹果同样也会给你发送邮件，注意查收一下。然后按邮件的提示进行问题的排查。如果你没有<code>主动调用私有 API</code> 的话，大部分情况下是由于程序当中的<code>第三方 SDK</code> 引起的。如果出现相应问题，可以<code>重新</code>向 SDK 供应商要一个没有调用苹果私有 API 的 SDK 。</p>\n<p>如果没有收到邮件，也不要着急。道理是一样的，调用了私有 API。可以<code>逐个排除第三方SDK</code>，也可以<code>询问他们的客服</code>，毕竟不只是你一个人在用他们的SDK，因此说不一定有意外的收获。</p>\n<p>目前来说支付宝和微信并没发现这个问题。</p>\n<p><a href=\"http://blog.csdn.NET/nb_token/article/details/52636492\" target=\"_blank\" rel=\"external\">网上有遇到环信的 info.plist 文件问题的（听说删除就Ok了）</a></p>\n<p><a href=\"http://blog.csdn.Net/wsyx768/article/details/52538628\" target=\"_blank\" rel=\"external\">讯飞人脸识别问题的</a></p>\n<p><strong><em> 在 Swift 项目中的一些问题：</em></strong></p>\n<p><a href=\"http://www.jianshu.com/p/c0ff07895c02\" target=\"_blank\" rel=\"external\">OC 中用 Swift 代码又删去</a></p>\n<p><a href=\"http://stackoverflow.com/questions/26163856/invalid-swift-support-invalid-implementation-of-swift\" target=\"_blank\" rel=\"external\">Invalid Swift Support / invalid implementation of swift</a></p>\n<h2 id=\"网络问题\"><a href=\"#网络问题\" class=\"headerlink\" title=\"网络问题\"></a>网络问题</h2><p>当出现了类似下边图片的错误时，那么很大可能就是网络的问题了！</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/wangluo.jpg\" width=\"100%\"></p>\n<p>可以尝试重新提交几次，如果仍未解决可以尝试<code>等一段时间</code>后再进行提交，毕竟有可能是苹果服务器出 Bug。<em>（可以在 iOS 交流群问问看看别人怎样，毕竟曾经我遇到过这种情况）</em></p>\n","categories":["iOS"],"tags":["Xcode","构建版本"]},{"title":"网络缓存","url":"https://fandyliu.github.io/2016/11/15/iOS/网络缓存/","content":"<p>最近开发中遇到了一个网络缓存问题，在与 H5 交互的时候当创建 <code>NSURLRequest</code> 的时候调用 <code>requestWithURL: cachePolicy: timeoutInterval:</code> 这个方法设置缓存策略为默认的策略 <code>NSURLRequestUseProtocolCachePolicy</code>。 但当时调试与 H5 进行交互的一些 js 代码的时候， 修改 js 代码，手机 webView 访问没有变化，但是用浏览器打开 H5 界面确没有问题。最终发现是由于网络缓存问题，在这里简单总结一下缓存策略。<br><a id=\"more\"></a></p>\n<p>使用缓存的目的是为了使用的应用程序能更快速的响应用户输入，是程序高效的运行。有时候我们需要将远程web服务器获取的数据缓存起来，减少对同一个url多次请求。</p>\n<p>内存缓存我们可以使用 sdk 中的 NSURLCache 类。NSURLRequest 需要一个缓存参数来说明它请求的 url 何如缓存数据的，我们先看下它的 CachePolicy 类型。</p>\n<h2 id=\"NSURLRequestCachePolicy\"><a href=\"#NSURLRequestCachePolicy\" class=\"headerlink\" title=\"NSURLRequestCachePolicy\"></a>NSURLRequestCachePolicy</h2><h3 id=\"NSURLRequestUseProtocolCachePolicy-0\"><a href=\"#NSURLRequestUseProtocolCachePolicy-0\" class=\"headerlink\" title=\"NSURLRequestUseProtocolCachePolicy = 0\"></a>NSURLRequestUseProtocolCachePolicy = 0</h3><p>默认的缓存策略， 如果缓存不存在，直接从服务端获取。如果缓存存在，会根据response中的Cache-Control字段判断下一步操作，如: Cache-Control字段为must-revalidata，则询问服务端该数据是否有更新，无更新的话直接返回给用户缓存数据，若已更新，则请求服务端</p>\n<h3 id=\"NSURLRequestReloadIgnoringLocalCacheData-1\"><a href=\"#NSURLRequestReloadIgnoringLocalCacheData-1\" class=\"headerlink\" title=\"NSURLRequestReloadIgnoringLocalCacheData = 1\"></a>NSURLRequestReloadIgnoringLocalCacheData = 1</h3><p>忽略本地缓存数据，直接请求服务端。</p>\n<h3 id=\"NSURLRequestReloadIgnoringLocalAndRemoteCacheData-4-Unimplemented\"><a href=\"#NSURLRequestReloadIgnoringLocalAndRemoteCacheData-4-Unimplemented\" class=\"headerlink\" title=\"NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4 (Unimplemented)\"></a>NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4 (<em>Unimplemented</em>)</h3><p>忽略本地缓存，代理服务器以及其他中介，直接请求源服务端。</p>\n<h3 id=\"NSURLRequestReloadIgnoringCacheData-NSURLRequestReloadIgnoringLocalCacheData\"><a href=\"#NSURLRequestReloadIgnoringCacheData-NSURLRequestReloadIgnoringLocalCacheData\" class=\"headerlink\" title=\"NSURLRequestReloadIgnoringCacheData = NSURLRequestReloadIgnoringLocalCacheData\"></a>NSURLRequestReloadIgnoringCacheData = NSURLRequestReloadIgnoringLocalCacheData</h3><p>忽略本地缓存数据</p>\n<h3 id=\"NSURLRequestReturnCacheDataElseLoad-2\"><a href=\"#NSURLRequestReturnCacheDataElseLoad-2\" class=\"headerlink\" title=\"NSURLRequestReturnCacheDataElseLoad = 2\"></a>NSURLRequestReturnCacheDataElseLoad = 2</h3><p>有缓存就使用，不管其有效性(即忽略Cache-Control字段)， 无则请求服务端。</p>\n<h3 id=\"NSURLRequestReturnCacheDataDontLoad-3\"><a href=\"#NSURLRequestReturnCacheDataDontLoad-3\" class=\"headerlink\" title=\"NSURLRequestReturnCacheDataDontLoad = 3\"></a>NSURLRequestReturnCacheDataDontLoad = 3</h3><p>死活加载本地缓存。 没有就失败。 (确定当前无网络时使用)</p>\n<h3 id=\"NSURLRequestReloadRevalidatingCacheData-5-Unimplemented\"><a href=\"#NSURLRequestReloadRevalidatingCacheData-5-Unimplemented\" class=\"headerlink\" title=\"NSURLRequestReloadRevalidatingCacheData = 5 (Unimplemented)\"></a>NSURLRequestReloadRevalidatingCacheData = 5 (<em>Unimplemented</em>)</h3><p>缓存数据必须得得到服务端确认有效才使用(貌似是NSURLRequestUseProtocolCachePolicy中的一种情况)</p>\n<h2 id=\"HTTP-缓存语义\"><a href=\"#HTTP-缓存语义\" class=\"headerlink\" title=\"HTTP 缓存语义\"></a>HTTP 缓存语义</h2><p>HTTP 请求和回应用 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\" target=\"_blank\" rel=\"external\">headers</a> 来交换元数据，如字符编码、MIME 类型和缓存指令等。</p>\n<h3 id=\"Request-Cache-Headers\"><a href=\"#Request-Cache-Headers\" class=\"headerlink\" title=\"Request Cache Headers\"></a>Request Cache Headers</h3><p><em>在默认情况下，NSURLRequest 会用当前时间决定是否返回缓存的数据。为了更精确地控制，允许使用以下请求头：</em></p>\n<ul>\n<li>If-Modified-Since - 这个请求头与 Last-Modified 回应头相对应。把这个值设为同一终端最后一次请求时返回的 Last-Modified 字段的值。</li>\n<li>If-None-Match - 这个请求头与 Etag 回应头相对应。使用同一终端最后一次请求的 Etag 值。</li>\n</ul>\n<h3 id=\"Response-Cache-Headers\"><a href=\"#Response-Cache-Headers\" class=\"headerlink\" title=\"Response Cache Headers\"></a>Response Cache Headers</h3><p><em>NSHTTPURLResponse 包含多个 HTTP 头，当然也包括以下指令来说明回应应当如何缓存：</em></p>\n<ul>\n<li>Cache-Control - 这个头必须由服务器端指定以开启客户端的 HTTP 缓存功能。这个头的值可能包含 max-age（缓存多久），是公共 public 还是私有 private，或者不缓存 no-cache 等信息。详情请参阅 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\" target=\"_blank\" rel=\"external\">Cache-Control section of RFC 2616</a>。</li>\n</ul>\n<p><em>除了 Cache-Control 以外，服务器也可能发送一些附加的头用于根据需要有条件地请求：</em></p>\n<ul>\n<li>Last-Modified - 这个头的值表明所请求的资源上次修改的时间。例如，一个客户端请求最近照片的时间线，/photos/timeline，Last-Modified 的值可以是最近一张照片的拍摄时间。</li>\n<li>Etag - 这是 “entity tag” 的缩写，它是一个表示所请求资源的内容的标识符。在实践中，Etag 的值可以是类似于资源的 MD5 之类的东西。这对于那些动态生成的、可能没有明显的 Last-Modified 值的资源非常有用。</li>\n</ul>\n<h2 id=\"NSURLCache\"><a href=\"#NSURLCache\" class=\"headerlink\" title=\"NSURLCache\"></a>NSURLCache</h2><p>NSURLCache 为您的应用的 URL 请求提供了内存中以及磁盘上的综合缓存机制。也就是 NSURLRequest，然后根据我们设置的NSURLCache策略进行相应的缓存.</p>\n<p>当一个请求完成下载来自服务器的回应，一个缓存的回应将在本地保存。下一次同一个请求再发起时，本地保存的回应就会马上返回，不需要连接服务器。NSURLCache 会<code>自动</code>且<code>透明</code>地返回回应。</p>\n<p>为了好好利用 NSURLCache，你需要初始化并设置一个共享的 URL 缓存。在 <code>-application:didFinishLaunchingWithOptions:</code> 中来设置内存缓存与磁盘缓存.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURLCache</span> *urlCache = [[<span class=\"built_in\">NSURLCache</span> alloc] initWithMemoryCapacity:<span class=\"number\">4</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span> diskCapacity:<span class=\"number\">20</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span> diskPath:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">[<span class=\"built_in\">NSURLCache</span> setSharedURLCache:urlCache];</div></pre></td></tr></table></figure>\n<p>缓存策略由请求（客户端）和回应（服务端）分别指定。理解这些策略以及它们如何相互影响，是为您的应用程序找到最佳行为的关键。</p>\n<p>在 NSURLRequestCachePolicy 缓存策略中,默认策略是 UseProtocolCachePolicy 从字面上来看是说，使用协议缓存策略，但是什么是协议缓存策略呢？<br>在HTTP协议的response头中，有一个字段是cache-control，由服务器来告诉客户端如何使用缓存。<br>下面是一个response头<br><img src=\"/2016/11/15/iOS/网络缓存/Header.png\" alt=\"\"></p>\n<p>可以看到cache-control指定的行为是public,max-age=5<br>这里先介绍一下各种指令</p>\n<p><img src=\"/2016/11/15/iOS/网络缓存/Cache_directive.png\" alt=\"\"></p>\n<p>对应上表，可以看出了刚才响应头是要求缓存所有内容，缓存5秒失效，5秒后还要请求远程服务器。<br>对应PHP就是header(“Cache-Control:public,max-age=5”);</p>\n<h2 id=\"本地缓存\"><a href=\"#本地缓存\" class=\"headerlink\" title=\"本地缓存\"></a>本地缓存</h2><p>打开沙盒，发现在 Library/Caches 下面有三个文件<br><img src=\"/2016/11/15/iOS/网络缓存/Cache.png\" alt=\"\"><br>这不就是sqlite么！原来NSURLCache帮我们用sqlite将请求存入了数据库，然后当有相同请求时就会调用缓存！<br>可以想到webView如果加载一个静态页面不用只用请求一次，并且在效果要更新的时候远程请求会有多爽！</p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h2><h3 id=\"URL-Loading-System-默认只支持如下5中协议\"><a href=\"#URL-Loading-System-默认只支持如下5中协议\" class=\"headerlink\" title=\"URL Loading System 默认只支持如下5中协议:\"></a>URL Loading System 默认只支持如下5中协议:</h3><p>其中只有<a href=\"http://和https://才有缓存策略。\" target=\"_blank\" rel=\"external\">http://和https://才有缓存策略。</a></p>\n<ul>\n<li>http://</li>\n<li>https://</li>\n<li>ftp://</li>\n<li>file://</li>\n<li>data://</li>\n</ul>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接:\"></a>链接:</h3><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i\" target=\"_blank\" rel=\"external\">About the URL Loading System</a></p>\n","categories":["iOS"],"tags":["网络","缓存","NSURLRequestCachePolicy","NSURLCache"]},{"title":"在 iOS 10 中如何跳转到系统设置页面？","url":"https://fandyliu.github.io/2016/10/27/iOS/iOS10跳转系统设置页面/","content":"<h2 id=\"跳转问题\"><a href=\"#跳转问题\" class=\"headerlink\" title=\"跳转问题\"></a>跳转问题</h2><p>最近在适配 <code>iOS 10</code> 的时候，发现自己 app 在 iOS 10 系统下跳转到<code>设置</code>页面的时候并不会有任何跳转反应而打印出一些错误提示。但是在 iOS 9 及其以下版本并不会有这种情况。</p>\n<a id=\"more\"></a>\n<ul>\n<li><strong>跳转代码如下：</strong></li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"prefs:root=MOBILE_DATA_SETTINGS_ID\"</span>];</div><div class=\"line\"><span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIApplication</span> sharedApplication] canOpenURL:url])</div><div class=\"line\">&#123;</div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:url];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>错误打印如下：</strong></li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-<span class=\"string\">canOpenURL:</span> failed <span class=\"keyword\">for</span> <span class=\"string\">URL:</span> <span class=\"string\">\"prefs:root=MOBILE_DATA_SETTINGS_ID\"</span> - <span class=\"string\">error:</span> <span class=\"string\">\"The operation couldn’t be completed. (OSStatus error -10814.)\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"查阅实验\"><a href=\"#查阅实验\" class=\"headerlink\" title=\"查阅实验\"></a>查阅实验</h2><p>初始通过搜索查阅发现有很多人的文章是这样子说的：</p>\n<blockquote>\n<p>在iOS 9中，隐私控制已禁止开发者通过openURL:方法查询设备上是否安装了哪些APP应用。苹果禁止开发者查询设备上是否安装了某款APP。</p>\n</blockquote>\n<p>如在 <a href=\"http://www.cocoachina.com/ios/20161024/17824.html\" target=\"_blank\" rel=\"external\">iOS10适配：被弃用的openURL</a> 一文中。</p>\n<p>但是通过在 <a href=\"http://stackoverflow.com\" target=\"_blank\" rel=\"external\">stackoverflow</a> 的搜索与自我研究实验最终发现并非如此。</p>\n<h2 id=\"结论分析\"><a href=\"#结论分析\" class=\"headerlink\" title=\"结论分析\"></a>结论分析</h2><p>其实在 iOS 10 中我们是可以通过 <code>canOpenURL:</code> 方法查询设备上是否安装了那 app 应用。只不过是 URL 的 scheme 有所变化。</p>\n<p>iOS 10 把之前 <code>prefs</code> 开头的 <code>URL Schemes</code> 改成了 <code>Prefs</code> 开头，同样类似的还有 <code>Mobilephone://</code> <code>Clock-alarm://</code> <code>Photos://</code> 等等（后面对其有总结）。把这个改好后在 <code>Widget</code> 里面确实可以使用了，但是在 <code>app</code> 中使用的时候依据会报如上类似的错误。这个时候需要在前面加上 <code>App-</code> 这是奇迹就发生了。</p>\n<ul>\n<li><strong>示例代码</strong></li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"App-Prefs:root=MOBILE_DATA_SETTINGS_ID\"</span>];</div><div class=\"line\"><span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIApplication</span> sharedApplication] canOpenURL:url])</div><div class=\"line\">&#123;</div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:url];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"些许扩展\"><a href=\"#些许扩展\" class=\"headerlink\" title=\"些许扩展\"></a>些许扩展</h2><h3 id=\"UIApplicationOpenSettingsURLString\"><a href=\"#UIApplicationOpenSettingsURLString\" class=\"headerlink\" title=\"UIApplicationOpenSettingsURLString\"></a>UIApplicationOpenSettingsURLString</h3><p>以前打开设置页面大多是通过这种方式打开，但是现在最低适配已经到 iOS 8 了这意味着什么? iOS 8 以前版本不用适配了。停止心中的喜悦，回归正题，其实在 iOS 8.0 的时候就推出了一种跳转到 <code>app 自己设置页面</code>的一个 String 那就是 <code>UIApplicationOpenSettingsURLString</code> 我们可以通过</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:[<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"built_in\">UIApplicationOpenSettingsURLString</span>]];</div></pre></td></tr></table></figure>\n<p>来实现跳转到<code>本应用</code>的设置界面进行设置。</p>\n<h3 id=\"openURL-options-completionHandler\"><a href=\"#openURL-options-completionHandler\" class=\"headerlink\" title=\"openURL:options:completionHandler:\"></a>openURL:options:completionHandler:</h3><p>在查看 openURL: 方法的时候无意中发现他已经被废弃了，而用另一个方法所代替。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)openURL:(<span class=\"built_in\">NSURL</span>*)url </div><div class=\"line\"><span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0, <span class=\"number\">10</span>_0, </div><div class=\"line\"><span class=\"string\">\"Please use openURL:options:completionHandler: instead\"</span>) <span class=\"built_in\">NS_EXTENSION_UNAVAILABLE_IOS</span>(<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<p>那么 <code>openURL:options:completionHandler:</code> 这个方法怎样使用呢？<br>在官方文档 <a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html\" target=\"_blank\" rel=\"external\">iOS UIKit</a> 部分中介绍到</p>\n<blockquote>\n<p>The new UIApplication method openURL:options:completionHandler:, which is executed asynchronously and calls the specified completion handler on the main queue (this method replaces openURL:).</p>\n</blockquote>\n<p>意思就不解释了很容易理解</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:[<span class=\"built_in\">NSURL</span> URLWithString:str]</div><div class=\"line\"> options:@&#123;<span class=\"built_in\">UIApplicationOpenURLOptionUniversalLinksOnly</span>:@YES&#125;</div><div class=\"line\"> completionHandler:^(<span class=\"built_in\">BOOL</span> success) &#123;</div><div class=\"line\">   <span class=\"comment\">// 判断打开成功与否回调处理</span></div><div class=\"line\"> &#125;];</div></pre></td></tr></table></figure>\n<p> 这里对其简单的介绍，与 openURL: 功能类似，只是将 openURL: 返回的是否打开成功的布尔值写在回调中，并且添加了一个 options 参数，下面对 options 参数进行简单介绍。</p>\n<p> <code>options</code> 是一个 <code>NSDictionary&lt;NSString *, id&gt; *</code> 这个类型的字典，目前在 UIApplication 头文件中，可传入参数 Key 只有一个 <code>UIApplicationOpenURLOptionUniversalLinksOnly</code>，其对应的 Value 为布尔值封装的 <code>NSNumber</code> 对象，默认为 False。官方文档是这个样子说的</p>\n<blockquote>\n<p>the method opens the URL only if the URL is a valid universal link and there is an installed app capable of opening that URL. The value of this key is an NSNumber object containing a Boolean value.</p>\n</blockquote>\n<p> 也就是说只有在这个 URL 是<code>有效</code>，并且<code>安装了</code>该 app 的时候才能打开该 URL。否则就不能打开也就是回调的 success 的布尔值为 False，也就是不能通过Safari等其他应用来打开这个URL。</p>\n<h3 id=\"iOS-10-部分-Schemes\"><a href=\"#iOS-10-部分-Schemes\" class=\"headerlink\" title=\"iOS 10 部分 Schemes\"></a>iOS 10 部分 Schemes</h3><p>电池电量 Prefs:root=BATTERY_USAGE<br>通用设置 Prefs:root=General<br>存储空间 Prefs:root=General&amp;path=STORAGE_ICLOUD_USAGE/DEVICE_STORAGE<br>蜂窝数据 Prefs:root=MOBILE_DATA_SETTINGS_ID<br>Wi-Fi 设置 Prefs:root=WIFI<br>蓝牙设置 Prefs:root=Bluetooth<br>定位设置 Prefs:root=Privacy&amp;path=LOCATION<br>辅助功能 Prefs:root=General&amp;path=ACCESSIBILITY<br>关于手机 Prefs:root=General&amp;path=About<br>键盘设置 Prefs:root=General&amp;path=Keyboard<br>显示设置 Prefs:root=DISPLAY<br>声音设置 Prefs:root=Sounds<br>App Store 设置 Prefs:root=STORE<br>墙纸设置 Prefs:root=Wallpaper<br>打开电话 Mobilephone://<br>世界时钟 Clock-worldclock://<br>闹钟 Clock-alarm://<br>秒表 Clock-stopwatch://<br>倒计时 Clock-timer://<br>打开相册 Photos://  </p>\n<p><a href=\"http://www.jianshu.com/p/32ca4bcda3d1\" target=\"_blank\" rel=\"external\">iOS 10 以前的 URL schemes</a></p>\n","categories":["iOS"],"tags":["iOS 10","openURL","scheme"]},{"title":"Sequence 函数","url":"https://fandyliu.github.io/2016/10/01/iOS/Sequence函数/","content":"<p>有些在 swift 1.0 为函数到 swift 2.0 变为一个对象的方法，Swift 3.0 并没有什么大变化,现在对 Sequence 函数这些方法做个总结.</p>\n<a id=\"more\"></a>\n<h2 id=\"Sequence-contains\"><a href=\"#Sequence-contains\" class=\"headerlink\" title=\"Sequence.contains()\"></a>Sequence.contains()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 简单的实用</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">\"Swift\"</span>, <span class=\"string\">\"Objective-C\"</span>]</div><div class=\"line\"><span class=\"comment\">// ture</span></div><div class=\"line\">b.<span class=\"built_in\">contains</span>(<span class=\"string\">\"Swift\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. Swift 闭包和语法的灵活性</span></div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果数组中，有 3 的倍数，就返回 true</span></div><div class=\"line\">numbers.<span class=\"built_in\">contains</span> &#123; (element) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">if</span> element % <span class=\"number\">3</span> == <span class=\"number\">0</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 比如我们在维护一个图书列表，我们想知道这个列表中有没有图书有更新章节，可以用一个简单的模型来表示图书：</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> title: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> hasUpdate: <span class=\"type\">Bool</span> = <span class=\"literal\">false</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(title:<span class=\"type\">String</span>, hasUpdate:<span class=\"type\">Bool</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.title = title</div><div class=\"line\">        <span class=\"keyword\">self</span>.hasUpdate = hasUpdate</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 然后，我们就可以用 predicate 的方式来直接进行判断了，不在需要 for 循环了：</span></div><div class=\"line\"><span class=\"keyword\">var</span> bookList:[<span class=\"type\">Book</span>] = [<span class=\"type\">Book</span>]()</div><div class=\"line\">bookList.append(<span class=\"type\">Book</span>(title:<span class=\"string\">\"Objective-C\"</span>, hasUpdate:<span class=\"literal\">false</span>))</div><div class=\"line\">bookList.append(<span class=\"type\">Book</span>(title:<span class=\"string\">\"Cocoa\"</span>, hasUpdate:<span class=\"literal\">false</span>))</div><div class=\"line\">bookList.append(<span class=\"type\">Book</span>(title:<span class=\"string\">\"Swift\"</span>, hasUpdate:<span class=\"literal\">true</span>))</div><div class=\"line\"></div><div class=\"line\">bookList.<span class=\"built_in\">contains</span> &#123; (book: <span class=\"type\">Book</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> book.hasUpdate</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-enumerated\"><a href=\"#Sequence-enumerated\" class=\"headerlink\" title=\"Sequence.enumerated()\"></a>Sequence.enumerated()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> abc = [<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> (n, <span class=\"built_in\">c</span>) <span class=\"keyword\">in</span> abc.enumerated() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(n)</span>: '<span class=\"subst\">\\(<span class=\"built_in\">c</span>)</span>'\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0: '5'</span></div><div class=\"line\"><span class=\"comment\">// 1: '7'</span></div><div class=\"line\"><span class=\"comment\">// 2: '9'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (n, <span class=\"built_in\">c</span>) <span class=\"keyword\">in</span> <span class=\"string\">\"Swift\"</span>.characters.enumerated() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(n)</span>: '<span class=\"subst\">\\(<span class=\"built_in\">c</span>)</span>'\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"0: 'S'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"1: 'w'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"2: 'i'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"3: 'f'\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"4: 't'\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"Marie Curie\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstSpace = name.characters.index(of: <span class=\"string\">\" \"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> firstName = <span class=\"type\">String</span>(name.characters.<span class=\"keyword\">prefix</span>(upTo: firstSpace))</div><div class=\"line\">    <span class=\"built_in\">print</span>(firstName)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-sort\"><a href=\"#Sequence-sort\" class=\"headerlink\" title=\"Sequence.sort()\"></a>Sequence.sort()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> students: <span class=\"type\">Set</span> = [<span class=\"string\">\"Kofi\"</span>, <span class=\"string\">\"Abena\"</span>, <span class=\"string\">\"Peter\"</span>, <span class=\"string\">\"Kweku\"</span>, <span class=\"string\">\"Akosua\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> sortedStudents = students.sorted()</div><div class=\"line\"><span class=\"built_in\">print</span>(sortedStudents)</div><div class=\"line\"><span class=\"comment\">// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> descendingStudents = students.sorted(by: &gt;)</div><div class=\"line\"><span class=\"built_in\">print</span>(descendingStudents)</div><div class=\"line\"><span class=\"comment\">// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"</span></div></pre></td></tr></table></figure>\n<p>例子</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">HTTPResponse</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> ok</div><div class=\"line\">    <span class=\"keyword\">case</span> error(<span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> responses: [<span class=\"type\">HTTPResponse</span>] = [.error(<span class=\"number\">500</span>), .ok, .ok, .error(<span class=\"number\">404</span>), .error(<span class=\"number\">403</span>)]</div><div class=\"line\"><span class=\"keyword\">let</span> sortedResponses = responses.sorted &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> ($<span class=\"number\">0</span>, $<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// Order errors by code</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (.error(aCode), .error(bCode)):</div><div class=\"line\">        <span class=\"keyword\">return</span> aCode &lt; bCode</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// All successes are equivalent, so none is before any other</span></div><div class=\"line\">    <span class=\"keyword\">case</span> (.ok, .ok): <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Order errors before successes</span></div><div class=\"line\">    <span class=\"keyword\">case</span> (.error, .ok): <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">case</span> (.ok, .error): <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sortedResponses)</div><div class=\"line\"><span class=\"comment\">// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-dropFirst-Sequence-dropLast\"><a href=\"#Sequence-dropFirst-Sequence-dropLast\" class=\"headerlink\" title=\"Sequence.dropFirst() Sequence.dropLast()\"></a>Sequence.dropFirst() Sequence.dropLast()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. Sequence.dropFirst()</span></div><div class=\"line\"><span class=\"keyword\">var</span> languages = [<span class=\"string\">\"Swift\"</span>, <span class=\"string\">\"Objective-C\"</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> oldLanguages = languages.<span class=\"built_in\">dropFirst</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. Sequence.dropLast()</span></div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"built_in\">print</span>(numbers.<span class=\"built_in\">dropLast</span>(<span class=\"number\">2</span>))</div><div class=\"line\"><span class=\"comment\">// Prints \"[1, 2, 3]\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(numbers.<span class=\"built_in\">dropLast</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// Prints \"[]\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-filter\"><a href=\"#Sequence-filter\" class=\"headerlink\" title=\"Sequence.filter\"></a>Sequence.filter</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> cast = [<span class=\"string\">\"Vivien\"</span>, <span class=\"string\">\"Marlon\"</span>, <span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Karl\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> shortNames = cast.<span class=\"built_in\">filter</span> &#123; $<span class=\"number\">0</span>.characters.<span class=\"built_in\">count</span> &lt; <span class=\"number\">5</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(shortNames)</div><div class=\"line\"><span class=\"comment\">// Prints \"[\"Kim\", \"Karl\"]\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> abc = arr.<span class=\"built_in\">filter</span> &#123; $<span class=\"number\">0</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(abc)</div><div class=\"line\"><span class=\"comment\">// Prints [0, 2, 4, 6, 8, 10]</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-index-Sequence-indices\"><a href=\"#Sequence-index-Sequence-indices\" class=\"headerlink\" title=\"Sequence.index() Sequence.indices\"></a>Sequence.index() Sequence.indices</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> students = [<span class=\"string\">\"Kofi\"</span>, <span class=\"string\">\"Abena\"</span>, <span class=\"string\">\"Peter\"</span>, <span class=\"string\">\"Kweku\"</span>, <span class=\"string\">\"Akosua\"</span>]</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> i = students.index(<span class=\"keyword\">where</span>: &#123; $<span class=\"number\">0</span>.hasPrefix(<span class=\"string\">\"A\"</span>) &#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(students[i])</span> starts with 'A'!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"Abena starts with 'A'!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">c</span> = <span class=\"type\">Array</span>([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>])</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"built_in\">c</span>.startIndex</div><div class=\"line\"><span class=\"keyword\">while</span> i != <span class=\"built_in\">c</span>.endIndex &#123;</div><div class=\"line\">    <span class=\"built_in\">c</span>[i] /= <span class=\"number\">5</span></div><div class=\"line\">    i = <span class=\"built_in\">c</span>.index(after: i)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"comment\">// Prints [2, 4, 6, 8, 10]</span></div><div class=\"line\"><span class=\"comment\">// 肯定用 map 更简单 这里只是掩饰 index</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-joined\"><a href=\"#Sequence-joined\" class=\"headerlink\" title=\"Sequence.joined()\"></a>Sequence.joined()</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cast = [<span class=\"string\">\"Vivien\"</span>, <span class=\"string\">\"Marlon\"</span>, <span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Karl\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> list = cast.joined(separator: <span class=\"string\">\", \"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(list)</div><div class=\"line\"><span class=\"comment\">// Prints \"Vivien, Marlon, Kim, Karl\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-map\"><a href=\"#Sequence-map\" class=\"headerlink\" title=\"Sequence.map\"></a>Sequence.map</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cast = [<span class=\"string\">\"Vivien\"</span>, <span class=\"string\">\"Marlon\"</span>, <span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Karl\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> lowercaseNames = cast.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.lowercaseString &#125;</div><div class=\"line\"><span class=\"comment\">// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]</span></div><div class=\"line\"><span class=\"keyword\">let</span> letterCounts = cast.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.characters.<span class=\"built_in\">count</span> &#125;</div><div class=\"line\"><span class=\"comment\">// 'letterCounts' == [6, 6, 3, 4]</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-reduce\"><a href=\"#Sequence-reduce\" class=\"headerlink\" title=\"Sequence.reduce\"></a>Sequence.reduce</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">\"Sofia\"</span>, <span class=\"string\">\"Camilla\"</span>, <span class=\"string\">\"Martina\"</span>, <span class=\"string\">\"Mateo\"</span>, <span class=\"string\">\"Nicolás\"</span>].<span class=\"built_in\">reduce</span>(<span class=\"string\">\"\"</span>) &#123; $<span class=\"number\">0</span> + $<span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(a)</div><div class=\"line\"><span class=\"comment\">// \"\" + \"Sofia\" + \"Camilla\" + \"Martina\" + \"Mateo\" + \"Nicolás\"</span></div><div class=\"line\"><span class=\"comment\">// SofiaCamillaMartinaMateoNicolás</span></div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> addTwo: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> = &#123; x, y <span class=\"keyword\">in</span> x + y &#125;</div><div class=\"line\"><span class=\"keyword\">let</span> numberSum = numbers.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, addTwo)</div><div class=\"line\"><span class=\"built_in\">print</span>(numberSum) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-reversed\"><a href=\"#Sequence-reversed\" class=\"headerlink\" title=\"Sequence.reversed\"></a>Sequence.reversed</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers.reversed() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(number)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"7\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"5\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"3\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> reversedNumbers = <span class=\"type\">Array</span>(numbers.reversed())</div><div class=\"line\"><span class=\"built_in\">print</span>(reversedNumbers)</div><div class=\"line\"><span class=\"comment\">// Prints \"[7, 5, 3]\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Sequence-starts-with\"><a href=\"#Sequence-starts-with\" class=\"headerlink\" title=\"Sequence.starts(with:)\"></a>Sequence.starts(with:)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>...<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>...<span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">print</span>(b.starts(with: a))</div><div class=\"line\"><span class=\"comment\">// Prints \"true\"</span></div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["Swift","Sequence"]},{"title":"Xcode 8 屏蔽杂乱打印问题","url":"https://fandyliu.github.io/2016/09/24/iOS/Xcode8屏蔽杂乱打印问题/","content":"<p>Xcode 8 总是打印一堆奇怪的东西。虽然不影响开发，但是看着很不爽。 现在对解决办法坐下记录。<br><a id=\"more\"></a></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>Xcode8里边 <code>Edit Scheme-&gt; Run -&gt; Arguments</code> ， 在 <code>Environment Variables</code> 里边添加 <code>OS_ACTIVITY_MODE ＝ Disable</code>。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/iOS/Xcode8%E5%B1%8F%E8%94%BD%E6%9D%82%E4%B9%B1%E6%89%93%E5%8D%B0%E9%97%AE%E9%A2%98/Print.jpg\" alt=\"\"></p>\n<h2 id=\"配置后问题\"><a href=\"#配置后问题\" class=\"headerlink\" title=\"配置后问题\"></a>配置后问题</h2><p>配置之后，当像一些麦克风或者摄像头的访问权限忘记在 <code>info.plist</code> 中配置的时候，Xcode 并<code>不会打印类似于下面的提示信息</code></p>\n<p><code>This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app&#39;s Info.plist must contain an NSSpeechRecognitionUsageDescription key with a string value explaining to the user how the app uses this data.</code></p>\n<p>这样的提示配置信息，而是直接 <code>Crash</code> 找不到原因。类似于下面的 Crash。这时候你要检测看看到底哪个访问<code>权限忘记配置</code>。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/Crash.jpg\" alt=\"打印\"></p>\n<p>遇到这些问题可以去 <a href=\"/2016/09/20/iOS/iOS10访问权限问题/index.html\">iOS10权限崩溃问题</a> 中查看如何配置。</p>\n","categories":["iOS"],"tags":["Xcode","Bug"]},{"title":"iOS 10 访问权限问题","url":"https://fandyliu.github.io/2016/09/20/iOS/iOS10访问权限问题/","content":"<p>iOS 10 上，若你的项目访问了<code>隐私数据</code>，比如：相机，相册，通讯录等，都需要提前请求应用权限、允许后才可以使用，否则 app 会直接 Crash 了。</p>\n<p>还有 Xcode 8 上传到 iTunesConnect 上的<code>安装包</code>提示<code>无效二进制文件</code>或者直接<code>看不到</code>。这是因为 iOS10 对用户的隐私做了进一步加强，在申请很多私有权限的时候都需要添加描述，这里我简单的记录了下解决方法。</p>\n<a id=\"more\"></a>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h3><p>在项目中找到<code>info.plist</code>文件。<br>点击<code>Information Property List</code> 后边的加号，新添加一项。<br>在新添加的<code>key</code>中输入 <code>Privacy</code> 可以迅速定位到这一权限系列，找到你需要的权限，修改后面的 value 就可以了（value内容可随意）。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSBluetoothPeripheralUsageDescription</span>          访问蓝牙</div><div class=\"line\"><span class=\"built_in\">NSCalendarsUsageDescription</span>                    访问日历</div><div class=\"line\"><span class=\"built_in\">NSCameraUsageDescription</span>                       相机</div><div class=\"line\"><span class=\"built_in\">NSPhotoLibraryUsageDescription</span>                 相册</div><div class=\"line\"><span class=\"built_in\">NSContactsUsageDescription</span>                     通讯录</div><div class=\"line\"><span class=\"built_in\">NSLocationAlwaysUsageDescription</span>               始终访问位置</div><div class=\"line\"><span class=\"built_in\">NSLocationUsageDescription</span>                     位置</div><div class=\"line\"><span class=\"built_in\">NSLocationWhenInUseUsageDescription</span>            在使用期间访问位置</div><div class=\"line\"><span class=\"built_in\">NSMicrophoneUsageDescription</span>                   麦克风</div><div class=\"line\"><span class=\"built_in\">NSAppleMusicUsageDescription</span>                   访问媒体资料库</div><div class=\"line\"><span class=\"built_in\">NSHealthShareUsageDescription</span>                  访问健康分享</div><div class=\"line\"><span class=\"built_in\">NSHealthUpdateUsageDescription</span>                 访问健康更新</div><div class=\"line\"><span class=\"built_in\">NSMotionUsageDescription</span>                       访问运动与健身</div><div class=\"line\"><span class=\"built_in\">NSRemindersUsageDescription</span>                    访问提醒事项</div></pre></td></tr></table></figure>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二:\"></a>方式二:</h3><p>在项目中找到<code>info.plist</code>文件。<br>对其右击选<code>Open As —&gt; Source Code</code>，以<code>Source Code</code>形式打开。<br>添加相应的键值对即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSVideoSubscriberAccountUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>视频认证<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSSpeechRecognitionUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>语音识别<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSSiriUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Siri使用<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSRemindersUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>访问提醒事项<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kTCCServiceMediaLibrary<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>TV控制<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSMotionUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>运动权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSMicrophoneUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>麦克风权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAppleMusicUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>苹果音乐<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSLocationUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>位置权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSHomeKitUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HomeKit权限<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSHealthUpdateUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>健康应用<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSHealthShareUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>健康应用<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSContactsUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>通讯录<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSCalendarsUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>日历<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSBluetoothPeripheralUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>蓝牙<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>相册<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSCameraUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>相机<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>永久使用定位<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>应用使用的时候使用定位<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["Xcode","Bug","权限"]},{"title":"RubyGems 镜像","url":"https://fandyliu.github.io/2016/07/25/iOS/RubyGems镜像/","content":"<p>由于国内不能访问官方的 Ruby 源，所以有些大牛搭建了 ruby.taobao.org 为国内开发者解决 Gem 安装的问题，但是由于各种原因使 ruby.taobao.org 很难同步了、和维护。最终他们考虑由 <a href=\"https://ruby-china.org\" target=\"_blank\" rel=\"external\">Ruby China</a> 来负责这个事情，这样可以像现在 Ruby China 社区，RubyConf China 一样，由社区的很多参与者来共同维护。</p>\n<a id=\"more\"></a>\n<h2 id=\"更换数据源\"><a href=\"#更换数据源\" class=\"headerlink\" title=\"更换数据源\"></a>更换数据源</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem sources --<span class=\"built_in\">add</span> http<span class=\"variable\">s:</span>//gems.<span class=\"keyword\">ruby</span>-china.org/ --<span class=\"built_in\">remove</span> http<span class=\"variable\">s:</span>//rubygems.org/</div><div class=\"line\">$ gem sources -<span class=\"keyword\">l</span></div><div class=\"line\">http<span class=\"variable\">s:</span>//gems.<span class=\"keyword\">ruby</span>-china.org</div><div class=\"line\"># 确保只有 gems.<span class=\"keyword\">ruby</span>-china.org</div></pre></td></tr></table></figure>\n<h2 id=\"RVM-安装脚本的方式安装-Ruby\"><a href=\"#RVM-安装脚本的方式安装-Ruby\" class=\"headerlink\" title=\"RVM 安装脚本的方式安装 Ruby\"></a>RVM 安装脚本的方式安装 Ruby</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Install RVM\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"---------------------------------------------------------------------------\"</span></div><div class=\"line\"><span class=\"built_in\">command</span> gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</div><div class=\"line\"><span class=\"built_in\">command</span> curl -L https://get.rvm.io | bash <span class=\"_\">-s</span> stable</div><div class=\"line\"><span class=\"keyword\">if</span> [ whoami = <span class=\"string\">'root'</span>]; <span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">command</span> <span class=\"built_in\">source</span> /etc/profile.d/rvm.sh</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\"><span class=\"built_in\">command</span> <span class=\"built_in\">source</span> ~/.rvm/scripts/rvm</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ MIRROR = <span class=\"string\">'1'</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ruby_url=https://cache.ruby-china.org/pub/ruby\"</span> &gt; ~/.rvm/user/db</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">rvm requirements</div><div class=\"line\">rvm install 2.3.1 --disable-binary</div><div class=\"line\">rvm use 2.3.1 --default</div><div class=\"line\">rvm -v</div><div class=\"line\">ruby -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ MIRROR = <span class=\"string\">'1'</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">gem install bundler</div><div class=\"line\">bundle -v</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"--------------------------- Install Successed -----------------------------\"</span></div></pre></td></tr></table></figure>\n<p>地址链接：  </p>\n<p><a href=\"https://github.com/ruby-china/rubygems-mirror\" target=\"_blank\" rel=\"external\">RubyGems 镜像源</a></p>\n<p><a href=\"https://gems.ruby-china.org\" target=\"_blank\" rel=\"external\">使用方法</a></p>\n","categories":["iOS"],"tags":["Ruby"]},{"title":"在 Xcode 中的 iPhone CPU 指令集","url":"https://fandyliu.github.io/2015/10/07/iOS/在Xcode中的iPhoneCPU指令集/","content":"<p><a href=\"https://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\" rel=\"external\">ARM</a> 处理器，因其功耗低和尺寸小而闻名，几乎所有的手机处理器都基于ARM，苹果当然也不例外。</p>\n<a id=\"more\"></a>\n<p>armv6、armv7、armv7s、arm64都是ARM处理器的指令集，所有指令集原则上都是向下兼容的。如 iPhone 4s 的 CPU 默认指令集为 armv7 指令集，但它可以同时也兼容 armv6 的指令集，只是在使用 armv6 的时候无法充分发挥其性能(无法发挥 armv7 指令集中得新特性)。</p>\n<p>iOS 模拟器没有运行 ARM 指令集，编译运行的是 x86 指令集(或 i386 )，所以只有在 iOS 设备上才会执行设备对应 ARM 指令集。</p>\n<h1 id=\"设备的CPU架构-指令集\"><a href=\"#设备的CPU架构-指令集\" class=\"headerlink\" title=\"设备的CPU架构(指令集)\"></a>设备的CPU架构(指令集)</h1><h2 id=\"模拟器\"><a href=\"#模拟器\" class=\"headerlink\" title=\"模拟器\"></a>模拟器</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模拟器设备</th>\n<th style=\"text-align:center\">CPU架构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">4s-5</td>\n<td style=\"text-align:center\">i386</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5s-6s Plus</td>\n<td style=\"text-align:center\">x86_64</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"真机-iOS设备\"><a href=\"#真机-iOS设备\" class=\"headerlink\" title=\"真机(iOS设备)\"></a>真机(iOS设备)</h2><ul>\n<li>armv6: iPhone、iPhone 2、iPhone 3G、iPod Touch(第一代)、iPod Touch(第二代)</li>\n<li>armv7: iPhone 3Gs、iPhone 4、iPhone 4s、iPad、iPad 2</li>\n<li>armv7s: iPhone 5、iPhone 5c (<code>静态库只要支持了armv7，就可以在armv7s的架构上运行</code>)</li>\n<li>arm64(注:无armv64): iPhone 5s、iPhone 6、iPhone 6 Plus、iPhone 6s、iPhone 6s Plus、iPad Air、iPad Air2、iPad mini2、iPad mini3</li>\n</ul>\n<h1 id=\"Architectures-配置\"><a href=\"#Architectures-配置\" class=\"headerlink\" title=\"Architectures 配置\"></a>Architectures 配置</h1><p>在 Xcode -&gt; Project/Tagets -&gt; Build Settings -&gt; Architectures 中进行设置</p>\n<h2 id=\"各个参数含义\"><a href=\"#各个参数含义\" class=\"headerlink\" title=\"各个参数含义\"></a>各个参数含义</h2><h3 id=\"Architectures\"><a href=\"#Architectures\" class=\"headerlink\" title=\"Architectures:\"></a>Architectures:</h3><p><strong>该编译选项指定了工程将被编译成支持哪些指令集</strong>，支持指令集是通过编译生成对应的<strong>二进制数据包</strong>实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。</p>\n<h3 id=\"Valid-Architectures\"><a href=\"#Valid-Architectures\" class=\"headerlink\" title=\"Valid Architectures:\"></a>Valid Architectures:</h3><p>该编译项指定可能支持的指令集，<strong>该列表和Architectures列表的交集，将是Xcode最终生成二进制包所支持的指令集</strong>。</p>\n<p>比如，你的Valid Architectures设置的支持arm指令集版本有：armv7/armv7s/arm64，对应的Architectures设置的支持arm指令集版本有：armv7s，这时Xcode只会生成一个armv7s指令集的二进制包。</p>\n<h4 id=\"Build-Active-Architecture-Only：\"><a href=\"#Build-Active-Architecture-Only：\" class=\"headerlink\" title=\"Build Active Architecture Only：\"></a>Build Active Architecture Only：</h4><p>该编译项用于设置是否只编译当前使用的设备对应的arm指令集。</p>\n<p>该选项起作用的条件有两个，必须同时满足才会起作用</p>\n<ul>\n<li>其值设置为 YES</li>\n<li>Xcode 成功连接调试设备</li>\n</ul>\n<p>假定我们将 Build Active Architecture Only 值设置为 YES，同时 Xcode 连接上手机 iPhone 5s（匹配指令集 arm64）<br>注意：为了上架支持多种手机，所以<code>Release 模式一定要设置为 NO</code>.</p>\n<h1 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h1><p>如果你的软件对安装包大小非常敏感，你可以减少安装包中的指令集数据包，而且这能达到立竿见影的效果。</p>\n<p>根据向下兼容原则，armv7指令集的应用是可以正常在支持 armv7s/arm64 指令集的机器上运行的。</p>\n<p>不过对于armv7s/arm64指令集设备来说，使用运行armv7应用是会有一定的性能损失。</p>\n<h1 id=\"Bug\"><a href=\"#Bug\" class=\"headerlink\" title=\"Bug\"></a>Bug</h1><p>编译出错信息</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">No</span> architectures to compile <span class=\"keyword\">for</span> (ONLY_ACTIVE_ARCH=<span class=\"keyword\">YES</span>, active arch=arm64, VALID_ARCHS=armv7 armv7s)</div></pre></td></tr></table></figure>\n<p>可以看出：当 Build Active Architecture Only 起作用时：<br>连接的手机指令集匹配是由高到低（arm64 &gt; armv7s &gt; armv7）依次匹配的。</p>\n<p>如连接手机为iPhone 5s，其默认指令集为 arm64，若 Architectures 列表为armv7， armv7s，则会选取 armv7s 指令集为目标指令集，如果此时 Valid Architectures 列表中包含该指令集，则成功生成的二进制包只支持 armv7s指令集，若 Valid Architectures 列表不包含此指令集，则编译将会出错：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">No</span> architectures to compile <span class=\"keyword\">for</span> (ONLY_ACTIVE_ARCH=<span class=\"keyword\">YES</span>, active arch=armv7s, VALID_ARCHS=armv7 arm64)</div></pre></td></tr></table></figure>\n<p>同样的，若 Architectures 列表为 armv7，则会选取 armv7 作为目标指令集，若Valid Architectures 列表中包含了 armv7 指令集，则能够成功生成二进制包，其支持的指令集只有armv7，若Valid Architectures列表中不包含armv7，则编译失败。</p>\n","categories":["iOS"],"tags":["Xcode","Bug","模拟器","CPU架构"]},{"title":"Swift 中的一些函数","url":"https://fandyliu.github.io/2015/10/01/iOS/Swift中的一些函数/","content":"<p>Swift中一些简单函数的总结</p>\n<a id=\"more\"></a>\n<h2 id=\"sequence\"><a href=\"#sequence\" class=\"headerlink\" title=\"sequence\"></a>sequence</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个序列（Sequence）来表示填充的数据</span></div><div class=\"line\"><span class=\"comment\">// 有很多的方法去创建序列，但是重载的 sequence() 函数可能是最简单的方式。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\">a.reserveCapacity(<span class=\"number\">256</span>)</div><div class=\"line\"></div><div class=\"line\">a += sequence(first: <span class=\"number\">3</span>, next: &#123;$<span class=\"number\">0</span> &lt; <span class=\"number\">1000</span> ? ($<span class=\"number\">0</span> + <span class=\"number\">3</span>) * <span class=\"number\">2</span> : <span class=\"literal\">nil</span>&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"assert\"><a href=\"#assert\" class=\"headerlink\" title=\"assert\"></a>assert</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数如果为`true`则继续，否则抛出异常</span></div><div class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate\"></a>enumerate</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第一个值为原来元素所在的位置`index`，第二个为原来序列中的元素</span></div><div class=\"line\"><span class=\"comment\">// unresolved identifier 'enumerate' swift 3.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (i, j) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>([<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>]) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// \"0:A\", \"1:B\" will be printed</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"<span class=\"subst\">\\(i)</span>:<span class=\"subst\">\\(j)</span>\"</span>)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> words = [<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>, <span class=\"string\">\"four\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> numbers = <span class=\"number\">1</span>...<span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (word, number) <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(words, numbers) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(word)</span>: <span class=\"subst\">\\(number)</span>\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Prints \"one: 1\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"two: 2</span></div><div class=\"line\"><span class=\"comment\">// Prints \"three: 3\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"four: 4\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> naturalNumbers = <span class=\"number\">1</span>...<span class=\"type\">Int</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"keyword\">let</span> zipped = <span class=\"type\">Array</span>(<span class=\"built_in\">zip</span>(words, naturalNumbers))</div><div class=\"line\"><span class=\"comment\">// zipped == [(\"one\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4)]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">let</span> names: <span class=\"type\">Set</span> = [<span class=\"string\">\"Sofia\"</span>, <span class=\"string\">\"Camilla\"</span>, <span class=\"string\">\"Martina\"</span>, <span class=\"string\">\"Mateo\"</span>, <span class=\"string\">\"Nicolás\"</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> shorterIndices: [<span class=\"type\">SetIndex</span>&lt;<span class=\"type\">String</span>&gt;] = []</div><div class=\"line\"><span class=\"keyword\">for</span> (i, name) <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(names.<span class=\"built_in\">indices</span>, names) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> name.characters.<span class=\"built_in\">count</span> &lt;= <span class=\"number\">5</span> &#123;</div><div class=\"line\">        shorterIndices.append(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> shorterIndices &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(names[i])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Prints \"Sofia\"</span></div><div class=\"line\"><span class=\"comment\">// Prints \"Mateo\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"min-max\"><a href=\"#min-max\" class=\"headerlink\" title=\"min max\"></a>min max</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">min</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"built_in\">max</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort 排序\"></a>sort 排序</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">sort</span>([<span class=\"string\">\"B\"</span>, <span class=\"string\">\"A\"</span>]) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// \"A\", \"B\" will be printed</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">println</span>(i)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"abs-signedNumber-：返回数字的绝对值\"><a href=\"#abs-signedNumber-：返回数字的绝对值\" class=\"headerlink\" title=\"abs(signedNumber)：返回数字的绝对值\"></a>abs(signedNumber)：返回数字的绝对值</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>) == <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">abs</span>(-<span class=\"number\">42</span>) == <span class=\"number\">42</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">42</span>) == <span class=\"number\">42</span></div></pre></td></tr></table></figure>\n<h2 id=\"dump-object-：打印出某个对象object的所有信息\"><a href=\"#dump-object-：打印出某个对象object的所有信息\" class=\"headerlink\" title=\"dump(object)：打印出某个对象object的所有信息\"></a>dump(object)：打印出某个对象object的所有信息</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> languages = [<span class=\"string\">\"Swift\"</span>, <span class=\"string\">\"Objective-C\"</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">dump</span>(languages)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Prints:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ▿ 2 elements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// - [0]: Swift</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// - [1]: Objective-C</span></div></pre></td></tr></table></figure>\n","categories":["iOS"],"tags":["Swift","函数"]},{"title":"Java 与 Eclipse","url":"https://fandyliu.github.io/2015/06/04/Java/Java与Eclipse/","content":"<h2 id=\"jar-包\"><a href=\"#jar-包\" class=\"headerlink\" title=\"jar 包\"></a>jar 包</h2><ul>\n<li>rar: 压缩文件</li>\n<li>jar: Java的压缩文件，其本质就是一堆字节码文件的压缩包</li>\n<li>war: Web项目的压缩包</li>\n</ul>\n<p>导出jar包：<br>选中要导出的文件，鼠标右键 Export -&gt; Java/JAR file -&gt; next</p>\n<p>怎么使用jar:<br>在Java项目中新建lib目录,把jar拷贝到该目录,选择jar–&gt;鼠标右键 Add build path。</p>\n<h2 id=\"classpath文件分析\"><a href=\"#classpath文件分析\" class=\"headerlink\" title=\"classpath文件分析\"></a>classpath文件分析</h2><p>环境变量:<br>PATH = JDK根/bin: 告诉计算机去哪里去找javac，java等工具。</p>\n<p>CLASSPATH =.:告诉JVM去哪里去找字节码.   —&gt;java   App</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">classpath</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classpathentry</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"src\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classpathentry</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"con\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">classpathentry</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"output\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"bin\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">classpath</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>其中classpathentry 有好几种类型（kind）</li>\n<li>src： 源文件的路径</li>\n<li>con: 项目运行环境的路径</li>\n<li>lib: 三方jar包存放的路径</li>\n<li>output: 源文件编译后生成的字节码文件的输出目录</li>\n</ul>\n","categories":["Java"],"tags":["Eclipse"]},{"title":"UIWebView 禁止长按链接弹出选择栏","url":"https://fandyliu.github.io/2015/02/09/iOS/UIWebView禁止长按链接弹出选择栏/","content":"<p>当 webview 显示 html 页面的时候，其本身会提供一些原生的交互行为：长按获取文本，或者链接。如何禁用这个效果呢。现在总结几种方案:<br><a id=\"more\"></a></p>\n<h2 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h2><p>通过Webkit内核提供的一些特殊的CSS属性 ，我们可以很方便的禁用掉这些默认的行为。首先我们介绍两个特殊的CSS属性。</p>\n<p><a href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_touch_callout\" target=\"_blank\" rel=\"external\">-webkit-touch-callout</a></p>\n<blockquote>\n<p>-webkit-touch-callout(IOS2.0及以后可用)<br>Disables the default callout shown when you touch and hold a touch target.</p>\n<p>Syntax<br>-webkit-touch-callout: behavior;</p>\n</blockquote>\n<p>长按诸如链接的目标对象时，是否允许呼出默认的popOver，当前选择值包括:</p>\n<ul>\n<li>none:不呼出弹窗框</li>\n<li>inherit:可以呼出弹窗框</li>\n</ul>\n<p>在IOS中，当你touch和hold一个触控对象时，例如链接，Safari会显示一个包含链接信息的弹出框。该属性允许你来禁用这个弹出框。</p>\n<p><a href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_user_select\" target=\"_blank\" rel=\"external\">-webkit-user-select</a></p>\n<blockquote>\n<p>-webkit-user-select(IOS3.0及以后可用)<br>Determines whether a user can select the content of an element.</p>\n<p>Syntax<br>-webkit-user-select: policy;</p>\n</blockquote>\n<p>是否允许用户选择元素的内容，选择值包括：</p>\n<ul>\n<li>auto:用户可以选择元素内的内容</li>\n<li>none:用户不能选择任何内容</li>\n<li>text:用户只能选择元素内的文本</li>\n</ul>\n<h3 id=\"禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则\"><a href=\"#禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则\" class=\"headerlink\" title=\"禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则\"></a>禁用整个页面的用户选择和链接弹出框，可页面样式表中添加如下样式规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">body.disable-default-action</div><div class=\"line\">&#123;</div><div class=\"line\">    -webkit-touch-callout:none ;</div><div class=\"line\">    -webkit-user-select:none ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同时在body标签中加入该类型,如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body class = &quot;disable-default-action&quot;&gt;</div><div class=\"line\">    page content….</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"只允许-Form-表单域执行文本的剪切板操作，添加如下规则\"><a href=\"#只允许-Form-表单域执行文本的剪切板操作，添加如下规则\" class=\"headerlink\" title=\"只允许 Form 表单域执行文本的剪切板操作，添加如下规则\"></a>只允许 Form 表单域执行文本的剪切板操作，添加如下规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  *:not(input,textarea) &#123;</div><div class=\"line\">    -webkit-touch-callout: none;</div><div class=\"line\">    -webkit-user-select: none; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"禁用某个链接的长按弹出框-可在链接添加内联样式规则如下\"><a href=\"#禁用某个链接的长按弹出框-可在链接添加内联样式规则如下\" class=\"headerlink\" title=\"禁用某个链接的长按弹出框,可在链接添加内联样式规则如下\"></a>禁用某个链接的长按弹出框,可在链接添加内联样式规则如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=&quot;http://www.baidu.com&quot; style = &quot;-webkit-touch-callout:none&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h2><p>以编程方式动态的向加载页面添加样式来达到同样的效果(iOS 8 以前可以用 以后貌似不可以)</p>\n<p>实现UIWebviewDelegate协议，在webViewDidFinishLoad:方法中添加以下代码 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)webViewDidFinishLoad:(<span class=\"built_in\">UIWebView</span> *)webView &#123;</div><div class=\"line\">    <span class=\"comment\">// 禁用用户选择</span></div><div class=\"line\">    [webView stringByEvaluatingJavaScriptFromString:<span class=\"string\">@\"document.documentElement.style.webkitUserSelect='none';\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 禁用长按弹出框</span></div><div class=\"line\">    [webView stringByEvaluatingJavaScriptFromString:<span class=\"string\">@\"document.documentElement.style.webkitTouchCallout='none';\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>html５ 貌似可以这样子加(没有测试过)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.body.style.webkitTouchCallout=<span class=\"string\">'none'</span></div></pre></td></tr></table></figure>\n<h2 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h2><p>更安全的方式是，写html的时候加上以下代码，这样不管谁调用你的网页，长按链接都不会呼出弹窗框<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">        window.onload=function()&#123;</div><div class=\"line\">            document.documentElement.style.webkitTouchCallout=&apos;none&apos;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>这样子不管谁调用都没有这个手势了</p>\n<h2 id=\"方式四\"><a href=\"#方式四\" class=\"headerlink\" title=\"方式四\"></a>方式四</h2><p>用个chang<br>在viewdidload或适当的地方创建一个自定义的长按手势</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UILongPressGestureRecognizer</span> *longPress = [[<span class=\"built_in\">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"comment\">// 记得在.h文件里加上委托</span></div><div class=\"line\">longPress.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"><span class=\"comment\">// 这里为什么要设置0.4，因为只要大于0.5就无效，我像大概是因为默认的跳出放大镜的手势的长按时间是0.5秒，</span></div><div class=\"line\"><span class=\"comment\">// 如果我们自定义的手势大于或小于0.5秒的话就来不及替换他的默认手势了，这是只是我的猜测。但是最好大于0.2秒，因为有的pdf有一些书签跳转功能，这个值太小的话可能会使这些功能失效。</span></div><div class=\"line\">longPress.minimumPressDuration = <span class=\"number\">0.4</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span>.webView addGestureRecognizer:longPress];</div></pre></td></tr></table></figure>\n<p>接下来就是实现一个委托了</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#pragma mark - GestureRecognizerDelegate</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)gestureRecognizer:(<span class=\"built_in\">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class=\"built_in\">UIGestureRecognizer</span> *)otherGestureRecognizer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cocoachina.com/bbs/read.php?tid=102913\" target=\"_blank\" rel=\"external\">其他参考连接</a></p>\n","categories":["iOS"],"tags":["UIWebView","手势","交互"]},{"title":"GitHub Summary","url":"https://fandyliu.github.io/2015/01/23/iOS/GitHub-Summary/","content":"<p><a href=\"https://github.com/shinydevelopment/SimulatorStatusMagic\" target=\"_blank\" rel=\"external\">SimulatorStatusMagic</a> 模拟器中修改状态条</p>\n","categories":["iOS"],"tags":["GitHub"]},{"title":"单例设计模式","url":"https://fandyliu.github.io/2014/06/04/Java/单例设计模式/","content":"<p><strong>单例设计模式(singleton):</strong> 在应用 <code>Application</code> (项目/软件)中，某个类有且只有一个实例。</p>\n<p>我们通常会把一些<code>工具类</code>做成单例的。</p>\n<p><strong>单例的写法:</strong></p>\n<ol>\n<li>饿汉式</li>\n<li>懒汉式</li>\n<li>枚举</li>\n<li>使用缓存机制来实现单例效果</li>\n<li>在 Spring 中(对象工厂),创建的对象默认就是单例</li>\n<li>等…</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a><strong>饿汉式</strong></h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span> MySingleton() &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span><span class=\"keyword\"> static</span> MySingleton<span class=\"built_in\"> instance </span>=<span class=\"built_in\"> new </span>MySingleton();</div><div class=\"line\"><span class=\"keyword\">\tpublic</span><span class=\"keyword\"> static</span> MySingleton shareInstance() &#123;</div><div class=\"line\">\t<span class=\"built_in\">\treturn </span>instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a><strong>懒汉式</strong></h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span> MySingleton() &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"keyword\">\tprivate</span><span class=\"keyword\"> static</span> MySingleton<span class=\"built_in\"> instance </span>= null;</div><div class=\"line\"><span class=\"keyword\">\tpublic</span><span class=\"keyword\"> static</span> MySingleton shareInstance() &#123;</div><div class=\"line\">\t<span class=\"built_in\">\tif </span>(instance == null) &#123;</div><div class=\"line\">\t\t\tsynchronized (MySingleton.class) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">\tif </span>(instance == null) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">\tinstance </span>=<span class=\"built_in\"> new </span>MySingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">\treturn </span>instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a><strong>枚举</strong></h2><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MySingleton</span> &#123;</span></div><div class=\"line\">\tINSTANCE; </div><div class=\"line\">\t<span class=\"keyword\">private</span> MySingleton() &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["设计模式","单例"]},{"title":"Reflection","url":"https://fandyliu.github.io/2014/06/03/Java/Reflection/","content":"<p><strong>反射 (reflection)</strong>：在<code>运行</code>时期，<code>动态</code>地去获取<code>类</code>中的<code>信息</code> （包括：类的信息，方法信息，构造器信息，字段信息等）。</p>\n<p>反射是一个得到元数据的行为。 （<code>元数据 (metadata)</code>： 描述数据的描述数据）</p>\n<p><em>反射功能很强大，但是耗性能。主要在做工具和框架中使用。</em></p>\n<p><strong>主要 API：</strong></p>\n<ul>\n<li><code>Class</code>: 表示所有类或者接口的对象</li>\n<li><code>Constructor</code>: 表示所有构造器的对象</li>\n<li><code>Method</code>: 表示所有的方法的对象</li>\n<li><code>Field</code>: 表示所有字段的对象</li>\n<li><code>Annotation</code>: 表示所有注解的对象</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a><strong>Class</strong></h1><p><strong>Class</strong> 是一切类共同行为和状态的抽象。</p>\n<p><strong>Class 实例</strong>表示正在运行的 Java 应用程序中的类和接口。<em>枚举是一种类，注释是一种接口</em>。</p>\n<p><strong>Class 实例</strong>其实就是指 JVM 中一份<code>字节码</code>。</p>\n<p><strong>Class</strong> <code>没有公共构造方法</code>。Class 实例是在加载类时由 <code>Java 虚拟机</code>以及通过调用<code>类加载器 (ClassLoader)</code> 中的 <code>defineClass</code> 方法自动构造的。 </p>\n<h2 id=\"Class-类有泛型\"><a href=\"#Class-类有泛型\" class=\"headerlink\" title=\"Class 类有泛型\"></a>Class 类有泛型</h2><p>为了<code>明确区分</code>出 Class 实例表示的是<code>谁的字节码</code>。Class 类提供了泛型。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;Student&gt; clz0 = Student.<span class=\"keyword\">class</span>;</div><div class=\"line\"><span class=\"keyword\">Class</span>&lt;<span class=\"keyword\">String</span>&gt; clz1 = <span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"获取-Class-实例\"><a href=\"#获取-Class-实例\" class=\"headerlink\" title=\"获取 Class 实例\"></a>获取 Class 实例</h2><h3 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a><strong><em>对象类型</em></strong></h3><ul>\n<li><strong>类型.class</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;<span class=\"keyword\">String</span>&gt; clz0 = <span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Class.forName(String className)</strong></li>\n</ul>\n<p>根据一个类的<code>全限定名</code>来构建Class对象</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; clz1 = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"java.lang.String\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>obj.getClass()</strong><br>每一个对象都有<code>继承自 Object</code>的 getClass() 方法获取对象的真实类型</li>\n</ul>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> <span class=\"built_in\">str</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>();</div><div class=\"line\">Class&lt;? extends <span class=\"keyword\">String</span>&gt; clz2 = <span class=\"built_in\">str</span>.getClass();</div></pre></td></tr></table></figure>\n<p><strong><em>同一个类在 JVM 中只有一份字节码</em></strong></p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println<span class=\"params\">(<span class=\"attr\">clz0</span> == clz1)</span>;  <span class=\"string\">//</span> <span class=\"literal\">true</span></div><div class=\"line\">System.out.println<span class=\"params\">(<span class=\"attr\">clz2</span> == clz1)</span>;  <span class=\"string\">//</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a><strong><em>基本数据类型</em></strong></h3><ul>\n<li><strong>不能通过 obj.getClass() 获取</strong></li>\n</ul>\n<p>因为基础数据类型没有 getClass 方法，<code>编译报错</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a;</div><div class=\"line\">a.getClass() <span class=\"comment\">// 没有方法， 报错！！！</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>不能通过 Class.forName(String className)</strong></p>\n<p>权限定名写什么呢？只写 int 不行！！抛出异常 <code>java.lang.ClassNotFoundException</code></p>\n</li>\n</ul>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; c =  <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"int\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>可以通过 class 属性获得</strong></li>\n</ul>\n<p>byte，short，int，long，char，float，double，boolean<br><em>上述8种基本数据类型和 void 关键字，都<code>可以</code>通过 class 属性获取 Class 实例。</em></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span>&lt;<span class=\"keyword\">Integer</span>&gt; clz = <span class=\"built_in\">int</span>.<span class=\"keyword\">class</span>;</div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(clz.getName());  // <span class=\"built_in\">int</span></div></pre></td></tr></table></figure>\n<p><strong><em>一些注意事项</em></strong></p>\n<p>Integer 和 int 获取的类实例不是同一种数据类型</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">int</span>.<span class=\"keyword\">class</span> == Integer.<span class=\"keyword\">class</span>); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>但是在八大基本数据类型的包装类中都有一个常量: <code>TYPE</code><br><code>TYPE</code> 表示的是该包装类对应的<em>基本数据类型的 Class 实例</em>。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"built_in\">int</span>.<span class=\"keyword\">class</span> == <span class=\"keyword\">Integer</span>.<span class=\"keyword\">TYPE</span>); // true</div></pre></td></tr></table></figure>\n<h3 id=\"数组的-class-实例\"><a href=\"#数组的-class-实例\" class=\"headerlink\" title=\"数组的 class 实例\"></a><strong><em>数组的 class 实例</em></strong></h3><p>所有具有<code>相同``元素类型</code>和<code>维数</code>的数组才<code>共享</code>同一份<code>字节码</code>(Class实例)。<br>注意: 和数组中的元素个数无关系。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] arr0 = &#123;&#125;;</div><div class=\"line\">String[] arr1 = &#123;<span class=\"string\">\"22\"</span>， <span class=\"string\">\"33\"</span>&#125;;</div><div class=\"line\">String[][] arr2 = &#123;&#125;;</div><div class=\"line\">int[] arr3 = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 获取类实例</span></div><div class=\"line\">Class clz0 = arr0.getClass();</div><div class=\"line\">Class clz1 = arr1.getClass();</div><div class=\"line\">Class clz2 = arr2.getClass();</div><div class=\"line\">Class clz3 = arr3.getClass();</div><div class=\"line\"><span class=\"comment\">// 比较</span></div><div class=\"line\">System.out.println(clz0 == clz1); <span class=\"comment\">// true</span></div><div class=\"line\">System.out.println(clz0 == clz2); <span class=\"comment\">// false</span></div><div class=\"line\">System.out.println(clz0 == clz3); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<h2 id=\"Class-实例常用-API\"><a href=\"#Class-实例常用-API\" class=\"headerlink\" title=\"Class 实例常用 API\"></a><strong>Class 实例常用 API</strong></h2><ul>\n<li>获得修饰符，返回 int 类型</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> modifiers = clz.<span class=\"built_in\">getModifiers</span>();</div><div class=\"line\"><span class=\"comment\">// 可以通过 Modifier 的类方法判断修饰符类型</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> isPublic = Modifier.isPublic(modifiers);</div></pre></td></tr></table></figure>\n<ul>\n<li>返回类的全限定名</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> <span class=\"keyword\">name</span> = clz.getName();</div></pre></td></tr></table></figure>\n<ul>\n<li>获得类的简单名字</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">String simpleName</span> = clz.getSimpleName();</div></pre></td></tr></table></figure>\n<ul>\n<li>获得该类的包</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Package</span> <span class=\"title\">package1 = clz.getPackage();</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获得类的父类</li>\n</ul>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span>&lt;?&gt; <span class=\"title\">superclass</span> = <span class=\"title\">clz</span>.<span class=\"title\">getSuperclass</span>();</span></div></pre></td></tr></table></figure>\n<ul>\n<li>判断该 Class 实例是否是数组</li>\n</ul>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">boolean<span class=\"built_in\"> array </span>= clz.isArray();</div></pre></td></tr></table></figure>\n<ul>\n<li>判断该 Class 实例是否是枚举</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">boolean enum1 = clz.isEnum()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获取构造器</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;?&gt;[] <span class=\"title\">constructors</span> = <span class=\"title\">clz</span>.<span class=\"title\">getConstructors</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获取方法</li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">methods</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethods</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>获取字段</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field[] fields = clz.getFields()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a><strong>Constructor</strong></h1><p><strong>Constructor<t></t></strong> 表示类中构造器的类型。<br><strong>Constructor 实例</strong>就是某一个类中的某一个构造器。</p>\n<h2 id=\"获取类中的构造器\"><a href=\"#获取类中的构造器\" class=\"headerlink\" title=\"获取类中的构造器\"></a><strong>获取类中的构造器</strong></h2><ul>\n<li><strong>获取当前 Class 所表示类的 <code>public</code> 修饰的构造器</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;?&gt;[] <span class=\"title\">constructors</span> = <span class=\"title\">clz</span>.<span class=\"title\">getConstructors</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类的<code>所有的构造器</code>，和访问权限无关</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;?&gt;[] <span class=\"title\">declaredConstructors</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredConstructors</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中<code>指定</code>的一个 <code>public</code> 的构造器</strong></li>\n</ul>\n<p>参数: parameterTypes表示: 构造器<code>参数的 Class 类型</code><br>若传入<code>非 pulic</code> 构造器的参数列表，会抛出异常 <code>java.lang.NoSuchMethodException</code> 找不到该方法</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;<span class=\"title\">Student</span>&gt; <span class=\"title\">constructor0</span> = <span class=\"title\">clz</span>.<span class=\"title\">getConstructor</span><span class=\"params\">(<span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>， int.<span class=\"keyword\">class</span>)</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前Class所表示类中<code>指定的一个</code>的构造器，和访问权限无关</strong></li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;<span class=\"title\">Student</span>&gt; <span class=\"title\">declaredConstructor</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredConstructor</span><span class=\"params\">(<span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>)</span>;</span></div></pre></td></tr></table></figure>\n<h2 id=\"调用构造器创建对象\"><a href=\"#调用构造器创建对象\" class=\"headerlink\" title=\"调用构造器创建对象\"></a><strong>调用构造器创建对象</strong></h2><ul>\n<li><strong>调用构造器创建对象</strong></li>\n</ul>\n<p>当传入的<code>参数不能对应</code>时抛出异常 <code>java.lang.IllegalArgumentException</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Constructor</span>&lt;<span class=\"title\">Student</span>&gt; <span class=\"title\">declaredConstructor</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredConstructor</span><span class=\"params\">()</span>;</span></div><div class=\"line\">Student student = declaredConstructor.newInstance();</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>访问 private 构造器</strong></li>\n</ul>\n<p>为了安全性考虑，private 成员外界不准访问。会抛出 <code>java.lang.IllegalAccessException</code></p>\n<p>可以通过调用 <code>AccessibleObject</code> 类中的 public void setAccessible(boolean flag) 方法，设置可访问 <code>setAccessible(true)</code>。</p>\n<p>因为 Constructor 是 AccessibleObject <code>子类</code>，所以 Constructor 可以这样子设置来访问 private 构造器。</p>\n<p>从下图中可以看出<code>Constructor , Method, Field</code> 都<code>继承</code>自 AccessibleObject。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/Java/Reflection/AccessibleObject.jpg\" alt=\"AccessibleObject\"></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Constructor&lt;Student&gt; declaredConstructor = clz.getDeclaredConstructor(<span class=\"built_in\">String</span>.<span class=\"keyword\">class</span>， <span class=\"built_in\">int</span>.<span class=\"keyword\">class</span>， boolean.<span class=\"keyword\">class</span>);</div><div class=\"line\">declaredConstructor.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">Student student1 = declaredConstructor.newInstance(<span class=\"string\">\"fandy\"</span>， <span class=\"number\">12</span>， <span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p><strong><em>注意</em></strong></p>\n<p>由于 可以通过 class newInstance 方法调用无参的公有构造器生成该类。所以：一般的，定义类的时候都要保证有<code>一个公共的无参数构造器</code>,单例设计模式除外。</p>\n<h1 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a><strong>Method</strong></h1><h2 id=\"获取类中的方法\"><a href=\"#获取类中的方法\" class=\"headerlink\" title=\"获取类中的方法\"></a><strong>获取类中的方法</strong></h2><ul>\n<li><strong>获取包括自身和<code>继承过来</code>的所有的 <code>public</code> 方法</strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">methods</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethods</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取自身所有的方法<code>(不包括继承的，和访问权限无关)</code></strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">declaredMethods</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredMethods</span><span class=\"params\">()</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>表示获取指定的一个<code>public</code> 的方法<code>(包括继承的)</code></strong></li>\n</ul>\n<p>通过方法签名获取唯一的方法 </p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">method</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethod</span><span class=\"params\">(\"study\"， String.<span class=\"keyword\">class</span>)</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>表示获取指定的一个本类中的方法<code>(不包括继承的)</code></strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">declaredMethod</span> = <span class=\"title\">clz</span>.<span class=\"title\">getDeclaredMethod</span><span class=\"params\">(\"sleep\")</span>;</span></div></pre></td></tr></table></figure>\n<h2 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a><strong>调用方法</strong></h2><ul>\n<li><strong>调用对象的方法</strong></li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">method</span>.<span class=\"title\">invoke</span><span class=\"params\">(student， \"java iOS Android\")</span>;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>调用对象的<code>私有方法</code></strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">declaredMethod.setAccessible(true)<span class=\"comment\">;</span></div><div class=\"line\">declaredMethod.invoke(student)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>调用<code>类方法</code></strong></li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method method2 = clz.getMethod(<span class=\"string\">\"eat\"</span>， <span class=\"built_in\">String</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\">method2.invoke(<span class=\"keyword\">null</span>， <span class=\"string\">\"什么\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>方法<code>返回值</code>的接收</strong></li>\n</ul>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> someThing = (<span class=\"keyword\">String</span>) method2.invoke(<span class=\"built_in\">null</span>， <span class=\"string\">\"返回吃什么\"</span>);</div><div class=\"line\"><span class=\"keyword\">System</span>.out.println(someThing);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>调用<code>可变参数</code></strong></li>\n</ul>\n<p>对于数组类型的引用类型的参数，底层会<code>自动解包</code>，为了解决该问题，我们使用 <code>Object 的一维数</code>组把实际<code>参数包装</code>起来。</p>\n<p>以后使用反射调用 invoke 方法，在传递实际参数的时候，无论是基本数据类型还是引用数据类型，也无论是可变参数类型，反正就是一切实际参数都包装在new Object[]{}中，就可以了。也就是 <code>method.invoke(方法底层所属对象，new Object[]{实际参数})</code>。</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">method3</span> = <span class=\"title\">clz</span>.<span class=\"title\">getMethod</span><span class=\"params\">(\"doWorks\"， String[].<span class=\"keyword\">class</span>)</span>;</span></div><div class=\"line\">method3.invoke(student， <span class=\"keyword\">new</span> Object[]<span class=\"comment\">&#123;new String[]&#123;\"洗衣\"， \"做饭\"&#125;</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a><strong>Field</strong></h1><h2 id=\"获取类中的字段\"><a href=\"#获取类中的字段\" class=\"headerlink\" title=\"获取类中的字段\"></a><strong>获取类中的字段</strong></h2><ul>\n<li><strong>获取当前 Class 所表示类中所有的 <code>public</code> 的字段，<code>包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field[] fields = clz.getFields()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中所有的字段，<code>不包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field[] declaredFields = clz.getDeclaredFields()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中该fieldName名字的 <code>public</code> 字段，<code>包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Field ageField</span> = clz.getField(<span class=\"string\">\"age\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取当前 Class 所表示类中该fieldName名字的字段，<code>不包括继承</code>的字段</strong></li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Field sexField</span> = clz.getDeclaredField(<span class=\"string\">\"sex\"</span>);</div><div class=\"line\"><span class=\"attribute\">Field nameField</span> = clz.getDeclaredField(<span class=\"string\">\"name\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"get-set类中的字段\"><a href=\"#get-set类中的字段\" class=\"headerlink\" title=\"get set类中的字段\"></a><strong>get set类中的字段</strong></h2><ul>\n<li><strong>基本类型给字段设置值和取值</strong></li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"comment\">// set int</span></div><div class=\"line\">ageField.<span class=\"keyword\">set</span>(student， <span class=\"number\">18</span>); <span class=\"comment\">// 设置的包装类型</span></div><div class=\"line\">ageField.setInt(student， <span class=\"number\">19</span>); <span class=\"comment\">// 基本类型</span></div><div class=\"line\"><span class=\"comment\">// set boolean</span></div><div class=\"line\">sexField.<span class=\"keyword\">set</span>(student， <span class=\"literal\">true</span>);</div><div class=\"line\">sexField.setBoolean(student， <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">// get</span></div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(ageField.getInt(student)); <span class=\"comment\">// 基本类型 int</span></div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(sexField.<span class=\"keyword\">get</span>(student)); <span class=\"comment\">// 取出为包装类型 java.lang.Boolean</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>对象类型给字段设置值和取值</strong></li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象字段</span></div><div class=\"line\">nameField.<span class=\"keyword\">set</span>(student， <span class=\"string\">\"fandy\"</span>);</div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(nameField.<span class=\"keyword\">get</span>(student));</div><div class=\"line\"><span class=\"comment\">// 静态字段 类字段</span></div><div class=\"line\">Field levelField = clz.getDeclaredField(<span class=\"string\">\"level\"</span>);</div><div class=\"line\">levelField.setInt(<span class=\"literal\">null</span>， <span class=\"number\">3</span>);</div><div class=\"line\">System.<span class=\"keyword\">out</span>.println(levelField.getInt(<span class=\"literal\">null</span>));</div><div class=\"line\"><span class=\"comment\">// 私有字段</span></div><div class=\"line\">levelField.setAccessible(<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"Annotation\"></a><strong>Annotation</strong></h1><h2 id=\"获取类中的注解\"><a href=\"#获取类中的注解\" class=\"headerlink\" title=\"获取类中的注解\"></a><strong>获取类中的注解</strong></h2><p>当然非运行时的注解是获取不到的，因为反射是在运行时操作的。</p>\n<ul>\n<li><strong>返回此元素上存在的所有注释</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Annotation[] annotations = clz.getAnnotations()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>返回直接存在于此元素上的所有注释(<code>忽略继承</code>来的注解)</strong></li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Annotation[] declaredAnnotations = clz.getDeclaredAnnotations()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取指定的注解</strong></li>\n</ul>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyAnnotation <span class=\"keyword\">annotation</span> = clz.getAnnotation(MyAnnotation.<span class=\"keyword\">class</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取指定的注解(<code>忽略继承</code>来的注解)</strong></li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">MyAnnotation declaredAnnotation</span> = clz.getDeclaredAnnotation(MyAnnotation.class);</div></pre></td></tr></table></figure>\n<h2 id=\"注解的一些操作\"><a href=\"#注解的一些操作\" class=\"headerlink\" title=\"注解的一些操作\"></a><strong>注解的一些操作</strong></h2><ul>\n<li><strong>获取 Annotation 的参数值</strong><br>其实就是调用 Annotation 接口中的方法返回对应的值</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(<span class=\"selector-tag\">annotation</span><span class=\"selector-class\">.value</span>());</div><div class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(<span class=\"selector-tag\">annotation</span><span class=\"selector-class\">.myValue</span>());</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取 Annotation 的类型</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(<span class=\"selector-tag\">annotation</span><span class=\"selector-class\">.annotationType</span>());</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>判断对应的对象上是否有我们所指定的注解</strong></li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">boolean</span> annotationPresent = clz.isAnnotationPresent(MyAnnotation.<span class=\"built_in\">class</span>);</div></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["Reflection","反射"]},{"title":"Eclipse 中的快捷键","url":"https://fandyliu.github.io/2014/06/01/Java/Eclipse中的快捷键/","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + Enter</td>\n<td style=\"text-align:center\">上一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Enter</td>\n<td style=\"text-align:center\">下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + ↑/↓</td>\n<td style=\"text-align:center\">代码上下移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + 1</td>\n<td style=\"text-align:center\">快速生成变量接受实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD+ Alt + ↑/↓</td>\n<td style=\"text-align:center\">快速复制代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + D</td>\n<td style=\"text-align:center\">删除一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + F</td>\n<td style=\"text-align:center\">格式化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + T</td>\n<td style=\"text-align:center\">快速查找</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD  + T</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + O</td>\n<td style=\"text-align:center\">找方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xml</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD + Shift + A</td>\n<td style=\"text-align:center\">格式化</td>\n</tr>\n</tbody>\n</table>\n","categories":["Java"],"tags":["Eclipse","快捷键"]},{"title":"工具类的设计","url":"https://fandyliu.github.io/2014/05/04/Java/工具类/","content":"<p><strong>使用工具类的<code>好处</code>：</strong> 减少程序中的重复代码，便于维护。</p>\n<h3 id=\"工具类的编写规则\"><a href=\"#工具类的编写规则\" class=\"headerlink\" title=\"工具类的编写规则\"></a><strong>工具类的编写规则</strong></h3><ul>\n<li><p>一般的叫 XxxUtil，XxxUtils，XxxTool，XxxTools，XxxHelper。其中Xxx表示一个对象，一类事物。</p>\n</li>\n<li><p>工具类一般的存放在工具包中，包名中有(util，utils，tool，tools，helper)。</p>\n</li>\n</ul>\n<h3 id=\"工具类的常见形式\"><a href=\"#工具类的常见形式\" class=\"headerlink\" title=\"工具类的常见形式\"></a><strong>工具类的常见形式</strong></h3><p><strong>方式一.</strong><br>若工具方法使用 static 修饰，说明工具方法属于工具类，而不属于工具类的对象。把工具类的构造器给私有化起来，不能创建对象，只能使用类名调用类方法。</p>\n<pre><code>比如:Arrays类，Collections类。\n</code></pre><p><strong>方式二.</strong><br>若工具方法没有使用static修饰，此时把工具类设计成单例即可。</p>\n<p><strong><em>心得</em></strong></p>\n<ul>\n<li>一般的工具类都是单例的，工厂类其实也属于工具类.  推论:工厂类往往体现着单例模式设计。</li>\n<li>一般的，在项目中出现 new 自定义类(不是JDK自带的类)，我们应该使用工厂来创建对象。</li>\n</ul>\n","categories":["Java"],"tags":["工具","设计"]},{"title":"Java 基本语法","url":"https://fandyliu.github.io/2014/04/24/Java/Java基本语法/","content":"<h2 id=\"Java基本语法\"><a href=\"#Java基本语法\" class=\"headerlink\" title=\"Java基本语法:\"></a>Java基本语法:</h2><ol>\n<li>Java 语言严格<code>区分大小写</code>，好比 main 和 Main 是完全不同的概念。</li>\n<li>一个 Java 源文件里可以定义多个 Java 类，但其中<code>最多有一个</code>类被定义成 public 类。若源文件中包括了 public 类，源文件必须和该 public 类同名（没有源文件名随便起）。</li>\n<li>一个源文件中包含 N 个 Java 类时，编译后会生成 N 份字节码文件，即每个类都会生成一份单独的 .class文件，且字节码文件名和其对应的类名相同。</li>\n<li>每一个类必须拥有 main 方法才能运行,因为 main 方法是程序的入口。<a id=\"more\"></a>\n</li>\n</ol>\n<h2 id=\"关键字与保留字\"><a href=\"#关键字与保留字\" class=\"headerlink\" title=\"关键字与保留字\"></a>关键字与保留字</h2><ul>\n<li><p>关键字：在编程语言中有一些事先定义的，有着特殊含义和用途的单词。</p>\n</li>\n<li><p>保留字：和关键字一样都是编程语言事先定义好的，只是说现在暂时没有特殊的用途，但说不定以后某天会突然被赋予意义和被使用到，因此被保留下来的单词。</p>\n</li>\n</ul>\n<p>注意：关键字和保留字都是由小写字母组成。 java 无 sizeof 、goto、 const 关键字。</p>\n<h2 id=\"变量与常量\"><a href=\"#变量与常量\" class=\"headerlink\" title=\"变量与常量\"></a>变量与常量</h2><ul>\n<li><p>常量：程序中固定不变化的值。分为两类：</p>\n<ul>\n<li>字面量：一个写死的固定不变的值。</li>\n<li>final修饰的变量。</li>\n</ul>\n</li>\n<li><p>变量的定义:在程序执行的过程中，其值在某个范围内可以改变的量，可以理解为数学中的未知数。</p>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>Java是强类型的语言，对于每一种数据都定义了明确的数据类型。</p>\n<ol>\n<li>基本数据类型，又称为原生数据类型；</li>\n<li>引用数据类型，又称为对象数据类型，包括类，接口，数组；</li>\n</ol>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p><img src=\"http://ooxag17nr.bkt.clouddn.com/Java/Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"\"></p>\n<ul>\n<li><p>默认情况下，一个整型的字面量是 int 类型。若要声明一个 long 型字面量，字面量后加上 <code>l</code> 或 <code>L</code>，因小写的 <code>l</code> 容易和数字 <code>1</code> 相混淆，建议使用大写 <code>L</code>。当然赋值给 short 和 byte 类型变量的时候有隐式转换所以不会报错。</p>\n</li>\n<li><p>默认情况下，一个浮点型的字面量是 double 类型。若要声明一个 float 型字面量，则需在常量后加上 <code>f</code> 或 <code>F</code>，double 常量后面的 <code>D</code> 或 <code>d</code> 可省略。</p>\n</li>\n</ul>\n<p>因为 float 和 double 都不能精确的表示小数，那么在精度要求高的系统比如银行系统里，要用 <code>BigDecimal</code> 类型，它能表示任意精度的数据。</p>\n<p>char类型：只能存储 1 个字符，Java 对字符采用 Unicode 字符编码。<br>Unicode 收集了世界上各国语言文字中的字符，是一种跨平台的编码方式，Java的字符占两个字节，可以表示一个汉字。</p>\n<p>char 类型本质其实也是整数。</p>\n<p>ASCII 表对应  0-48、A-65、a-97</p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>字符串拼接: 字符串和任意数据类型相连接，结果都是字符串类型。</p>\n<h2 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h2><h3 id=\"表达式自动类型提升\"><a href=\"#表达式自动类型提升\" class=\"headerlink\" title=\"表达式自动类型提升\"></a>表达式自动类型提升</h3><ol>\n<li>在做运算的时候所有的 byte、short、char 类型被自动提升到 int 类型</li>\n<li>整个表达式的最终结果类型被提升到表达式中类型最高的类型</li>\n</ol>\n<h3 id=\"运算特例\"><a href=\"#运算特例\" class=\"headerlink\" title=\"运算特例\"></a>运算特例</h3><ul>\n<li><code>当整数除以 0 的时候</code>：会引发算术异常；</li>\n<li><code>正无穷大(Infinity)</code>：正整数除以 0.0 时；</li>\n<li><code>负无穷大(-Infinity)</code>：负整数除以 0.0 时；</li>\n<li><code>NaN(Not a Number)</code>：当 0.0 除以 0.0 时，或者当一个正浮点类型数除以 0 时，或者当一个负浮点类型数除以 0 时；</li>\n</ul>\n<p>注意：无穷大和 NaN 都属于 double 浮点类型，但是所有正无穷大都是相等的，所有负无穷大也是相等的，NaN永远不相等，也不等于自己。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+=\"></a>+=</h3><p>加等于：x += 5; 相当于 x = x + 5，但还包括<strong>隐式类型转换</strong>。</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><ol>\n<li><code>&amp;</code>：表示并且，当操作数 A 和 B 都为 true 结果才为 true，否则结果 result 是 false。</li>\n<li><code>&amp;&amp;</code>：和 &amp; 结果相同，具有短路效果，如果左边操作数 A 是 false，result 一定为 false，且不运行B的运算。</li>\n<li><code>|</code>：表示或者，A 和 B 都为 false 结果 result 为 false，只要有 A 或 B 是 true，结果就是 true。</li>\n<li><code>||</code>：和 | 结果相同，具有短路效果，如果左边操作数 A 是 true，result 一定为 true，且不运行 B 的运算。</li>\n<li><code>^</code>：判断 A 和 B 是否不同，不同则为true，相同则为false。</li>\n<li><code>!</code>：取反，!true 结果是 false，!fasle 结果是 true。</li>\n</ol>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><ol>\n<li><code>&amp;</code>：参与运算的两个数，若相应位数的值都为 1，则该位结果值是 1，否则是 0。</li>\n<li><code>|</code>：参与运算的两个数相应位中只要有一个 1，结果就是1 。</li>\n<li><code>^</code>：参与运算的两个数相应位相同则结果为 0，否则为 1。</li>\n<li><code>~</code> ：表示把每个二进制位的“1”换成“0”，把“0”换成“1”。</li>\n<li><code>&lt;&lt;</code>：将操作数的二进制码整体左移指定位数，左移之后的空使用“0”来补充。</li>\n<li><code>&gt;&gt;</code>：将操作数的二进制码整体右移指定位数，右移之后的空使用“符号位”来补充：</li>\n<li><code>&gt;&gt;&gt;</code>：将操作数的二进制码整体右移指定位数，右移之后的空位使用“0”来补充。</li>\n</ol>\n<h2 id=\"循环中运算终止语句\"><a href=\"#循环中运算终止语句\" class=\"headerlink\" title=\"循环中运算终止语句\"></a>循环中运算终止语句</h2><p>break：结束当前所在循环<br>continue：结束当前这次循环，继续下次循环<br>return：结束所在的方法，方法都结束了，循环结构自然也就结束了。</p>\n<p>在循环嵌套中，单独控制外层循环该怎么做？<br>此时就得使用标签了，标签就是给某个循环起的别名，不过该别名得满足标识符的规范。<br>若要控制外层循环,就在break或continue后面跟上循环的别名就OK了<br>   如: break &lt;标签名&gt;;</p>\n<h2 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h2><p><code>方法的重载</code>：在同一个类中，允许多个方法的名字相同，但是他们的参数列表绝对不能相同。</p>\n<p>这种设计遵守的原则：两同一不同。<br>两同：同一个类，方法名相同。<br>一不同：形参列表不同。</p>\n<p>注意：方法重载和方法的返回值类型无关。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>三大特征：<br>封装(Encapsulation)；<br>继承(Inheritance)；<br>多态(Polymorphism)；</p>\n<p>封装是指将对象的实现细节隐藏起来，然后通过公共的方法来向外暴露该对象的功能。<br>继承是面向对象实现软件复用的重要手段，当子类继承父类后，子类是一种特殊的父类，能直接或间接获得父类里的成员。<br>多态是可以直接把子类对象赋给父类变量，但是运行时依然表现出子类的行为特征，这意味着同一类型的对象在运行时可能表现出不同的行为特征。</p>\n<p>注意：<br>       面向对象是基于面向过程的</p>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><p>构造器特点:<br>1.方法名与类名相同：<br>这样我们才知道当前创建的是哪个类型的实例。<br>2.不用定义返回值类型：<br>这个方法就是初始化该对象的数据，因为要返回肯定就是自身的类型。<br>3.可以写return语句，但是不能跟有值：<br>因为要返回的一定是初始化好的对象。</p>\n<p>当一个类中没有显示定义构造器时,那么编译器会默认给该类提供一个构造器，其特点是：无参、空方法体、访问修饰符和所在类的访问修饰符相同。</p>\n<p>在类中一旦显示</p>\n<h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>static修饰符表示静态的，固定的，可修饰字段、方法、内部类，其修饰的成员属于类,也就是说static修饰的资源属于类级别,而不是对象级别。</p>\n<p>特点：<br>1.随着类的加载而加载(其生命周期和类一样长)：<br>随着人类产生的同时，人类也就有了文明前进的行为。<br>2.优先于对象存在：<br>类成员是字节码被加载进JVM时就存在了，而对象时后来new出来的。<br>3.被所有对象所共享：<br>既然是人类具备的行为特征，那么每一个人对象也应该具备。<br>4.可以直接被类名调用：<br>类成员直接属于某一类事物,那么就应该让该类事物来直接调用。</p>\n<p>使用static修饰的字段不是存储在堆内存的，而是存储在独立于堆内存和栈内存的方法区内存中，可以被该类所有的对象所共享。</p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p>Eclipse介绍:一款使用Java语言编写的基于插件的IDE(集成开发环境)工具</p>\n<h3 id=\"jar\"><a href=\"#jar\" class=\"headerlink\" title=\"jar\"></a>jar</h3><p>一.命令行制作方式<br>jar命令格式：jar {c t x u f }[ v m e 0 M i ][-C 目录]文件名…<br>其中{ctxu}这四个参数至少选其一。[v f m e 0 M i ]是可选参数，文件名也是必须的。</p>\n<p>一般使用:<br>    jar cvf 文件名.jar 类全名<br>    jar cvf 文件名.jar -C     </p>\n<h2 id=\"String-1\"><a href=\"#String-1\" class=\"headerlink\" title=\"String\"></a>String</h2><p>String对象比较:<br>1）：单独使用””引号创建的字符串都是直接量,编译期就已经确定存储到常量池中；<br>2）：使用new String(“”)创建的对象会存储到堆内存中,是运行期才创建；<br>3）：使用只包含直接量的字符串连接符如”aa” + “bb”创建的也是直接量编译期就能确定,已经确定存储到常量池中；<br>4）：使用包含String直接量(无final修饰符)的字符串表达式(如”aa” + s1)创建的对象是运行期才创建的,存储在堆中；</p>\n<p>String对象.</p>\n<pre><code>-----&gt;不擅长做字符串的连接操作,性能太低.\n</code></pre><hr>\n<p>解决方案: 使用可变的字符串,内容改变之后,对象依然不变.<br>StringBuidler/StringBuffer:<br>——面试——————-<br>StringBuffer  :特点: 线程安全性较高,但是性能较低.                 多线程使用StringBuffer.<br>StringBuilder :特点: 线程安全性较低,当时性能较高. 推荐        单线程使用StringBuilder.</p>\n<h2 id=\"package语句\"><a href=\"#package语句\" class=\"headerlink\" title=\"package语句\"></a>package语句</h2><p>编译和运行带有包名的类<br>编译带包名的java文件：必须要使用参数: -d 文件夹<br>javac -d . Hello.java</p>\n<h2 id=\"import语句\"><a href=\"#import语句\" class=\"headerlink\" title=\"import语句\"></a>import语句</h2><p>语法1： import 类的全限定名;<br>import 完整包名.类名;<br>语法2:import java.util.*;</p>\n<h2 id=\"表示去java-util包下寻找被使用到的类。\"><a href=\"#表示去java-util包下寻找被使用到的类。\" class=\"headerlink\" title=\"表示去java.util包下寻找被使用到的类。\"></a>表示去java.util包下寻找被使用到的类。</h2><p>静态导入：告诉编译器去哪一个包下的指定的类中去找某个静态方法或字段。<br>语法1： import static 类的全限定名.静态成员;<br>import static java.lang.Math.PI;<br>import static java.lang.Math.max;<br>语法2:import static java.lang.Math.<em>;<br>表示去java.lang.Math类中寻找被使用到的静态成员。<br>注意：</em> 只能表示静态成员，不能表示实例成员。<br>静态导入的可读性差,一般很少用,大家了解用法即可</p>\n<h2 id=\"访问权限修饰符\"><a href=\"#访问权限修饰符\" class=\"headerlink\" title=\"访问权限修饰符\"></a>访问权限修饰符</h2><p>①　private(类私有)：本类内部可以访问，同包内不能访问，不能被子类继承。<br>②　无(包私有)：本类内部可以访问，同包其他类也可以访问，能被同包的子类继承。不同包子类不能继承和访问。<br>③　protected（包和子类私有）：本类内部可以访问，不同包的子类也可以访问，同包其他类也可以访问，能被子类所继承。<br>④　public(公共)：任何地方都可以访问，能继承到子类。<br>注意：类的访问修饰符只有 public和缺省，即public class A{}或者class A{}</p>\n<p>final本身的含义是“不可改变的/最终的”，它可以修饰非抽象类，非抽象方法和变量。</p>\n<p>注意：构造方法不能使用final修饰，因为构造方法不能被继承，肯定是最终的。</p>\n<p>什么时候把方法设计成final的呢？<br>1.在构造器里调用的初始化方法。<br>2.只想被子类调用，不想被子类复写的方法，如：父类提供基本业务算法</p>\n<p>常量名规范：常量名符合标识符，单词全部大写，单词间使用”_”(下划线)隔开。</p>\n<p>final修饰基本类型变量：表示该变量的值不能改变，即不能用“=”号重新赋值。<br>final修饰引用类型变量：表示该变量的引用的地址不能变，而不是引用地址里的内容不能变。</p>\n<p>只要满足以下条件就可以把一个类设计成final类：<br>①　某类不是专门为继承而设计。<br>②　出于安全考虑，类的实现细节不许改动。<br>③　确信该类不会再被拓展。<br>java里final修饰的类有很多，比如八大基本数据类型包装类和String类等。</p>\n<p>子类到底继承了父类的哪些成员:<br>   1):SubClass类能继承SuperClass类中的public和protected成员(字段、方法、内部类)。<br>   2):当SubClass和SuperClass类是位于同一包中，SubClass类会继承SuperClass类中的默认访问权限成员。<br>   3):私有成员和构造器，绝对继承不到。构造器不存在继承体系中,只能调用</p>\n<h2 id=\"子类方法覆盖\"><a href=\"#子类方法覆盖\" class=\"headerlink\" title=\"子类方法覆盖\"></a>子类方法覆盖</h2><p>方法覆写的原则（一同两小一大）：<br>一同：<br>①　实例方法签名必须相同。 (方法签名= 方法名 + 方法的参数列表)<br>两小：<br>②　子类方法的返回值类型是父类方法的返回值类型的子类或相同类。<br>③　子类方法声明抛出的异常应比父类方法声明抛出的异常更小或相等。<br>子类方法中声明抛出的异常小于或等于父类方法声明抛出异常类型；<br>子类方法可以同时声明抛出多个属于父类方法声明抛出异常类的子类(RuntimeException类型除外)；<br>一大：<br>④　子类方法的访问权限比父类方法访问权限更大或相等。</p>\n<p>判断是否是覆写方法的必杀技：@Override标签：若方法是覆写方法，在方法前或上贴上该注解， 编译通过表示覆写成功，否则，编译报错。</p>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p>异常：指的是程序在执行过程中，出现的非正常的情况，最终会导致线程的非正常停止。</p>\n<p>异常的祖先是Throwable，有如下两个子类：</p>\n<pre><code>Error：表示错误，错误产生后程序员不能通过代码的方式纠正，只能事先避免，好比绝症。\nException：表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的\n</code></pre><p>Throwable中的常用方法</p>\n<pre><code>public void printStackTrace()；打印异常的详细信息\npublic String getMessage()；获取发生异常的原因\n</code></pre><h3 id=\"finally\"><a href=\"#finally\" class=\"headerlink\" title=\"finally\"></a>finally</h3><p>finaly关键字，用于表示一个代码块。特点，无论是否有异常，最终都会执行finally代码块<br>目的：释放资源</p>\n<p>语法有两种：<br>    try-finally<br>    try-catch-finally</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>1):说说Error和Exception的区别.<br>    Error:是不应该使用代码来解决的错误<br>    Exception:应该使用代码的方式来解决的异常,不解决最终导致JVM异常停止</p>\n<p>2):final,finally,finalize的区别.<br>    final:修饰符,表示最终.修饰变量表示的是常量,值不能被修改.修饰方法表示该方法不能被子类所重写.修饰类表示的是该类不能被继承<br>    finally:表示的是一个代码块,这个代码块的特点是无论是否有异常,都会被执行<br>    finalize:这个是Object类上的方法,这个方法是给GC回收对象时调用的,该方法只会被调用1次,我们不要乱来</p>\n<p>3):return和finally谁先执行.<br>    先return在执行finally</p>\n<p>4):无论是否有异常,finally代码块中的代码都会执行,这句话对吗?<br>    不对,System.exit()可以退出JVM,JVM都退出了,代码怎么执行啊? </p>\n<p>当一个方法在执行过程中,数据出现异常时,就应该使用throw抛出一个异常对象,返回给方法的调用者,异常也是一种返回类型</p>\n<h3 id=\"带异常的方法重写\"><a href=\"#带异常的方法重写\" class=\"headerlink\" title=\"带异常的方法重写\"></a>带异常的方法重写</h3><p>一同两小一大<br>异常的总类少 异常的类型小<br>同 子类方法覆盖</p>\n<h3 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h3><h2 id=\"异常的分类\"><a href=\"#异常的分类\" class=\"headerlink\" title=\"异常的分类:\"></a>异常的分类:</h2><p>Exception分成两大类:<br>   1):编译时期异常:Checked:Exception类和他的子类,除了RuntimeException家族其他的就是编译时期异常.<br>   2):运行时期异常:Runtime: RuntimeExeption类和RuntimeException的子类.</p>\n<p>编译时异常: 要求我们必须处理异常(throws/try-catch),不处理,则编译不能通过.<br>运行时异常: 可处理,可不处理.</p>\n<p>推荐使用RuntimeException.</p>\n<h3 id=\"异常的转型\"><a href=\"#异常的转型\" class=\"headerlink\" title=\"异常的转型\"></a>异常的转型</h3><p>将编译时异常转换成运行时异常,保持异常链的传递</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 异常的转型 将编译时异常转换成运行时异常,保持异常链的传递</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> work() &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">\t\t\t\tthrow <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">```\r<span class=\"meta\">### 自定义异常</span></div><div class=\"line\">建议继承 RutimeException</div><div class=\"line\">重写 至少 <span class=\"number\">3</span>个方法\r\r<span class=\"meta\">## 构造方法</span></div><div class=\"line\"></div><div class=\"line\">子类初始化:\r    子类的构造器第一行必须调用父类的构造器\r\t如果父类有默认的无参构造器，我们可以不用显示调用，编译器会帮我们在编译时加上\r\t如果父类没有无参构造，则必须使用super手动调用父类的构造器，否则编译不能通过\r<span class=\"meta\">## 隐藏问题</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">所谓隐藏就是“遮蔽”的意思。　\r①满足继承的访问权限下，隐藏父类字段：若子类中定义的字段和父类中的字段名相同(不管类型)，此时就是隐藏父类字段，此时只能通过super访问被隐藏的字段。\r②隐藏本类字段：若同类中某局部变量名和字段名相同，此时就是隐藏本类字段，此时只能通过<span class=\"keyword\">this</span>访问被隐藏的字段。\r③满足继承的访问权限下，隐藏父类静态方法：若子类定义的静态方法的签名和父类中的静态方法签名相同，那么此时就是隐藏父类静态方法。\r\r\r<span class=\"meta\">## object 对象</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">### equals 方法在非空对象引用上实现相等关系：</span></div><div class=\"line\"></div><div class=\"line\">自反性：对于任何非空引用值 x，x.equals(x) 都应返回 <span class=\"literal\">true</span>。</div><div class=\"line\">对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 <span class=\"literal\">true</span> 时，x.equals(y) 才应返回 <span class=\"literal\">true</span>。</div><div class=\"line\">传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 <span class=\"literal\">true</span>，并且 y.equals(z) 返回 <span class=\"literal\">true</span>，那么 x.equals(z) 应返回 <span class=\"literal\">true</span>。</div><div class=\"line\">一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 <span class=\"literal\">true</span> 或始终返回 <span class=\"literal\">false</span>，前提是对象上 equals 比较中所用的信息没有被修改。</div><div class=\"line\">对于任何非空引用值 x，x.equals(<span class=\"literal\">null</span>) 都应返回 <span class=\"literal\">false</span>。</div><div class=\"line\"><span class=\"built_in\">Object</span> 类的 equals 方法实现对象上差别可能性最大的相等关系；即，对于任何非空引用值 x 和 y，当且仅当 x 和 y 引用同一个对象时，此方法才返回 <span class=\"literal\">true</span>（x == y 具有值 <span class=\"literal\">true</span>）。</div><div class=\"line\"></div><div class=\"line\">注意：当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">### hashCode</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> hashCode()</div><div class=\"line\">返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。</div><div class=\"line\"><span class=\"meta\">#### hashCode 的常规协定是：</span></div><div class=\"line\"></div><div class=\"line\">在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</div><div class=\"line\">如果根据 equals(<span class=\"built_in\">Object</span>) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。</div><div class=\"line\">如果根据 equals(java.lang.<span class=\"built_in\">Object</span>) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。</div><div class=\"line\">实际上，由 <span class=\"built_in\">Object</span> 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 JavaTM 编程语言不需要这种实现技巧。）</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">返回：</div><div class=\"line\">此对象的一个哈希码值。</div><div class=\"line\">另请参见：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">### toString</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> String toString()</div><div class=\"line\">返回该对象的字符串表示。通常， toString 方法会返回一个“以文本方式表示”此对象的字符串。结果应是一个简明但易于读懂的信息表达式。建议所有子类都重写此方法。</div><div class=\"line\"><span class=\"built_in\">Object</span> 类的 toString 方法返回一个字符串，该字符串由类名（对象是该类的一个实例）、at 标记符“@”和此对象哈希码的无符号十六进制表示组成。换句话说，该方法返回一个字符串，它的值等于：</div><div class=\"line\"></div><div class=\"line\">getClass().getName() + <span class=\"string\">'@'</span> + Integer.toHexString(hashCode())</div><div class=\"line\"> </div><div class=\"line\">返回：</div><div class=\"line\">该对象的字符串表示形式</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">## 多态</span></div><div class=\"line\"></div><div class=\"line\">父类指向了子类对象的引用的现象称为多态。\r\r\r语法格式：boolean b = 对象A   instanceof  类B;\r\r注意：instanceof使用时，对象和类型之间必须是要有关系的，否则编译就报错\r\r其实在开发中instanceof很少使用，因为在开发中，我们是知道对象的真是类型的，直接就强转了，很少去做判断\r\r\r若SuperClass是SubClass的父类或其接口：\r<span class=\"number\">1.</span>若doWork方法只存在于SubClass类中，不存在于SuperClass 类中。SuperClass 类型的变量不能调用到subClass中的方法\r<span class=\"number\">2.</span>若doWork方法是SuperClass和SubClass类中的静态方法，此时子类doWork方法被隐藏，调用的是父类的doWork方法，此时变量obj调用doWork方法时不具备多态特征，也就不存在多态。（由于编译的时候编译器会把 调用者直接改为类）\r<span class=\"number\">3.</span>若doWork方法是子类覆写父类的方法，此时变量obj调用的doWork方法实际上是子类里的doWork方法。(运行多态)\r\r\r<span class=\"meta\">### 构造代码块</span></div><div class=\"line\"></div><div class=\"line\">直接定义在类中，与方法平行，在创建对象的时候执行。每创建一个对象执行一次\r\r特点:优先于构造方法执行,每次实例化对象之前都会执行构造代码块。\r其实编译时就是把这个代码块中的代码放到了构造方法中代码的前面。\r\r\r其实就是把构造代码块中的代码放到构造方法中所有代码的前面,位于<span class=\"keyword\">this</span>(),super()之后\r\r成员变量的赋值,优先于构造代码块</div></pre></td></tr></table></figure>\n<p>class Demo {<br>    String name = “a”;</p>\n<pre><code>Demo() {\n    System.out.println(&quot;构造方法&quot;);\n}\n\n//构造代码块\n{\n    System.out.println(&quot;构造代码块&quot;);\n}\n</code></pre><p>}</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">编译中间代码</div></pre></td></tr></table></figure>\n<p>class Demo {<br>    String name;</p>\n<pre><code>Demo() {\n   name = &quot;a&quot;;\n   System.out.println(&quot;构造代码块&quot;);\n    System.out.println(&quot;构造方法&quot;);\n}\n</code></pre><p>}</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"><span class=\"comment\"># 静态代码块</span></span></div><div class=\"line\"></div><div class=\"line\">使用static修饰的构造代码块,称为静态代码块,用于初始化类中的静态成员变量.\r\r其特点是:\r1.当字节码被加载到JVM的时候执行\r2.只会执行1次</div></pre></td></tr></table></figure>\n<p>class Demo {<br>    static int num = 100;<br>    static {<br>        System.out.println(“static .. code”);<br>        num = 10;<br>    }<br>}</p>\n<p>```</p>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>在java中如果一个方法的方法体没有意义,就不应该有方法体，这种没有方法体的方法我们称为抽象方法,必须使用abstract修饰,该类中有抽象方法,就必须定义成抽象类。</p>\n<p>使用abstract修饰且没有方法体的方法，称为抽象方法。<br>特点：<br>①　使用抽象abstract修饰，方法没有方法体，留给子类去实现。<br>②　抽象方法修饰符不能是private 和 final以及static，为什么？<br>③　抽象方法必须定义在抽象类或接口中。</p>\n<h2 id=\"一般的：习惯性把abstract写在方法访问修饰符的后面，一看就知道是抽象方法。\"><a href=\"#一般的：习惯性把abstract写在方法访问修饰符的后面，一看就知道是抽象方法。\" class=\"headerlink\" title=\"一般的：习惯性把abstract写在方法访问修饰符的后面，一看就知道是抽象方法。\"></a>一般的：习惯性把abstract写在方法访问修饰符的后面，一看就知道是抽象方法。</h2><p>使用abstract关键字修饰的类。<br>特点：<br>①　不能创建实例即不能new一个抽象类。(不能创建对象)<br>②　可以不包含抽象方法，若一旦包含，该类必须作为抽象类。<br>③　若子类没有实现父类所有的抽象方法，那么子类也得作为抽象类(抽象派生类)。<br>④　构造方法不能都定义成私有的，否则不能有子类(创建子类对象前先调用父类构造方法)。<br>⑤　抽象类不能使用final修饰，因为必须有子类，抽象方法才能得以实现。</p>\n<h2 id=\"⑥-是不完整的类，需作为基类，子类去拓展和实现它的功能。\"><a href=\"#⑥-是不完整的类，需作为基类，子类去拓展和实现它的功能。\" class=\"headerlink\" title=\"⑥　是不完整的类，需作为基类，子类去拓展和实现它的功能。\"></a>⑥　是不完整的类，需作为基类，子类去拓展和实现它的功能。</h2><p>注意：抽象类中可以没有抽象的方法，但是有抽象方法的类一定是抽象类</p>\n","categories":["Java"],"tags":["基础","语法"]},{"title":"Java 异常机制","url":"https://fandyliu.github.io/2014/04/18/Java/Java异常机制/","content":"","categories":["Java"],"tags":["异常"]},{"title":"Java 设计模式","url":"https://fandyliu.github.io/2014/04/18/Java/Java设计模式/","content":"<p>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>\n<p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>\n<p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h2 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h2><p>目的：保证某一个类在整个应用中有且只有一个实例(一个类在内存只存在一个对象)，即所有指向该类型实例的引用都指向同一块内存空间。   </p>\n<p>写单例模式的步骤：<br>①　在类内部里显示的把所有的构造方法都使用private修饰。<br>②　在类内部构建一个自身类型的静态字段。<br>③　通过一个公共的静态方法返回本类的字段。</p>\n<p>懒汉式<br>饿汉式</p>\n<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><p>同一个类的多个对象需要平凡创建时,为了节约内存,使用缓存提前保存好一些常用的对象,要使用的时候先看缓存中是否存在,如果存在就从缓存中获取,而不创建新的对象,从而节约内存</p>\n<p>Java 中 Intger 类型对 -128 和127 之间的数字进行了缓存</p>\n","categories":["Java"],"tags":["设计模式"]},{"title":"Java 运行原理","url":"https://fandyliu.github.io/2014/03/08/Java/Java工作原理/","content":"<ul>\n<li><p><code>JVM</code>(Java Virtual Machine）：Java 虚拟机，它是运行所有 Java 程序的虚拟计算机，用来识别和翻译字节码文件的软件。</p>\n</li>\n<li><p><code>JRE</code>(Java Runtime Environment)：Java 运行环境，如果要运行 Java 程序，就需要 JRE 的支持，JRE里包含 JVM。</p>\n</li>\n<li><p><code>JDK</code>(Java Development Kit)：Java开发工具，包含开发 Java 程序的所有工具，如 javac 和 java 等，JDK 里包含 JRE。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Java-的运行原理\"><a href=\"#Java-的运行原理\" class=\"headerlink\" title=\"Java 的运行原理\"></a>Java 的运行原理</h2><p>Java 源代码是自然语言编写的不能被计算机识别，由编译器编译源代码，产生字节码文件，字节码也不是二进制的，他需要 JVM 的机器来解析。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/Java/Java%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/Java%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.jpg\" alt=\"Java运行原理\"></p>\n<p><strong>由此可以看出 Java 即是编译型语言又是解释性语言</strong></p>\n<h2 id=\"Java-跨平台原理\"><a href=\"#Java-跨平台原理\" class=\"headerlink\" title=\"Java 跨平台原理\"></a>Java 跨平台原理</h2><p>通过编译器将 .java 结尾的源文件，编译为 .class 结尾的字节码文件，字节码文件可以在 JVM 上解析成二进制文件告诉操作系统，由于 JVM 在不同的系统平台中都有，从而实现跨平台。</p>\n<p><img src=\"http://ooxag17nr.bkt.clouddn.com/Java/Java%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/Java%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%90%86.jpg\" alt=\"Java运行原理\"></p>\n<h2 id=\"CLASSPAT-的设置\"><a href=\"#CLASSPAT-的设置\" class=\"headerlink\" title=\"CLASSPAT 的设置\"></a>CLASSPAT 的设置</h2><p>CLASSPATH：顾名思义就是 .class 文件的路径，表示JVM从哪里去寻找 .class 文件。</p>\n<ul>\n<li>在 java5 之前 CLASSPATH 没有默认值，要是设置成当前路径的话，得使用“.”。</li>\n</ul>\n<p>若<code>CLASSPATH=.;d:/fandy/*</code>，就表示先在当前目录找 .class 文件，要是没找到就去 <code>d:/fandy/*</code> 目录找（注意分号是英文的否则会配置失败）。</p>\n<p>若使用 Java5 以前的版本，设置 CLASSPATH 应该是：<br><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code><br>其中 dt.jar 是关于运行环境的类库，主要是 swing 的包；tools.jar 是工具类库；</p>\n<ul>\n<li>从 Java5 开始 CLASSPATH 默认就是当前路径，一般情况下不需再指定。</li>\n</ul>\n<p>后来 SUN 公司改进了 JDK 设计，JRE 会自动搜索当前路径下的 jar 包，并自动加载 dt.jar 和 tools.jar。那么从Java5开始，就不必为设置 CLASSPATH 变量了。</p>\n<h2 id=\"JVM-内存介绍\"><a href=\"#JVM-内存介绍\" class=\"headerlink\" title=\"JVM 内存介绍\"></a>JVM 内存介绍</h2><p><img src=\"http://ooxag17nr.bkt.clouddn.com/Java/Java%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/JVM7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.jpg\" alt=\"\"></p>\n<h3 id=\"JVM7逻辑内存划分\"><a href=\"#JVM7逻辑内存划分\" class=\"headerlink\" title=\"JVM7逻辑内存划分:\"></a>JVM7逻辑内存划分:</h3><p><code>程序计数器</code>：当前线程所执行的字节码的行号指示器。</p>\n<p><code>本地方法栈</code>：为虚拟机使用的 native 方法服务。</p>\n<p><code>Java 虚拟机栈</code>：描述 Java 方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧用于存储局部变量表、操作栈、动态链接、方法出口等信息。</p>\n<p><code>Java堆</code>：被所有线程共享的一块内存区域，在虚拟机启动时创建。所有的对象实例以及数组都要在堆上分配，堆存储的是对象（一般使用new创建的数据就是对象）。</p>\n<p><code>方法区</code>：线程共享的内存区域，存储已被虚拟机加载的类信息、常量、静态变量即时编译器编译后的代码数据等(这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载)。</p>\n<p>Java8 中，没有方法区，取而代之的是元数据区，其用作是和方法区一样的，但是这片内存是可以动态的跟系统申请的，当不够用时就向系统申请。</p>\n<p><code>GC (Garbage Collection)</code>: 垃圾回收器。<br>Java 的 GC 简单理解为：自动垃圾回收机制<br>程序员就不需要再手动的去控制内存的释放。当JVM发觉内存资源紧张的时候，就会自动地去清理无用对象（没有被引用到的对象）所占用的内存空间。</p>\n<p>我们不能控制GC</p>\n<p>注意：并不是一产生垃圾就马上执行GC，这完全取决于JVM的调度，程序员无法控制。</p>\n","categories":["Java"],"tags":["运行","原理"]},{"title":"about","url":"https://fandyliu.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://fandyliu.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://fandyliu.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://fandyliu.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://fandyliu.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://fandyliu.github.io/tag/index.html","content":"","categories":[],"tags":[]}]